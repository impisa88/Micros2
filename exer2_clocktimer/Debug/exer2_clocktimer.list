
exer2_clocktimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038dc  080038dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038dc  080038dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038dc  080038dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08003954  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003954  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010663  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce2  00000000  00000000  00030703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf3c  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009402  00000000  00000000  0005086c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4027  00000000  00000000  00059c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fdc95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  000fdd10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003844 	.word	0x08003844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003844 	.word	0x08003844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f927 	bl	80004d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f002 fd3e 	bl	8002d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f93f 	bl	800053e <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f907 	bl	80004ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	200000a4 	.word	0x200000a4

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000a4 	.word	0x200000a4

0800033c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 021f 	and.w	r2, r3, #31
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <NVIC_EnableIRQ+0x30>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2001      	movs	r0, #1
 80003ba:	fa00 f202 	lsl.w	r2, r0, r2
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e100 	.word	0xe000e100

080003d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	6039      	str	r1, [r7, #0]
 80003de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	da0b      	bge.n	8000400 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	490c      	ldr	r1, [pc, #48]	; (8000420 <NVIC_SetPriority+0x4c>)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 030f 	and.w	r3, r3, #15
 80003f4:	3b04      	subs	r3, #4
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003fe:	e009      	b.n	8000414 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <NVIC_SetPriority+0x50>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	0112      	lsls	r2, r2, #4
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	440b      	add	r3, r1
 8000410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	e000ed00 	.word	0xe000ed00
 8000424:	e000e100 	.word	0xe000e100

08000428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000428:	b480      	push	{r7}
 800042a:	b089      	sub	sp, #36	; 0x24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f003 0307 	and.w	r3, r3, #7
 800043a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	f1c3 0307 	rsb	r3, r3, #7
 8000442:	2b04      	cmp	r3, #4
 8000444:	bf28      	it	cs
 8000446:	2304      	movcs	r3, #4
 8000448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3304      	adds	r3, #4
 800044e:	2b06      	cmp	r3, #6
 8000450:	d902      	bls.n	8000458 <NVIC_EncodePriority+0x30>
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3b03      	subs	r3, #3
 8000456:	e000      	b.n	800045a <NVIC_EncodePriority+0x32>
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	f04f 32ff 	mov.w	r2, #4294967295
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	43da      	mvns	r2, r3
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	401a      	ands	r2, r3
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000470:	f04f 31ff 	mov.w	r1, #4294967295
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43d9      	mvns	r1, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000480:	4313      	orrs	r3, r2
         );
}
 8000482:	4618      	mov	r0, r3
 8000484:	3724      	adds	r7, #36	; 0x24
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
	...

08000490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3b01      	subs	r3, #1
 800049c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a0:	d301      	bcc.n	80004a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004a2:	2301      	movs	r3, #1
 80004a4:	e00f      	b.n	80004c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <SysTick_Config+0x40>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ae:	210f      	movs	r1, #15
 80004b0:	f04f 30ff 	mov.w	r0, #4294967295
 80004b4:	f7ff ff8e 	bl	80003d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <SysTick_Config+0x40>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <SysTick_Config+0x40>)
 80004c0:	2207      	movs	r2, #7
 80004c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	e000e010 	.word	0xe000e010

080004d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff2d 	bl	800033c <NVIC_SetPriorityGrouping>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	4603      	mov	r3, r0
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
 80004f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004fc:	f7ff ff42 	bl	8000384 <NVIC_GetPriorityGrouping>
 8000500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	68b9      	ldr	r1, [r7, #8]
 8000506:	6978      	ldr	r0, [r7, #20]
 8000508:	f7ff ff8e 	bl	8000428 <NVIC_EncodePriority>
 800050c:	4602      	mov	r2, r0
 800050e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff5d 	bl	80003d4 <NVIC_SetPriority>
}
 800051a:	bf00      	nop
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	4603      	mov	r3, r0
 800052a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff35 	bl	80003a0 <NVIC_EnableIRQ>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ffa2 	bl	8000490 <SysTick_Config>
 800054c:	4603      	mov	r3, r0
}
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000558:	b480      	push	{r7}
 800055a:	b087      	sub	sp, #28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800056e:	e14e      	b.n	800080e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	2101      	movs	r1, #1
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b00      	cmp	r3, #0
 8000584:	f000 8140 	beq.w	8000808 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d003      	beq.n	8000598 <HAL_GPIO_Init+0x40>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2b12      	cmp	r3, #18
 8000596:	d123      	bne.n	80005e0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	08da      	lsrs	r2, r3, #3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3208      	adds	r2, #8
 80005a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f003 0307 	and.w	r3, r3, #7
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	220f      	movs	r2, #15
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	691a      	ldr	r2, [r3, #16]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	08da      	lsrs	r2, r3, #3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3208      	adds	r2, #8
 80005da:	6939      	ldr	r1, [r7, #16]
 80005dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2203      	movs	r2, #3
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f003 0203 	and.w	r2, r3, #3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	693a      	ldr	r2, [r7, #16]
 800060a:	4313      	orrs	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d00b      	beq.n	8000634 <HAL_GPIO_Init+0xdc>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d007      	beq.n	8000634 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000628:	2b11      	cmp	r3, #17
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2b12      	cmp	r3, #18
 8000632:	d130      	bne.n	8000696 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2203      	movs	r2, #3
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066a:	2201      	movs	r2, #1
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	4013      	ands	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	091b      	lsrs	r3, r3, #4
 8000680:	f003 0201 	and.w	r2, r3, #1
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	2203      	movs	r2, #3
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4013      	ands	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	4313      	orrs	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 809a 	beq.w	8000808 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d4:	4b55      	ldr	r3, [pc, #340]	; (800082c <HAL_GPIO_Init+0x2d4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a54      	ldr	r2, [pc, #336]	; (800082c <HAL_GPIO_Init+0x2d4>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b52      	ldr	r3, [pc, #328]	; (800082c <HAL_GPIO_Init+0x2d4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006ec:	4a50      	ldr	r2, [pc, #320]	; (8000830 <HAL_GPIO_Init+0x2d8>)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	089b      	lsrs	r3, r3, #2
 80006f2:	3302      	adds	r3, #2
 80006f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	220f      	movs	r2, #15
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000716:	d013      	beq.n	8000740 <HAL_GPIO_Init+0x1e8>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a46      	ldr	r2, [pc, #280]	; (8000834 <HAL_GPIO_Init+0x2dc>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d00d      	beq.n	800073c <HAL_GPIO_Init+0x1e4>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a45      	ldr	r2, [pc, #276]	; (8000838 <HAL_GPIO_Init+0x2e0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d007      	beq.n	8000738 <HAL_GPIO_Init+0x1e0>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a44      	ldr	r2, [pc, #272]	; (800083c <HAL_GPIO_Init+0x2e4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d101      	bne.n	8000734 <HAL_GPIO_Init+0x1dc>
 8000730:	2303      	movs	r3, #3
 8000732:	e006      	b.n	8000742 <HAL_GPIO_Init+0x1ea>
 8000734:	2305      	movs	r3, #5
 8000736:	e004      	b.n	8000742 <HAL_GPIO_Init+0x1ea>
 8000738:	2302      	movs	r3, #2
 800073a:	e002      	b.n	8000742 <HAL_GPIO_Init+0x1ea>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <HAL_GPIO_Init+0x1ea>
 8000740:	2300      	movs	r3, #0
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	f002 0203 	and.w	r2, r2, #3
 8000748:	0092      	lsls	r2, r2, #2
 800074a:	4093      	lsls	r3, r2
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000752:	4937      	ldr	r1, [pc, #220]	; (8000830 <HAL_GPIO_Init+0x2d8>)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	3302      	adds	r3, #2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000760:	4b37      	ldr	r3, [pc, #220]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	43db      	mvns	r3, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	43db      	mvns	r3, r3
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	4013      	ands	r3, r2
 8000798:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	43db      	mvns	r3, r3
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4013      	ands	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4313      	orrs	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_GPIO_Init+0x2e8>)
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa22 f303 	lsr.w	r3, r2, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	f47f aea9 	bne.w	8000570 <HAL_GPIO_Init+0x18>
  }
}
 800081e:	bf00      	nop
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40010000 	.word	0x40010000
 8000834:	48000400 	.word	0x48000400
 8000838:	48000800 	.word	0x48000800
 800083c:	48000c00 	.word	0x48000c00
 8000840:	40010400 	.word	0x40010400

08000844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
 8000850:	4613      	mov	r3, r2
 8000852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	787b      	ldrb	r3, [r7, #1]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000860:	e002      	b.n	8000868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	405a      	eors	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	615a      	str	r2, [r3, #20]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800089e:	af00      	add	r7, sp, #0
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	f000 beda 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 816e 	beq.w	8000b9e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008c2:	4bb5      	ldr	r3, [pc, #724]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d00c      	beq.n	80008e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ce:	4bb2      	ldr	r3, [pc, #712]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	d15a      	bne.n	8000990 <HAL_RCC_OscConfig+0xf8>
 80008da:	4baf      	ldr	r3, [pc, #700]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d153      	bne.n	8000990 <HAL_RCC_OscConfig+0xf8>
 80008e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000900:	fab3 f383 	clz	r3, r3
 8000904:	b2db      	uxtb	r3, r3
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d102      	bne.n	800091a <HAL_RCC_OscConfig+0x82>
 8000914:	4ba0      	ldr	r3, [pc, #640]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	e015      	b.n	8000946 <HAL_RCC_OscConfig+0xae>
 800091a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800091e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000922:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000926:	fa93 f3a3 	rbit	r3, r3
 800092a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800092e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000932:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000936:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800093a:	fa93 f3a3 	rbit	r3, r3
 800093e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000942:	4b95      	ldr	r3, [pc, #596]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800094a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800094e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000952:	fa92 f2a2 	rbit	r2, r2
 8000956:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800095a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	b252      	sxtb	r2, r2
 8000964:	f042 0220 	orr.w	r2, r2, #32
 8000968:	b252      	sxtb	r2, r2
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	f002 021f 	and.w	r2, r2, #31
 8000970:	2101      	movs	r1, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 810f 	beq.w	8000b9c <HAL_RCC_OscConfig+0x304>
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f040 8109 	bne.w	8000b9c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	f000 be6b 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800099a:	d106      	bne.n	80009aa <HAL_RCC_OscConfig+0x112>
 800099c:	4b7e      	ldr	r3, [pc, #504]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a7d      	ldr	r2, [pc, #500]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e030      	b.n	8000a0c <HAL_RCC_OscConfig+0x174>
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10c      	bne.n	80009ce <HAL_RCC_OscConfig+0x136>
 80009b4:	4b78      	ldr	r3, [pc, #480]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a77      	ldr	r2, [pc, #476]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b75      	ldr	r3, [pc, #468]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a74      	ldr	r2, [pc, #464]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	e01e      	b.n	8000a0c <HAL_RCC_OscConfig+0x174>
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d8:	d10c      	bne.n	80009f4 <HAL_RCC_OscConfig+0x15c>
 80009da:	4b6f      	ldr	r3, [pc, #444]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a6e      	ldr	r2, [pc, #440]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	4b6c      	ldr	r3, [pc, #432]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a6b      	ldr	r2, [pc, #428]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e00b      	b.n	8000a0c <HAL_RCC_OscConfig+0x174>
 80009f4:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a67      	ldr	r2, [pc, #412]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 80009fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a64      	ldr	r2, [pc, #400]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a0c:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a10:	f023 020f 	bic.w	r2, r3, #15
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	495f      	ldr	r1, [pc, #380]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d05a      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fc7b 	bl	8000324 <HAL_GetTick>
 8000a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a32:	e00a      	b.n	8000a4a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a34:	f7ff fc76 	bl	8000324 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b64      	cmp	r3, #100	; 0x64
 8000a42:	d902      	bls.n	8000a4a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	f000 be0e 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
 8000a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a52:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a56:	fa93 f3a3 	rbit	r3, r3
 8000a5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	095b      	lsrs	r3, r3, #5
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d102      	bne.n	8000a7c <HAL_RCC_OscConfig+0x1e4>
 8000a76:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	e015      	b.n	8000aa8 <HAL_RCC_OscConfig+0x210>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a88:	fa93 f3a3 	rbit	r3, r3
 8000a8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a9c:	fa93 f3a3 	rbit	r3, r3
 8000aa0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aac:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ab0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ab4:	fa92 f2a2 	rbit	r2, r2
 8000ab8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000abc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b252      	sxtb	r2, r2
 8000ac6:	f042 0220 	orr.w	r2, r2, #32
 8000aca:	b252      	sxtb	r2, r2
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	f002 021f 	and.w	r2, r2, #31
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0aa      	beq.n	8000a34 <HAL_RCC_OscConfig+0x19c>
 8000ade:	e05e      	b.n	8000b9e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fc20 	bl	8000324 <HAL_GetTick>
 8000ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae8:	e00a      	b.n	8000b00 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aea:	f7ff fc1b 	bl	8000324 <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b64      	cmp	r3, #100	; 0x64
 8000af8:	d902      	bls.n	8000b00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f000 bdb3 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
 8000b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b04:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b0c:	fa93 f3a3 	rbit	r3, r3
 8000b10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d102      	bne.n	8000b32 <HAL_RCC_OscConfig+0x29a>
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	e015      	b.n	8000b5e <HAL_RCC_OscConfig+0x2c6>
 8000b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b3e:	fa93 f3a3 	rbit	r3, r3
 8000b42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_RCC_OscConfig+0x300>)
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b62:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b66:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b6a:	fa92 f2a2 	rbit	r2, r2
 8000b6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	b252      	sxtb	r2, r2
 8000b7c:	f042 0220 	orr.w	r2, r2, #32
 8000b80:	b252      	sxtb	r2, r2
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	f002 021f 	and.w	r2, r2, #31
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1aa      	bne.n	8000aea <HAL_RCC_OscConfig+0x252>
 8000b94:	e003      	b.n	8000b9e <HAL_RCC_OscConfig+0x306>
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 8170 	beq.w	8000e8e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bae:	4bd0      	ldr	r3, [pc, #832]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00b      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bba:	4bcd      	ldr	r3, [pc, #820]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d16d      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x40a>
 8000bc6:	4bca      	ldr	r3, [pc, #808]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d167      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x40a>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000be4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be8:	fab3 f383 	clz	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d102      	bne.n	8000c02 <HAL_RCC_OscConfig+0x36a>
 8000bfc:	4bbc      	ldr	r3, [pc, #752]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	e013      	b.n	8000c2a <HAL_RCC_OscConfig+0x392>
 8000c02:	2302      	movs	r3, #2
 8000c04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c1e:	fa93 f3a3 	rbit	r3, r3
 8000c22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c26:	4bb2      	ldr	r3, [pc, #712]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c34:	fa92 f2a2 	rbit	r2, r2
 8000c38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b252      	sxtb	r2, r2
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	b252      	sxtb	r2, r2
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	f002 021f 	and.w	r2, r2, #31
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <HAL_RCC_OscConfig+0x3d6>
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d002      	beq.n	8000c6e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f000 bcfc 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6e:	4ba0      	ldr	r3, [pc, #640]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6959      	ldr	r1, [r3, #20]
 8000c7c:	23f8      	movs	r3, #248	; 0xf8
 8000c7e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	4995      	ldr	r1, [pc, #596]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca0:	e0f5      	b.n	8000e8e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 8085 	beq.w	8000db8 <HAL_RCC_OscConfig+0x520>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000cc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ccc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fb24 	bl	8000324 <HAL_GetTick>
 8000cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	e00a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fb1f 	bl	8000324 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d902      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f000 bcb7 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <HAL_RCC_OscConfig+0x490>
 8000d22:	4b73      	ldr	r3, [pc, #460]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	e013      	b.n	8000d50 <HAL_RCC_OscConfig+0x4b8>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d40:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d4c:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2202      	movs	r2, #2
 8000d52:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d56:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d5a:	fa92 f2a2 	rbit	r2, r2
 8000d5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	b252      	sxtb	r2, r2
 8000d6c:	f042 0220 	orr.w	r2, r2, #32
 8000d70:	b252      	sxtb	r2, r2
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	f002 021f 	and.w	r2, r2, #31
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0ae      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6959      	ldr	r1, [r3, #20]
 8000d92:	23f8      	movs	r3, #248	; 0xf8
 8000d94:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000da4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	494f      	ldr	r1, [pc, #316]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
 8000db6:	e06a      	b.n	8000e8e <HAL_RCC_OscConfig+0x5f6>
 8000db8:	2301      	movs	r3, #1
 8000dba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dce:	fab3 f383 	clz	r3, r3
 8000dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2300      	movs	r3, #0
 8000de0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fa9f 	bl	8000324 <HAL_GetTick>
 8000de6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dec:	f7ff fa9a 	bl	8000324 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d902      	bls.n	8000e02 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f000 bc32 	b.w	8001666 <HAL_RCC_OscConfig+0xdce>
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x59a>
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e013      	b.n	8000e5a <HAL_RCC_OscConfig+0x5c2>
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_RCC_OscConfig+0x658>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e60:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e64:	fa92 f2a2 	rbit	r2, r2
 8000e68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	b252      	sxtb	r2, r2
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	b252      	sxtb	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ae      	bne.n	8000dec <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80d8 	beq.w	800104e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d067      	beq.n	8000f78 <HAL_RCC_OscConfig+0x6e0>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_RCC_OscConfig+0x65c>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2301      	movs	r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fa28 	bl	8000324 <HAL_GetTick>
 8000ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed8:	e00e      	b.n	8000ef8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff fa23 	bl	8000324 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d906      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e3bb      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	10908120 	.word	0x10908120
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f14:	fa93 f2a3 	rbit	r2, r3
 8000f18:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	fa93 f2a3 	rbit	r2, r3
 8000f30:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	4ba5      	ldr	r3, [pc, #660]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8000f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f3e:	2102      	movs	r1, #2
 8000f40:	6019      	str	r1, [r3, #0]
 8000f42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	fa93 f1a3 	rbit	r1, r3
 8000f4c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f50:	6019      	str	r1, [r3, #0]
  return(result);
 8000f52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	fab3 f383 	clz	r3, r3
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0b1      	beq.n	8000eda <HAL_RCC_OscConfig+0x642>
 8000f76:	e06a      	b.n	800104e <HAL_RCC_OscConfig+0x7b6>
 8000f78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	fa93 f2a3 	rbit	r2, r3
 8000f8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f8e:	601a      	str	r2, [r3, #0]
  return(result);
 8000f90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x938>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff f9bc 	bl	8000324 <HAL_GetTick>
 8000fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb0:	e009      	b.n	8000fc6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb2:	f7ff f9b7 	bl	8000324 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e34f      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 8000fc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fca:	2202      	movs	r2, #2
 8000fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	fa93 f2a3 	rbit	r2, r3
 8000fd8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	fa93 f2a3 	rbit	r2, r3
 8000ff0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	fa93 f2a3 	rbit	r2, r3
 8001008:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800100c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100e:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001012:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001016:	2102      	movs	r1, #2
 8001018:	6019      	str	r1, [r3, #0]
 800101a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fa93 f1a3 	rbit	r1, r3
 8001024:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001028:	6019      	str	r1, [r3, #0]
  return(result);
 800102a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1b1      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8159 	beq.w	8001310 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001064:	4b59      	ldr	r3, [pc, #356]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d112      	bne.n	8001096 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	4b56      	ldr	r3, [pc, #344]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107a:	61d3      	str	r3, [r2, #28]
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001090:	2301      	movs	r3, #1
 8001092:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_RCC_OscConfig+0x93c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d11a      	bne.n	80010d8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_RCC_OscConfig+0x93c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_RCC_OscConfig+0x93c>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ae:	f7ff f939 	bl	8000324 <HAL_GetTick>
 80010b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b6:	e009      	b.n	80010cc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b8:	f7ff f934 	bl	8000324 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e2cc      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <HAL_RCC_OscConfig+0x93c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0ef      	beq.n	80010b8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x858>
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e02f      	b.n	8001150 <HAL_RCC_OscConfig+0x8b8>
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x87c>
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6213      	str	r3, [r2, #32]
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	6213      	str	r3, [r2, #32]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0x8b8>
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x8a0>
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0x8b8>
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d06b      	beq.n	8001232 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff f8e3 	bl	8000324 <HAL_GetTick>
 800115e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff f8de 	bl	8000324 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e274      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 800117c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001180:	2202      	movs	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	fa93 f2a3 	rbit	r2, r3
 800118e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001198:	2202      	movs	r2, #2
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fa93 f2a3 	rbit	r2, r3
 80011a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011aa:	601a      	str	r2, [r3, #0]
  return(result);
 80011ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d108      	bne.n	80011d8 <HAL_RCC_OscConfig+0x940>
 80011c6:	4b01      	ldr	r3, [pc, #4]	; (80011cc <HAL_RCC_OscConfig+0x934>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	e013      	b.n	80011f4 <HAL_RCC_OscConfig+0x95c>
 80011cc:	40021000 	.word	0x40021000
 80011d0:	10908120 	.word	0x10908120
 80011d4:	40007000 	.word	0x40007000
 80011d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	fa93 f2a3 	rbit	r2, r3
 80011ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4bbb      	ldr	r3, [pc, #748]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011f8:	2102      	movs	r1, #2
 80011fa:	6011      	str	r1, [r2, #0]
 80011fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	fa92 f1a2 	rbit	r1, r2
 8001206:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800120a:	6011      	str	r1, [r2, #0]
  return(result);
 800120c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b252      	sxtb	r2, r2
 8001218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800121c:	b252      	sxtb	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f002 021f 	and.w	r2, r2, #31
 8001224:	2101      	movs	r1, #1
 8001226:	fa01 f202 	lsl.w	r2, r1, r2
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d099      	beq.n	8001164 <HAL_RCC_OscConfig+0x8cc>
 8001230:	e064      	b.n	80012fc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff f877 	bl	8000324 <HAL_GetTick>
 8001236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff f872 	bl	8000324 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e208      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 8001254:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	fa93 f2a3 	rbit	r2, r3
 8001266:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001282:	601a      	str	r2, [r3, #0]
  return(result);
 8001284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001288:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	095b      	lsrs	r3, r3, #5
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0xa0c>
 800129e:	4b90      	ldr	r3, [pc, #576]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	e00d      	b.n	80012c0 <HAL_RCC_OscConfig+0xa28>
 80012a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012c4:	2102      	movs	r1, #2
 80012c6:	6011      	str	r1, [r2, #0]
 80012c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	fa92 f1a2 	rbit	r1, r2
 80012d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012d6:	6011      	str	r1, [r2, #0]
  return(result);
 80012d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	b252      	sxtb	r2, r2
 80012e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012e8:	b252      	sxtb	r2, r2
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	f002 021f 	and.w	r2, r2, #31
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f202 	lsl.w	r2, r1, r2
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d19f      	bne.n	800123c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001300:	2b01      	cmp	r3, #1
 8001302:	d105      	bne.n	8001310 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001304:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4a75      	ldr	r2, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 800130a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 81a4 	beq.w	8001664 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131c:	4b70      	ldr	r3, [pc, #448]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	f000 819b 	beq.w	8001660 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b02      	cmp	r3, #2
 8001332:	f040 8113 	bne.w	800155c <HAL_RCC_OscConfig+0xcc4>
 8001336:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800133e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800134e:	601a      	str	r2, [r3, #0]
  return(result);
 8001350:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001354:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2300      	movs	r3, #0
 8001368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7fe ffdb 	bl	8000324 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	e009      	b.n	8001388 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7fe ffd6 	bl	8000324 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e16e      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 8001388:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013a0:	601a      	str	r2, [r3, #0]
  return(result);
 80013a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	fab3 f383 	clz	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d102      	bne.n	80013c2 <HAL_RCC_OscConfig+0xb2a>
 80013bc:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	e01b      	b.n	80013fa <HAL_RCC_OscConfig+0xb62>
 80013c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f2a3 	rbit	r2, r3
 80013f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001402:	6011      	str	r1, [r2, #0]
 8001404:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	fa92 f1a2 	rbit	r1, r2
 800140e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001412:	6011      	str	r1, [r2, #0]
  return(result);
 8001414:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	fab2 f282 	clz	r2, r2
 800141e:	b252      	sxtb	r2, r2
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	b252      	sxtb	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f002 021f 	and.w	r2, r2, #31
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d19d      	bne.n	8001374 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	430b      	orrs	r3, r1
 800144e:	4924      	ldr	r1, [pc, #144]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800145c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fa93 f2a3 	rbit	r2, r3
 8001468:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146c:	601a      	str	r2, [r3, #0]
  return(result);
 800146e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001472:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800147c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	2301      	movs	r3, #1
 8001486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7fe ff4c 	bl	8000324 <HAL_GetTick>
 800148c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7fe ff47 	bl	8000324 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0df      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 80014a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014be:	601a      	str	r2, [r3, #0]
  return(result);
 80014c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d104      	bne.n	80014e4 <HAL_RCC_OscConfig+0xc4c>
 80014da:	4b01      	ldr	r3, [pc, #4]	; (80014e0 <HAL_RCC_OscConfig+0xc48>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	e01d      	b.n	800151c <HAL_RCC_OscConfig+0xc84>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0xdd8>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001524:	6011      	str	r1, [r2, #0]
 8001526:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	fa92 f1a2 	rbit	r1, r2
 8001530:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001534:	6011      	str	r1, [r2, #0]
  return(result);
 8001536:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b252      	sxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b252      	sxtb	r2, r2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d09b      	beq.n	8001492 <HAL_RCC_OscConfig+0xbfa>
 800155a:	e083      	b.n	8001664 <HAL_RCC_OscConfig+0xdcc>
 800155c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001574:	601a      	str	r2, [r3, #0]
  return(result);
 8001576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	461a      	mov	r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7fe fec8 	bl	8000324 <HAL_GetTick>
 8001594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	e009      	b.n	80015ae <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7fe fec3 	bl	8000324 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e05b      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f2a3 	rbit	r2, r3
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	601a      	str	r2, [r3, #0]
  return(result);
 80015c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0xd50>
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_RCC_OscConfig+0xdd8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e01b      	b.n	8001620 <HAL_RCC_OscConfig+0xd88>
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f2a3 	rbit	r2, r3
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_RCC_OscConfig+0xdd8>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f107 0214 	add.w	r2, r7, #20
 8001624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001628:	6011      	str	r1, [r2, #0]
 800162a:	f107 0214 	add.w	r2, r7, #20
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	fa92 f1a2 	rbit	r1, r2
 8001634:	f107 0210 	add.w	r2, r7, #16
 8001638:	6011      	str	r1, [r2, #0]
  return(result);
 800163a:	f107 0210 	add.w	r2, r7, #16
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	fab2 f282 	clz	r2, r2
 8001644:	b252      	sxtb	r2, r2
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	b252      	sxtb	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f002 021f 	and.w	r2, r2, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d19d      	bne.n	800159a <HAL_RCC_OscConfig+0xd02>
 800165e:	e001      	b.n	8001664 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09e      	sub	sp, #120	; 0x78
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e164      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d910      	bls.n	80016bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	498d      	ldr	r1, [pc, #564]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e14c      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4981      	ldr	r1, [pc, #516]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80df 	beq.w	80018a6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d13d      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
 80016f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <HAL_RCC_ClockConfig+0xa6>
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e00f      	b.n	800173a <HAL_RCC_ClockConfig+0xc6>
 800171a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	667b      	str	r3, [r7, #100]	; 0x64
 8001728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172c:	663b      	str	r3, [r7, #96]	; 0x60
 800172e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800173e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001742:	fa92 f2a2 	rbit	r2, r2
 8001746:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b252      	sxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b252      	sxtb	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f002 021f 	and.w	r2, r2, #31
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d17d      	bne.n	8001864 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0f4      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d13d      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x17c>
 8001774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001778:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_RCC_ClockConfig+0x12a>
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e00f      	b.n	80017be <HAL_RCC_ClockConfig+0x14a>
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
 80017ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ba:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017c6:	fa92 f2a2 	rbit	r2, r2
 80017ca:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	b252      	sxtb	r2, r2
 80017d4:	f042 0220 	orr.w	r2, r2, #32
 80017d8:	b252      	sxtb	r2, r2
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f002 021f 	and.w	r2, r2, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d13b      	bne.n	8001864 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b2      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
 80017f0:	2302      	movs	r3, #2
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_ClockConfig+0x1a4>
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e00d      	b.n	8001834 <HAL_RCC_ClockConfig+0x1c0>
 8001818:	2302      	movs	r3, #2
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	2202      	movs	r2, #2
 8001836:	61ba      	str	r2, [r7, #24]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	fa92 f2a2 	rbit	r2, r2
 800183e:	617a      	str	r2, [r7, #20]
  return(result);
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b252      	sxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b252      	sxtb	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e078      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 0203 	bic.w	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	491a      	ldr	r1, [pc, #104]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001876:	f7fe fd55 	bl	8000324 <HAL_GetTick>
 800187a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	e00a      	b.n	8001894 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7fe fd51 	bl	8000324 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e060      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_ClockConfig+0x268>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 020c 	and.w	r2, r3, #12
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d1eb      	bne.n	800187e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d215      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 0207 	bic.w	r2, r3, #7
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d006      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e03f      	b.n	8001956 <HAL_RCC_ClockConfig+0x2e2>
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_ClockConfig+0x2ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4919      	ldr	r1, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x2ec>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_RCC_ClockConfig+0x2ec>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4911      	ldr	r1, [pc, #68]	; (8001960 <HAL_RCC_ClockConfig+0x2ec>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800191e:	f000 f825 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x2ec>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800192c:	23f0      	movs	r3, #240	; 0xf0
 800192e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	60fb      	str	r3, [r7, #12]
  return(result);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_RCC_ClockConfig+0x2f0>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	fa21 f303 	lsr.w	r3, r1, r3
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_RCC_ClockConfig+0x2f4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800194e:	2000      	movs	r0, #0
 8001950:	f7fe fca4 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3778      	adds	r7, #120	; 0x78
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	08003890 	.word	0x08003890
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x30>
 8001996:	2b08      	cmp	r3, #8
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x36>
 800199a:	e03c      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 800199e:	623b      	str	r3, [r7, #32]
      break;
 80019a0:	e03c      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019a8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019ac:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	607b      	str	r3, [r7, #4]
  return(result);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f003 020f 	and.w	r2, r3, #15
 80019ce:	230f      	movs	r3, #15
 80019d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019f4:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e004      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	623b      	str	r3, [r7, #32]
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a18:	623b      	str	r3, [r7, #32]
      break;
 8001a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	372c      	adds	r7, #44	; 0x2c
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	007a1200 	.word	0x007a1200
 8001a34:	08003870 	.word	0x08003870
 8001a38:	08003880 	.word	0x08003880
 8001a3c:	003d0900 	.word	0x003d0900

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a5e:	f7ff ffef 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a62:	4601      	mov	r1, r0
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a70:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	603b      	str	r3, [r7, #0]
  return(result);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	080038a0 	.word	0x080038a0

08001a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001aa2:	f7ff ffcd 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ab0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ab4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	603b      	str	r3, [r7, #0]
  return(result);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	080038a0 	.word	0x080038a0

08001ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e01d      	b.n	8001b2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f001 f924 	bl	8002d54 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f000 fa4e 	bl	8001fc0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0202 	mvn.w	r2, #2
 8001b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f9e7 	bl	8001f82 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f9d9 	bl	8001f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f9ea 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0204 	mvn.w	r2, #4
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f9bd 	bl	8001f82 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f9af 	bl	8001f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f9c0 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0208 	mvn.w	r2, #8
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f993 	bl	8001f82 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f985 	bl	8001f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f996 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0210 	mvn.w	r2, #16
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f969 	bl	8001f82 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f95b 	bl	8001f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f96c 	bl	8001f96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0201 	mvn.w	r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 ffae 	bl	8002c4c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	2b80      	cmp	r3, #128	; 0x80
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 face 	bl	80022b8 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2a:	d10e      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	d107      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fac1 	bl	80022cc <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d10e      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d107      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f91a 	bl	8001faa <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d10e      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0220 	mvn.w	r2, #32
 8001d9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa81 	bl	80022a4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_ConfigClockSource+0x1c>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0cf      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x1bc>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001de8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001df0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d07c      	beq.n	8001efc <HAL_TIM_ConfigClockSource+0x152>
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d80f      	bhi.n	8001e26 <HAL_TIM_ConfigClockSource+0x7c>
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	f000 808f 	beq.w	8001f2a <HAL_TIM_ConfigClockSource+0x180>
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d803      	bhi.n	8001e18 <HAL_TIM_ConfigClockSource+0x6e>
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8083 	beq.w	8001f1c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001e16:	e09d      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	f000 808d 	beq.w	8001f38 <HAL_TIM_ConfigClockSource+0x18e>
 8001e1e:	2b30      	cmp	r3, #48	; 0x30
 8001e20:	f000 8091 	beq.w	8001f46 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001e24:	e096      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001e26:	2b70      	cmp	r3, #112	; 0x70
 8001e28:	d018      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0xb2>
 8001e2a:	2b70      	cmp	r3, #112	; 0x70
 8001e2c:	d804      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x8e>
 8001e2e:	2b50      	cmp	r3, #80	; 0x50
 8001e30:	d044      	beq.n	8001ebc <HAL_TIM_ConfigClockSource+0x112>
 8001e32:	2b60      	cmp	r3, #96	; 0x60
 8001e34:	d052      	beq.n	8001edc <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001e36:	e08d      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_ConfigClockSource+0x9c>
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e42:	d028      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001e44:	e086      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	f023 0307 	bic.w	r3, r3, #7
 8001e58:	6093      	str	r3, [r2, #8]
    break;
 8001e5a:	e07b      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f000 f9a9 	bl	80021c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]
    break;
 8001e94:	e05e      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f000 f98c 	bl	80021c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb8:	609a      	str	r2, [r3, #8]
    break;
 8001eba:	e04b      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f000 f8f3 	bl	80020b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2150      	movs	r1, #80	; 0x50
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f954 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001eda:	e03b      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f000 f916 	bl	800211a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2160      	movs	r1, #96	; 0x60
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f944 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001efa:	e02b      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f000 f8d3 	bl	80020b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f934 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001f1a:	e01b      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f92d 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001f28:	e014      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2110      	movs	r1, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f926 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001f36:	e00d      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2120      	movs	r1, #32
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f91f 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001f44:	e006      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2130      	movs	r1, #48	; 0x30
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f918 	bl	8002182 <TIM_ITRx_SetConfig>
    break;
 8001f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <TIM_Base_SetConfig+0xe0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x2c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x2c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <TIM_Base_SetConfig+0xe4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <TIM_Base_SetConfig+0xe0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0x6e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0x6e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <TIM_Base_SetConfig+0xe4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0x6e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <TIM_Base_SetConfig+0xe8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0x6e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <TIM_Base_SetConfig+0xec>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0x6e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <TIM_Base_SetConfig+0xf0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <TIM_Base_SetConfig+0xe0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0xc4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <TIM_Base_SetConfig+0xe8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0xc4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <TIM_Base_SetConfig+0xec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0xc4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <TIM_Base_SetConfig+0xf0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800

080020b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0201 	bic.w	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f023 030a 	bic.w	r3, r3, #10
 80020f8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	621a      	str	r2, [r3, #32]
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b087      	sub	sp, #28
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f023 0210 	bic.w	r2, r3, #16
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800214c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	031b      	lsls	r3, r3, #12
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800215e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	f043 0307 	orr.w	r3, r3, #7
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	609a      	str	r2, [r3, #8]
} 
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800221c:	2302      	movs	r3, #2
 800221e:	e038      	b.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002248:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4313      	orrs	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
} 
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40012c00 	.word	0x40012c00

080022a4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e043      	b.n	800237a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fd4a 	bl	8002da0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2224      	movs	r2, #36	; 0x24
 8002310:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8b9 	bl	800249c <UART_SetConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e022      	b.n	800237a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fa13 	bl	8002768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa9a 	bl	80028ac <UART_CheckIdleState>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b088      	sub	sp, #32
 8002386:	af02      	add	r7, sp, #8
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d177      	bne.n	8002492 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_UART_Transmit+0x2c>
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e070      	b.n	8002494 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_UART_Transmit+0x3e>
 80023bc:	2302      	movs	r3, #2
 80023be:	e069      	b.n	8002494 <HAL_UART_Transmit+0x112>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2221      	movs	r2, #33	; 0x21
 80023d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80023d6:	f7fd ffa5 	bl	8000324 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80023ec:	e034      	b.n	8002458 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2200      	movs	r2, #0
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fa97 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e03c      	b.n	8002494 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002422:	d111      	bne.n	8002448 <HAL_UART_Transmit+0xc6>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243c:	b292      	uxth	r2, r2
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3302      	adds	r3, #2
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	e007      	b.n	8002458 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b292      	uxth	r2, r2
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1c4      	bne.n	80023ee <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fa65 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e00a      	b.n	8002494 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80024a8:	2310      	movs	r3, #16
 80024aa:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <UART_SetConfig+0x2b8>)
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a8e      	ldr	r2, [pc, #568]	; (8002758 <UART_SetConfig+0x2bc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d121      	bne.n	8002568 <UART_SetConfig+0xcc>
 8002524:	4b8d      	ldr	r3, [pc, #564]	; (800275c <UART_SetConfig+0x2c0>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b03      	cmp	r3, #3
 800252e:	d817      	bhi.n	8002560 <UART_SetConfig+0xc4>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <UART_SetConfig+0x9c>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	08002555 	.word	0x08002555
 8002540:	0800255b 	.word	0x0800255b
 8002544:	0800254f 	.word	0x0800254f
 8002548:	2300      	movs	r3, #0
 800254a:	75fb      	strb	r3, [r7, #23]
 800254c:	e01e      	b.n	800258c <UART_SetConfig+0xf0>
 800254e:	2302      	movs	r3, #2
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	e01b      	b.n	800258c <UART_SetConfig+0xf0>
 8002554:	2304      	movs	r3, #4
 8002556:	75fb      	strb	r3, [r7, #23]
 8002558:	e018      	b.n	800258c <UART_SetConfig+0xf0>
 800255a:	2308      	movs	r3, #8
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e015      	b.n	800258c <UART_SetConfig+0xf0>
 8002560:	2310      	movs	r3, #16
 8002562:	75fb      	strb	r3, [r7, #23]
 8002564:	bf00      	nop
 8002566:	e011      	b.n	800258c <UART_SetConfig+0xf0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <UART_SetConfig+0x2c4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d102      	bne.n	8002578 <UART_SetConfig+0xdc>
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
 8002576:	e009      	b.n	800258c <UART_SetConfig+0xf0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a79      	ldr	r2, [pc, #484]	; (8002764 <UART_SetConfig+0x2c8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d102      	bne.n	8002588 <UART_SetConfig+0xec>
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
 8002586:	e001      	b.n	800258c <UART_SetConfig+0xf0>
 8002588:	2310      	movs	r3, #16
 800258a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002594:	d16f      	bne.n	8002676 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d857      	bhi.n	800264c <UART_SetConfig+0x1b0>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <UART_SetConfig+0x108>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025c9 	.word	0x080025c9
 80025a8:	080025e5 	.word	0x080025e5
 80025ac:	08002601 	.word	0x08002601
 80025b0:	0800264d 	.word	0x0800264d
 80025b4:	0800261b 	.word	0x0800261b
 80025b8:	0800264d 	.word	0x0800264d
 80025bc:	0800264d 	.word	0x0800264d
 80025c0:	0800264d 	.word	0x0800264d
 80025c4:	08002637 	.word	0x08002637
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025c8:	f7ff fa46 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 80025cc:	4603      	mov	r3, r0
 80025ce:	005a      	lsls	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	441a      	add	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	82bb      	strh	r3, [r7, #20]
        break;
 80025e2:	e036      	b.n	8002652 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025e4:	f7ff fa5a 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 80025e8:	4603      	mov	r3, r0
 80025ea:	005a      	lsls	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	82bb      	strh	r3, [r7, #20]
        break;
 80025fe:	e028      	b.n	8002652 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800260a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6852      	ldr	r2, [r2, #4]
 8002612:	fbb3 f3f2 	udiv	r3, r3, r2
 8002616:	82bb      	strh	r3, [r7, #20]
        break;
 8002618:	e01b      	b.n	8002652 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800261a:	f7ff f9a7 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800261e:	4603      	mov	r3, r0
 8002620:	005a      	lsls	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	82bb      	strh	r3, [r7, #20]
        break;
 8002634:	e00d      	b.n	8002652 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	82bb      	strh	r3, [r7, #20]
        break;
 800264a:	e002      	b.n	8002652 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	74fb      	strb	r3, [r7, #19]
        break;
 8002650:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002652:	8abb      	ldrh	r3, [r7, #20]
 8002654:	f023 030f 	bic.w	r3, r3, #15
 8002658:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800265a:	8abb      	ldrh	r3, [r7, #20]
 800265c:	105b      	asrs	r3, r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b29a      	uxth	r2, r3
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	4313      	orrs	r3, r2
 800266a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	897a      	ldrh	r2, [r7, #10]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	e069      	b.n	800274a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d863      	bhi.n	8002744 <UART_SetConfig+0x2a8>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <UART_SetConfig+0x1e8>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026c9 	.word	0x080026c9
 800268c:	080026e9 	.word	0x080026e9
 8002690:	08002745 	.word	0x08002745
 8002694:	08002709 	.word	0x08002709
 8002698:	08002745 	.word	0x08002745
 800269c:	08002745 	.word	0x08002745
 80026a0:	08002745 	.word	0x08002745
 80026a4:	08002729 	.word	0x08002729
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026a8:	f7ff f9d6 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
        break;
 80026c6:	e040      	b.n	800274a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026c8:	f7ff f9e8 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60da      	str	r2, [r3, #12]
        break;
 80026e6:	e030      	b.n	800274a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80026f2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6852      	ldr	r2, [r2, #4]
 80026fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
        break;
 8002706:	e020      	b.n	800274a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002708:	f7ff f930 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
        break;
 8002726:	e010      	b.n	800274a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
        break;
 8002742:	e002      	b.n	800274a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	74fb      	strb	r3, [r7, #19]
        break;
 8002748:	bf00      	nop
    }
  }

  return ret;
 800274a:	7cfb      	ldrb	r3, [r7, #19]

}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	efff69f3 	.word	0xefff69f3
 8002758:	40013800 	.word	0x40013800
 800275c:	40021000 	.word	0x40021000
 8002760:	40004400 	.word	0x40004400
 8002764:	40004800 	.word	0x40004800

08002768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01a      	beq.n	800287e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d10a      	bne.n	800287e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028be:	f7fd fd31 	bl	8000324 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d10e      	bne.n	80028f0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f82c 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e022      	b.n	8002936 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d10e      	bne.n	800291c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f816 	bl	800293e <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e00c      	b.n	8002936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294e:	e02c      	b.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d028      	beq.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <UART_WaitOnFlagUntilTimeout+0x30>
 800295e:	f7fd fce1 	bl	8000324 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	429a      	cmp	r2, r3
 800296c:	d21d      	bcs.n	80029aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e00f      	b.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4013      	ands	r3, r2
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d0c3      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d8:	f7fd fc4a 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029dc:	f000 f80c 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e0:	f000 f8cc 	bl	8002b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029e4:	f000 f89a 	bl	8002b1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80029e8:	f000 f848 	bl	8002a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80029ec:	4801      	ldr	r0, [pc, #4]	; (80029f4 <main+0x20>)
 80029ee:	f7ff f8a2 	bl	8001b36 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <main+0x1e>
 80029f4:	200000a8 	.word	0x200000a8

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b090      	sub	sp, #64	; 0x40
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0318 	add.w	r3, r7, #24
 8002a02:	2228      	movs	r2, #40	; 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fb0e 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a22:	2310      	movs	r3, #16
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a26:	2302      	movs	r3, #2
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002a2e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd ff2d 	bl	8000898 <HAL_RCC_OscConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002a44:	f000 f95a 	bl	8002cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a48:	230f      	movs	r3, #15
 8002a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fe06 	bl	8001674 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002a6e:	f000 f945 	bl	8002cfc <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3740      	adds	r7, #64	; 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <MX_TIM3_Init+0x9c>)
 8002a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002aa2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ac2:	4814      	ldr	r0, [pc, #80]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002ac4:	f7ff f80c 	bl	8001ae0 <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002ace:	f000 f915 	bl	8002cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4619      	mov	r1, r3
 8002ade:	480d      	ldr	r0, [pc, #52]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002ae0:	f7ff f963 	bl	8001daa <HAL_TIM_ConfigClockSource>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002aea:	f000 f907 	bl	8002cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4806      	ldr	r0, [pc, #24]	; (8002b14 <MX_TIM3_Init+0x98>)
 8002afc:	f7ff fb84 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002b06:	f000 f8f9 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200000a8 	.word	0x200000a8
 8002b18:	40000400 	.word	0x40000400

08002b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <MX_USART2_UART_Init+0x5c>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b60:	f7ff fbbe 	bl	80022e0 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b6a:	f000 f8c7 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000014c 	.word	0x2000014c
 8002b78:	40004400 	.word	0x40004400

08002b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b9c:	6153      	str	r3, [r2, #20]
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb4:	6153      	str	r3, [r2, #20]
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	6153      	str	r3, [r2, #20]
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6153      	str	r3, [r2, #20]
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_GPIO_Init+0xc4>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfa:	f7fd fe23 	bl	8000844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_GPIO_Init+0xc8>)
 8002c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	480d      	ldr	r0, [pc, #52]	; (8002c48 <MX_GPIO_Init+0xcc>)
 8002c14:	f7fd fca0 	bl	8000558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c32:	f7fd fc91 	bl	8000558 <HAL_GPIO_Init>

}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	10210000 	.word	0x10210000
 8002c48:	48000800 	.word	0x48000800

08002c4c <HAL_TIM_PeriodElapsedCallback>:
	int hora = 0;
	int minuto = 0;
	int segundo = 0;
	char Buffer[100];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]

	if (segundo == 60){
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b3c      	cmp	r3, #60	; 0x3c
 8002c5a:	d123      	bne.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x58>
		minuto++;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c64:	6013      	str	r3, [r2, #0]
		segundo = 0;
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
		if (minuto == 60){
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b3c      	cmp	r3, #60	; 0x3c
 8002c72:	d117      	bne.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x58>
			hora++;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c7c:	6013      	str	r3, [r2, #0]
			segundo = 0;
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
			minuto = 0;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
			if(hora == 24){
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b18      	cmp	r3, #24
 8002c90:	d108      	bne.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x58>
				hora = 0;
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
				minuto = 0;
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
				segundo = 0;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
			}
		}
	}

	segundo++;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002cac:	6013      	str	r3, [r2, #0]

	sprintf(Buffer,"Relogio: %d:%d:%d\r\n",hora,minuto,segundo);
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002cc2:	f000 f9b9 	bl	8003038 <siprintf>

    HAL_UART_Transmit(&huart2,(char*)Buffer, 50, 100);
 8002cc6:	2364      	movs	r3, #100	; 0x64
 8002cc8:	2232      	movs	r2, #50	; 0x32
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002cce:	f7ff fb58 	bl	8002382 <HAL_UART_Transmit>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f7fd fdcc 	bl	8000874 <HAL_GPIO_TogglePin>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000094 	.word	0x20000094
 8002ce8:	20000090 	.word	0x20000090
 8002cec:	2000008c 	.word	0x2000008c
 8002cf0:	0800385c 	.word	0x0800385c
 8002cf4:	200000e8 	.word	0x200000e8
 8002cf8:	2000014c 	.word	0x2000014c

08002cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_MspInit+0x44>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_MspInit+0x44>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6193      	str	r3, [r2, #24]
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_MspInit+0x44>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_MspInit+0x44>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <HAL_MspInit+0x44>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_MspInit+0x44>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d42:	2007      	movs	r0, #7
 8002d44:	f7fd fbc6 	bl	80004d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000

08002d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_TIM_Base_MspInit+0x44>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d113      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_TIM_Base_MspInit+0x48>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_TIM_Base_MspInit+0x48>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_TIM_Base_MspInit+0x48>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	201d      	movs	r0, #29
 8002d84:	f7fd fbb1 	bl	80004ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d88:	201d      	movs	r0, #29
 8002d8a:	f7fd fbca 	bl	8000522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_UART_MspInit+0x7c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d128      	bne.n	8002e14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de4:	6153      	str	r3, [r2, #20]
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_UART_MspInit+0x80>)
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002df2:	230c      	movs	r3, #12
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e02:	2307      	movs	r3, #7
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e10:	f7fd fba2 	bl	8000558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40021000 	.word	0x40021000

08002e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <HardFault_Handler+0x4>

08002e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <MemManage_Handler+0x4>

08002e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e42:	e7fe      	b.n	8002e42 <BusFault_Handler+0x4>

08002e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <UsageFault_Handler+0x4>

08002e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e78:	f7fd fa40 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM3_IRQHandler+0x10>)
 8002e86:	f7fe fe71 	bl	8001b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200000a8 	.word	0x200000a8

08002e94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <_sbrk+0x50>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x16>
		heap_end = &end;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <_sbrk+0x50>)
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <_sbrk+0x54>)
 8002ea8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <_sbrk+0x50>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <_sbrk+0x50>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	466a      	mov	r2, sp
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d907      	bls.n	8002ece <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ebe:	f000 f889 	bl	8002fd4 <__errno>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e006      	b.n	8002edc <_sbrk+0x48>
	}

	heap_end += incr;
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <_sbrk+0x50>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <_sbrk+0x50>)
 8002ed8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000098 	.word	0x20000098
 8002ee8:	200001c0 	.word	0x200001c0

08002eec <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <SystemInit+0x84>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <SystemInit+0x84>)
 8002ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <SystemInit+0x88>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <SystemInit+0x88>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <SystemInit+0x88>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4918      	ldr	r1, [pc, #96]	; (8002f74 <SystemInit+0x88>)
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <SystemInit+0x8c>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <SystemInit+0x88>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <SystemInit+0x88>)
 8002f1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <SystemInit+0x88>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <SystemInit+0x88>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <SystemInit+0x88>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <SystemInit+0x88>)
 8002f3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f3e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <SystemInit+0x88>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <SystemInit+0x88>)
 8002f46:	f023 030f 	bic.w	r3, r3, #15
 8002f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <SystemInit+0x88>)
 8002f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f50:	4908      	ldr	r1, [pc, #32]	; (8002f74 <SystemInit+0x88>)
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <SystemInit+0x90>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <SystemInit+0x88>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SystemInit+0x84>)
 8002f60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f64:	609a      	str	r2, [r3, #8]
#endif
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	f87fc00c 	.word	0xf87fc00c
 8002f7c:	ff00fccc 	.word	0xff00fccc

08002f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f86:	e003      	b.n	8002f90 <LoopCopyDataInit>

08002f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f8e:	3104      	adds	r1, #4

08002f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f90:	480b      	ldr	r0, [pc, #44]	; (8002fc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f98:	d3f6      	bcc.n	8002f88 <CopyDataInit>
	ldr	r2, =_sbss
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f9c:	e002      	b.n	8002fa4 <LoopFillZerobss>

08002f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fa0:	f842 3b04 	str.w	r3, [r2], #4

08002fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <LoopForever+0x16>)
	cmp	r2, r3
 8002fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fa8:	d3f9      	bcc.n	8002f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002faa:	f7ff ff9f 	bl	8002eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fae:	f000 f817 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fb2:	f7ff fd0f 	bl	80029d4 <main>

08002fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fb6:	e7fe      	b.n	8002fb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fb8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002fbc:	080038e4 	.word	0x080038e4
	ldr	r0, =_sdata
 8002fc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fc4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002fc8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002fcc:	200001c0 	.word	0x200001c0

08002fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd0:	e7fe      	b.n	8002fd0 <ADC1_2_IRQHandler>
	...

08002fd4 <__errno>:
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <__errno+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4e0d      	ldr	r6, [pc, #52]	; (8003018 <__libc_init_array+0x38>)
 8002fe4:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe6:	1ba4      	subs	r4, r4, r6
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	2500      	movs	r5, #0
 8002fec:	42a5      	cmp	r5, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	4e0b      	ldr	r6, [pc, #44]	; (8003020 <__libc_init_array+0x40>)
 8002ff2:	4c0c      	ldr	r4, [pc, #48]	; (8003024 <__libc_init_array+0x44>)
 8002ff4:	f000 fc26 	bl	8003844 <_init>
 8002ff8:	1ba4      	subs	r4, r4, r6
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	2500      	movs	r5, #0
 8002ffe:	42a5      	cmp	r5, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003008:	4798      	blx	r3
 800300a:	3501      	adds	r5, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003012:	4798      	blx	r3
 8003014:	3501      	adds	r5, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	080038dc 	.word	0x080038dc
 800301c:	080038dc 	.word	0x080038dc
 8003020:	080038dc 	.word	0x080038dc
 8003024:	080038e0 	.word	0x080038e0

08003028 <memset>:
 8003028:	4402      	add	r2, r0
 800302a:	4603      	mov	r3, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <siprintf>:
 8003038:	b40e      	push	{r1, r2, r3}
 800303a:	b500      	push	{lr}
 800303c:	b09c      	sub	sp, #112	; 0x70
 800303e:	ab1d      	add	r3, sp, #116	; 0x74
 8003040:	9002      	str	r0, [sp, #8]
 8003042:	9006      	str	r0, [sp, #24]
 8003044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <siprintf+0x38>)
 800304a:	9107      	str	r1, [sp, #28]
 800304c:	9104      	str	r1, [sp, #16]
 800304e:	4909      	ldr	r1, [pc, #36]	; (8003074 <siprintf+0x3c>)
 8003050:	f853 2b04 	ldr.w	r2, [r3], #4
 8003054:	9105      	str	r1, [sp, #20]
 8003056:	6800      	ldr	r0, [r0, #0]
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	a902      	add	r1, sp, #8
 800305c:	f000 f866 	bl	800312c <_svfiprintf_r>
 8003060:	9b02      	ldr	r3, [sp, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	b01c      	add	sp, #112	; 0x70
 8003068:	f85d eb04 	ldr.w	lr, [sp], #4
 800306c:	b003      	add	sp, #12
 800306e:	4770      	bx	lr
 8003070:	2000000c 	.word	0x2000000c
 8003074:	ffff0208 	.word	0xffff0208

08003078 <__ssputs_r>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	688e      	ldr	r6, [r1, #8]
 800307e:	429e      	cmp	r6, r3
 8003080:	4682      	mov	sl, r0
 8003082:	460c      	mov	r4, r1
 8003084:	4690      	mov	r8, r2
 8003086:	4699      	mov	r9, r3
 8003088:	d837      	bhi.n	80030fa <__ssputs_r+0x82>
 800308a:	898a      	ldrh	r2, [r1, #12]
 800308c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003090:	d031      	beq.n	80030f6 <__ssputs_r+0x7e>
 8003092:	6825      	ldr	r5, [r4, #0]
 8003094:	6909      	ldr	r1, [r1, #16]
 8003096:	1a6f      	subs	r7, r5, r1
 8003098:	6965      	ldr	r5, [r4, #20]
 800309a:	2302      	movs	r3, #2
 800309c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80030a4:	f109 0301 	add.w	r3, r9, #1
 80030a8:	443b      	add	r3, r7
 80030aa:	429d      	cmp	r5, r3
 80030ac:	bf38      	it	cc
 80030ae:	461d      	movcc	r5, r3
 80030b0:	0553      	lsls	r3, r2, #21
 80030b2:	d530      	bpl.n	8003116 <__ssputs_r+0x9e>
 80030b4:	4629      	mov	r1, r5
 80030b6:	f000 fb2b 	bl	8003710 <_malloc_r>
 80030ba:	4606      	mov	r6, r0
 80030bc:	b950      	cbnz	r0, 80030d4 <__ssputs_r+0x5c>
 80030be:	230c      	movs	r3, #12
 80030c0:	f8ca 3000 	str.w	r3, [sl]
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ca:	81a3      	strh	r3, [r4, #12]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d4:	463a      	mov	r2, r7
 80030d6:	6921      	ldr	r1, [r4, #16]
 80030d8:	f000 faa8 	bl	800362c <memcpy>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	81a3      	strh	r3, [r4, #12]
 80030e8:	6126      	str	r6, [r4, #16]
 80030ea:	6165      	str	r5, [r4, #20]
 80030ec:	443e      	add	r6, r7
 80030ee:	1bed      	subs	r5, r5, r7
 80030f0:	6026      	str	r6, [r4, #0]
 80030f2:	60a5      	str	r5, [r4, #8]
 80030f4:	464e      	mov	r6, r9
 80030f6:	454e      	cmp	r6, r9
 80030f8:	d900      	bls.n	80030fc <__ssputs_r+0x84>
 80030fa:	464e      	mov	r6, r9
 80030fc:	4632      	mov	r2, r6
 80030fe:	4641      	mov	r1, r8
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	f000 fa9e 	bl	8003642 <memmove>
 8003106:	68a3      	ldr	r3, [r4, #8]
 8003108:	1b9b      	subs	r3, r3, r6
 800310a:	60a3      	str	r3, [r4, #8]
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	441e      	add	r6, r3
 8003110:	6026      	str	r6, [r4, #0]
 8003112:	2000      	movs	r0, #0
 8003114:	e7dc      	b.n	80030d0 <__ssputs_r+0x58>
 8003116:	462a      	mov	r2, r5
 8003118:	f000 fb54 	bl	80037c4 <_realloc_r>
 800311c:	4606      	mov	r6, r0
 800311e:	2800      	cmp	r0, #0
 8003120:	d1e2      	bne.n	80030e8 <__ssputs_r+0x70>
 8003122:	6921      	ldr	r1, [r4, #16]
 8003124:	4650      	mov	r0, sl
 8003126:	f000 faa5 	bl	8003674 <_free_r>
 800312a:	e7c8      	b.n	80030be <__ssputs_r+0x46>

0800312c <_svfiprintf_r>:
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	461d      	mov	r5, r3
 8003132:	898b      	ldrh	r3, [r1, #12]
 8003134:	061f      	lsls	r7, r3, #24
 8003136:	b09d      	sub	sp, #116	; 0x74
 8003138:	4680      	mov	r8, r0
 800313a:	460c      	mov	r4, r1
 800313c:	4616      	mov	r6, r2
 800313e:	d50f      	bpl.n	8003160 <_svfiprintf_r+0x34>
 8003140:	690b      	ldr	r3, [r1, #16]
 8003142:	b96b      	cbnz	r3, 8003160 <_svfiprintf_r+0x34>
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	f000 fae3 	bl	8003710 <_malloc_r>
 800314a:	6020      	str	r0, [r4, #0]
 800314c:	6120      	str	r0, [r4, #16]
 800314e:	b928      	cbnz	r0, 800315c <_svfiprintf_r+0x30>
 8003150:	230c      	movs	r3, #12
 8003152:	f8c8 3000 	str.w	r3, [r8]
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	e0c8      	b.n	80032ee <_svfiprintf_r+0x1c2>
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	6163      	str	r3, [r4, #20]
 8003160:	2300      	movs	r3, #0
 8003162:	9309      	str	r3, [sp, #36]	; 0x24
 8003164:	2320      	movs	r3, #32
 8003166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800316a:	2330      	movs	r3, #48	; 0x30
 800316c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003170:	9503      	str	r5, [sp, #12]
 8003172:	f04f 0b01 	mov.w	fp, #1
 8003176:	4637      	mov	r7, r6
 8003178:	463d      	mov	r5, r7
 800317a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800317e:	b10b      	cbz	r3, 8003184 <_svfiprintf_r+0x58>
 8003180:	2b25      	cmp	r3, #37	; 0x25
 8003182:	d13e      	bne.n	8003202 <_svfiprintf_r+0xd6>
 8003184:	ebb7 0a06 	subs.w	sl, r7, r6
 8003188:	d00b      	beq.n	80031a2 <_svfiprintf_r+0x76>
 800318a:	4653      	mov	r3, sl
 800318c:	4632      	mov	r2, r6
 800318e:	4621      	mov	r1, r4
 8003190:	4640      	mov	r0, r8
 8003192:	f7ff ff71 	bl	8003078 <__ssputs_r>
 8003196:	3001      	adds	r0, #1
 8003198:	f000 80a4 	beq.w	80032e4 <_svfiprintf_r+0x1b8>
 800319c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800319e:	4453      	add	r3, sl
 80031a0:	9309      	str	r3, [sp, #36]	; 0x24
 80031a2:	783b      	ldrb	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 809d 	beq.w	80032e4 <_svfiprintf_r+0x1b8>
 80031aa:	2300      	movs	r3, #0
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031b4:	9304      	str	r3, [sp, #16]
 80031b6:	9307      	str	r3, [sp, #28]
 80031b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031bc:	931a      	str	r3, [sp, #104]	; 0x68
 80031be:	462f      	mov	r7, r5
 80031c0:	2205      	movs	r2, #5
 80031c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80031c6:	4850      	ldr	r0, [pc, #320]	; (8003308 <_svfiprintf_r+0x1dc>)
 80031c8:	f7fd f802 	bl	80001d0 <memchr>
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	b9d0      	cbnz	r0, 8003206 <_svfiprintf_r+0xda>
 80031d0:	06d9      	lsls	r1, r3, #27
 80031d2:	bf44      	itt	mi
 80031d4:	2220      	movmi	r2, #32
 80031d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031da:	071a      	lsls	r2, r3, #28
 80031dc:	bf44      	itt	mi
 80031de:	222b      	movmi	r2, #43	; 0x2b
 80031e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031e4:	782a      	ldrb	r2, [r5, #0]
 80031e6:	2a2a      	cmp	r2, #42	; 0x2a
 80031e8:	d015      	beq.n	8003216 <_svfiprintf_r+0xea>
 80031ea:	9a07      	ldr	r2, [sp, #28]
 80031ec:	462f      	mov	r7, r5
 80031ee:	2000      	movs	r0, #0
 80031f0:	250a      	movs	r5, #10
 80031f2:	4639      	mov	r1, r7
 80031f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031f8:	3b30      	subs	r3, #48	; 0x30
 80031fa:	2b09      	cmp	r3, #9
 80031fc:	d94d      	bls.n	800329a <_svfiprintf_r+0x16e>
 80031fe:	b1b8      	cbz	r0, 8003230 <_svfiprintf_r+0x104>
 8003200:	e00f      	b.n	8003222 <_svfiprintf_r+0xf6>
 8003202:	462f      	mov	r7, r5
 8003204:	e7b8      	b.n	8003178 <_svfiprintf_r+0x4c>
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <_svfiprintf_r+0x1dc>)
 8003208:	1a80      	subs	r0, r0, r2
 800320a:	fa0b f000 	lsl.w	r0, fp, r0
 800320e:	4318      	orrs	r0, r3
 8003210:	9004      	str	r0, [sp, #16]
 8003212:	463d      	mov	r5, r7
 8003214:	e7d3      	b.n	80031be <_svfiprintf_r+0x92>
 8003216:	9a03      	ldr	r2, [sp, #12]
 8003218:	1d11      	adds	r1, r2, #4
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	9103      	str	r1, [sp, #12]
 800321e:	2a00      	cmp	r2, #0
 8003220:	db01      	blt.n	8003226 <_svfiprintf_r+0xfa>
 8003222:	9207      	str	r2, [sp, #28]
 8003224:	e004      	b.n	8003230 <_svfiprintf_r+0x104>
 8003226:	4252      	negs	r2, r2
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	9207      	str	r2, [sp, #28]
 800322e:	9304      	str	r3, [sp, #16]
 8003230:	783b      	ldrb	r3, [r7, #0]
 8003232:	2b2e      	cmp	r3, #46	; 0x2e
 8003234:	d10c      	bne.n	8003250 <_svfiprintf_r+0x124>
 8003236:	787b      	ldrb	r3, [r7, #1]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d133      	bne.n	80032a4 <_svfiprintf_r+0x178>
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9203      	str	r2, [sp, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bfb8      	it	lt
 8003248:	f04f 33ff 	movlt.w	r3, #4294967295
 800324c:	3702      	adds	r7, #2
 800324e:	9305      	str	r3, [sp, #20]
 8003250:	4d2e      	ldr	r5, [pc, #184]	; (800330c <_svfiprintf_r+0x1e0>)
 8003252:	7839      	ldrb	r1, [r7, #0]
 8003254:	2203      	movs	r2, #3
 8003256:	4628      	mov	r0, r5
 8003258:	f7fc ffba 	bl	80001d0 <memchr>
 800325c:	b138      	cbz	r0, 800326e <_svfiprintf_r+0x142>
 800325e:	2340      	movs	r3, #64	; 0x40
 8003260:	1b40      	subs	r0, r0, r5
 8003262:	fa03 f000 	lsl.w	r0, r3, r0
 8003266:	9b04      	ldr	r3, [sp, #16]
 8003268:	4303      	orrs	r3, r0
 800326a:	3701      	adds	r7, #1
 800326c:	9304      	str	r3, [sp, #16]
 800326e:	7839      	ldrb	r1, [r7, #0]
 8003270:	4827      	ldr	r0, [pc, #156]	; (8003310 <_svfiprintf_r+0x1e4>)
 8003272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003276:	2206      	movs	r2, #6
 8003278:	1c7e      	adds	r6, r7, #1
 800327a:	f7fc ffa9 	bl	80001d0 <memchr>
 800327e:	2800      	cmp	r0, #0
 8003280:	d038      	beq.n	80032f4 <_svfiprintf_r+0x1c8>
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <_svfiprintf_r+0x1e8>)
 8003284:	bb13      	cbnz	r3, 80032cc <_svfiprintf_r+0x1a0>
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	3307      	adds	r3, #7
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	3308      	adds	r3, #8
 8003290:	9303      	str	r3, [sp, #12]
 8003292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003294:	444b      	add	r3, r9
 8003296:	9309      	str	r3, [sp, #36]	; 0x24
 8003298:	e76d      	b.n	8003176 <_svfiprintf_r+0x4a>
 800329a:	fb05 3202 	mla	r2, r5, r2, r3
 800329e:	2001      	movs	r0, #1
 80032a0:	460f      	mov	r7, r1
 80032a2:	e7a6      	b.n	80031f2 <_svfiprintf_r+0xc6>
 80032a4:	2300      	movs	r3, #0
 80032a6:	3701      	adds	r7, #1
 80032a8:	9305      	str	r3, [sp, #20]
 80032aa:	4619      	mov	r1, r3
 80032ac:	250a      	movs	r5, #10
 80032ae:	4638      	mov	r0, r7
 80032b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b4:	3a30      	subs	r2, #48	; 0x30
 80032b6:	2a09      	cmp	r2, #9
 80032b8:	d903      	bls.n	80032c2 <_svfiprintf_r+0x196>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c8      	beq.n	8003250 <_svfiprintf_r+0x124>
 80032be:	9105      	str	r1, [sp, #20]
 80032c0:	e7c6      	b.n	8003250 <_svfiprintf_r+0x124>
 80032c2:	fb05 2101 	mla	r1, r5, r1, r2
 80032c6:	2301      	movs	r3, #1
 80032c8:	4607      	mov	r7, r0
 80032ca:	e7f0      	b.n	80032ae <_svfiprintf_r+0x182>
 80032cc:	ab03      	add	r3, sp, #12
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4622      	mov	r2, r4
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <_svfiprintf_r+0x1ec>)
 80032d4:	a904      	add	r1, sp, #16
 80032d6:	4640      	mov	r0, r8
 80032d8:	f3af 8000 	nop.w
 80032dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032e0:	4681      	mov	r9, r0
 80032e2:	d1d6      	bne.n	8003292 <_svfiprintf_r+0x166>
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	065b      	lsls	r3, r3, #25
 80032e8:	f53f af35 	bmi.w	8003156 <_svfiprintf_r+0x2a>
 80032ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032ee:	b01d      	add	sp, #116	; 0x74
 80032f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	4622      	mov	r2, r4
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <_svfiprintf_r+0x1ec>)
 80032fc:	a904      	add	r1, sp, #16
 80032fe:	4640      	mov	r0, r8
 8003300:	f000 f882 	bl	8003408 <_printf_i>
 8003304:	e7ea      	b.n	80032dc <_svfiprintf_r+0x1b0>
 8003306:	bf00      	nop
 8003308:	080038a8 	.word	0x080038a8
 800330c:	080038ae 	.word	0x080038ae
 8003310:	080038b2 	.word	0x080038b2
 8003314:	00000000 	.word	0x00000000
 8003318:	08003079 	.word	0x08003079

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4691      	mov	r9, r2
 8003322:	461f      	mov	r7, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800332c:	4293      	cmp	r3, r2
 800332e:	bfb8      	it	lt
 8003330:	4613      	movlt	r3, r2
 8003332:	f8c9 3000 	str.w	r3, [r9]
 8003336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800333a:	4606      	mov	r6, r0
 800333c:	460c      	mov	r4, r1
 800333e:	b112      	cbz	r2, 8003346 <_printf_common+0x2a>
 8003340:	3301      	adds	r3, #1
 8003342:	f8c9 3000 	str.w	r3, [r9]
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	0699      	lsls	r1, r3, #26
 800334a:	bf42      	ittt	mi
 800334c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003350:	3302      	addmi	r3, #2
 8003352:	f8c9 3000 	strmi.w	r3, [r9]
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	f015 0506 	ands.w	r5, r5, #6
 800335c:	d107      	bne.n	800336e <_printf_common+0x52>
 800335e:	f104 0a19 	add.w	sl, r4, #25
 8003362:	68e3      	ldr	r3, [r4, #12]
 8003364:	f8d9 2000 	ldr.w	r2, [r9]
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	42ab      	cmp	r3, r5
 800336c:	dc28      	bgt.n	80033c0 <_printf_common+0xa4>
 800336e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	3300      	adds	r3, #0
 8003376:	bf18      	it	ne
 8003378:	2301      	movne	r3, #1
 800337a:	0692      	lsls	r2, r2, #26
 800337c:	d42d      	bmi.n	80033da <_printf_common+0xbe>
 800337e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003382:	4639      	mov	r1, r7
 8003384:	4630      	mov	r0, r6
 8003386:	47c0      	blx	r8
 8003388:	3001      	adds	r0, #1
 800338a:	d020      	beq.n	80033ce <_printf_common+0xb2>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	68e5      	ldr	r5, [r4, #12]
 8003390:	f8d9 2000 	ldr.w	r2, [r9]
 8003394:	f003 0306 	and.w	r3, r3, #6
 8003398:	2b04      	cmp	r3, #4
 800339a:	bf08      	it	eq
 800339c:	1aad      	subeq	r5, r5, r2
 800339e:	68a3      	ldr	r3, [r4, #8]
 80033a0:	6922      	ldr	r2, [r4, #16]
 80033a2:	bf0c      	ite	eq
 80033a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033a8:	2500      	movne	r5, #0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bfc4      	itt	gt
 80033ae:	1a9b      	subgt	r3, r3, r2
 80033b0:	18ed      	addgt	r5, r5, r3
 80033b2:	f04f 0900 	mov.w	r9, #0
 80033b6:	341a      	adds	r4, #26
 80033b8:	454d      	cmp	r5, r9
 80033ba:	d11a      	bne.n	80033f2 <_printf_common+0xd6>
 80033bc:	2000      	movs	r0, #0
 80033be:	e008      	b.n	80033d2 <_printf_common+0xb6>
 80033c0:	2301      	movs	r3, #1
 80033c2:	4652      	mov	r2, sl
 80033c4:	4639      	mov	r1, r7
 80033c6:	4630      	mov	r0, r6
 80033c8:	47c0      	blx	r8
 80033ca:	3001      	adds	r0, #1
 80033cc:	d103      	bne.n	80033d6 <_printf_common+0xba>
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295
 80033d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d6:	3501      	adds	r5, #1
 80033d8:	e7c3      	b.n	8003362 <_printf_common+0x46>
 80033da:	18e1      	adds	r1, r4, r3
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	2030      	movs	r0, #48	; 0x30
 80033e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033e4:	4422      	add	r2, r4
 80033e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ee:	3302      	adds	r3, #2
 80033f0:	e7c5      	b.n	800337e <_printf_common+0x62>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4622      	mov	r2, r4
 80033f6:	4639      	mov	r1, r7
 80033f8:	4630      	mov	r0, r6
 80033fa:	47c0      	blx	r8
 80033fc:	3001      	adds	r0, #1
 80033fe:	d0e6      	beq.n	80033ce <_printf_common+0xb2>
 8003400:	f109 0901 	add.w	r9, r9, #1
 8003404:	e7d8      	b.n	80033b8 <_printf_common+0x9c>
	...

08003408 <_printf_i>:
 8003408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800340c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003410:	460c      	mov	r4, r1
 8003412:	7e09      	ldrb	r1, [r1, #24]
 8003414:	b085      	sub	sp, #20
 8003416:	296e      	cmp	r1, #110	; 0x6e
 8003418:	4617      	mov	r7, r2
 800341a:	4606      	mov	r6, r0
 800341c:	4698      	mov	r8, r3
 800341e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003420:	f000 80b3 	beq.w	800358a <_printf_i+0x182>
 8003424:	d822      	bhi.n	800346c <_printf_i+0x64>
 8003426:	2963      	cmp	r1, #99	; 0x63
 8003428:	d036      	beq.n	8003498 <_printf_i+0x90>
 800342a:	d80a      	bhi.n	8003442 <_printf_i+0x3a>
 800342c:	2900      	cmp	r1, #0
 800342e:	f000 80b9 	beq.w	80035a4 <_printf_i+0x19c>
 8003432:	2958      	cmp	r1, #88	; 0x58
 8003434:	f000 8083 	beq.w	800353e <_printf_i+0x136>
 8003438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800343c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003440:	e032      	b.n	80034a8 <_printf_i+0xa0>
 8003442:	2964      	cmp	r1, #100	; 0x64
 8003444:	d001      	beq.n	800344a <_printf_i+0x42>
 8003446:	2969      	cmp	r1, #105	; 0x69
 8003448:	d1f6      	bne.n	8003438 <_printf_i+0x30>
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	0605      	lsls	r5, r0, #24
 8003450:	f103 0104 	add.w	r1, r3, #4
 8003454:	d52a      	bpl.n	80034ac <_printf_i+0xa4>
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	da03      	bge.n	8003466 <_printf_i+0x5e>
 800345e:	222d      	movs	r2, #45	; 0x2d
 8003460:	425b      	negs	r3, r3
 8003462:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003466:	486f      	ldr	r0, [pc, #444]	; (8003624 <_printf_i+0x21c>)
 8003468:	220a      	movs	r2, #10
 800346a:	e039      	b.n	80034e0 <_printf_i+0xd8>
 800346c:	2973      	cmp	r1, #115	; 0x73
 800346e:	f000 809d 	beq.w	80035ac <_printf_i+0x1a4>
 8003472:	d808      	bhi.n	8003486 <_printf_i+0x7e>
 8003474:	296f      	cmp	r1, #111	; 0x6f
 8003476:	d020      	beq.n	80034ba <_printf_i+0xb2>
 8003478:	2970      	cmp	r1, #112	; 0x70
 800347a:	d1dd      	bne.n	8003438 <_printf_i+0x30>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f043 0320 	orr.w	r3, r3, #32
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	e003      	b.n	800348e <_printf_i+0x86>
 8003486:	2975      	cmp	r1, #117	; 0x75
 8003488:	d017      	beq.n	80034ba <_printf_i+0xb2>
 800348a:	2978      	cmp	r1, #120	; 0x78
 800348c:	d1d4      	bne.n	8003438 <_printf_i+0x30>
 800348e:	2378      	movs	r3, #120	; 0x78
 8003490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003494:	4864      	ldr	r0, [pc, #400]	; (8003628 <_printf_i+0x220>)
 8003496:	e055      	b.n	8003544 <_printf_i+0x13c>
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	1d19      	adds	r1, r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6011      	str	r1, [r2, #0]
 80034a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a8:	2301      	movs	r3, #1
 80034aa:	e08c      	b.n	80035c6 <_printf_i+0x1be>
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6011      	str	r1, [r2, #0]
 80034b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034b4:	bf18      	it	ne
 80034b6:	b21b      	sxthne	r3, r3
 80034b8:	e7cf      	b.n	800345a <_printf_i+0x52>
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	6825      	ldr	r5, [r4, #0]
 80034be:	1d18      	adds	r0, r3, #4
 80034c0:	6010      	str	r0, [r2, #0]
 80034c2:	0628      	lsls	r0, r5, #24
 80034c4:	d501      	bpl.n	80034ca <_printf_i+0xc2>
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e002      	b.n	80034d0 <_printf_i+0xc8>
 80034ca:	0668      	lsls	r0, r5, #25
 80034cc:	d5fb      	bpl.n	80034c6 <_printf_i+0xbe>
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	4854      	ldr	r0, [pc, #336]	; (8003624 <_printf_i+0x21c>)
 80034d2:	296f      	cmp	r1, #111	; 0x6f
 80034d4:	bf14      	ite	ne
 80034d6:	220a      	movne	r2, #10
 80034d8:	2208      	moveq	r2, #8
 80034da:	2100      	movs	r1, #0
 80034dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034e0:	6865      	ldr	r5, [r4, #4]
 80034e2:	60a5      	str	r5, [r4, #8]
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	f2c0 8095 	blt.w	8003614 <_printf_i+0x20c>
 80034ea:	6821      	ldr	r1, [r4, #0]
 80034ec:	f021 0104 	bic.w	r1, r1, #4
 80034f0:	6021      	str	r1, [r4, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13d      	bne.n	8003572 <_printf_i+0x16a>
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	f040 808e 	bne.w	8003618 <_printf_i+0x210>
 80034fc:	4665      	mov	r5, ip
 80034fe:	2a08      	cmp	r2, #8
 8003500:	d10b      	bne.n	800351a <_printf_i+0x112>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	07db      	lsls	r3, r3, #31
 8003506:	d508      	bpl.n	800351a <_printf_i+0x112>
 8003508:	6923      	ldr	r3, [r4, #16]
 800350a:	6862      	ldr	r2, [r4, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	bfde      	ittt	le
 8003510:	2330      	movle	r3, #48	; 0x30
 8003512:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003516:	f105 35ff 	addle.w	r5, r5, #4294967295
 800351a:	ebac 0305 	sub.w	r3, ip, r5
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	f8cd 8000 	str.w	r8, [sp]
 8003524:	463b      	mov	r3, r7
 8003526:	aa03      	add	r2, sp, #12
 8003528:	4621      	mov	r1, r4
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff fef6 	bl	800331c <_printf_common>
 8003530:	3001      	adds	r0, #1
 8003532:	d14d      	bne.n	80035d0 <_printf_i+0x1c8>
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	b005      	add	sp, #20
 800353a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800353e:	4839      	ldr	r0, [pc, #228]	; (8003624 <_printf_i+0x21c>)
 8003540:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	6821      	ldr	r1, [r4, #0]
 8003548:	1d1d      	adds	r5, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6015      	str	r5, [r2, #0]
 800354e:	060a      	lsls	r2, r1, #24
 8003550:	d50b      	bpl.n	800356a <_printf_i+0x162>
 8003552:	07ca      	lsls	r2, r1, #31
 8003554:	bf44      	itt	mi
 8003556:	f041 0120 	orrmi.w	r1, r1, #32
 800355a:	6021      	strmi	r1, [r4, #0]
 800355c:	b91b      	cbnz	r3, 8003566 <_printf_i+0x15e>
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	f022 0220 	bic.w	r2, r2, #32
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	2210      	movs	r2, #16
 8003568:	e7b7      	b.n	80034da <_printf_i+0xd2>
 800356a:	064d      	lsls	r5, r1, #25
 800356c:	bf48      	it	mi
 800356e:	b29b      	uxthmi	r3, r3
 8003570:	e7ef      	b.n	8003552 <_printf_i+0x14a>
 8003572:	4665      	mov	r5, ip
 8003574:	fbb3 f1f2 	udiv	r1, r3, r2
 8003578:	fb02 3311 	mls	r3, r2, r1, r3
 800357c:	5cc3      	ldrb	r3, [r0, r3]
 800357e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003582:	460b      	mov	r3, r1
 8003584:	2900      	cmp	r1, #0
 8003586:	d1f5      	bne.n	8003574 <_printf_i+0x16c>
 8003588:	e7b9      	b.n	80034fe <_printf_i+0xf6>
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	6825      	ldr	r5, [r4, #0]
 800358e:	6961      	ldr	r1, [r4, #20]
 8003590:	1d18      	adds	r0, r3, #4
 8003592:	6010      	str	r0, [r2, #0]
 8003594:	0628      	lsls	r0, r5, #24
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	d501      	bpl.n	800359e <_printf_i+0x196>
 800359a:	6019      	str	r1, [r3, #0]
 800359c:	e002      	b.n	80035a4 <_printf_i+0x19c>
 800359e:	066a      	lsls	r2, r5, #25
 80035a0:	d5fb      	bpl.n	800359a <_printf_i+0x192>
 80035a2:	8019      	strh	r1, [r3, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	4665      	mov	r5, ip
 80035aa:	e7b9      	b.n	8003520 <_printf_i+0x118>
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	1d19      	adds	r1, r3, #4
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	681d      	ldr	r5, [r3, #0]
 80035b4:	6862      	ldr	r2, [r4, #4]
 80035b6:	2100      	movs	r1, #0
 80035b8:	4628      	mov	r0, r5
 80035ba:	f7fc fe09 	bl	80001d0 <memchr>
 80035be:	b108      	cbz	r0, 80035c4 <_printf_i+0x1bc>
 80035c0:	1b40      	subs	r0, r0, r5
 80035c2:	6060      	str	r0, [r4, #4]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	6123      	str	r3, [r4, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ce:	e7a7      	b.n	8003520 <_printf_i+0x118>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	462a      	mov	r2, r5
 80035d4:	4639      	mov	r1, r7
 80035d6:	4630      	mov	r0, r6
 80035d8:	47c0      	blx	r8
 80035da:	3001      	adds	r0, #1
 80035dc:	d0aa      	beq.n	8003534 <_printf_i+0x12c>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	079b      	lsls	r3, r3, #30
 80035e2:	d413      	bmi.n	800360c <_printf_i+0x204>
 80035e4:	68e0      	ldr	r0, [r4, #12]
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	4298      	cmp	r0, r3
 80035ea:	bfb8      	it	lt
 80035ec:	4618      	movlt	r0, r3
 80035ee:	e7a3      	b.n	8003538 <_printf_i+0x130>
 80035f0:	2301      	movs	r3, #1
 80035f2:	464a      	mov	r2, r9
 80035f4:	4639      	mov	r1, r7
 80035f6:	4630      	mov	r0, r6
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d09a      	beq.n	8003534 <_printf_i+0x12c>
 80035fe:	3501      	adds	r5, #1
 8003600:	68e3      	ldr	r3, [r4, #12]
 8003602:	9a03      	ldr	r2, [sp, #12]
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	42ab      	cmp	r3, r5
 8003608:	dcf2      	bgt.n	80035f0 <_printf_i+0x1e8>
 800360a:	e7eb      	b.n	80035e4 <_printf_i+0x1dc>
 800360c:	2500      	movs	r5, #0
 800360e:	f104 0919 	add.w	r9, r4, #25
 8003612:	e7f5      	b.n	8003600 <_printf_i+0x1f8>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ac      	bne.n	8003572 <_printf_i+0x16a>
 8003618:	7803      	ldrb	r3, [r0, #0]
 800361a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800361e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003622:	e76c      	b.n	80034fe <_printf_i+0xf6>
 8003624:	080038b9 	.word	0x080038b9
 8003628:	080038ca 	.word	0x080038ca

0800362c <memcpy>:
 800362c:	b510      	push	{r4, lr}
 800362e:	1e43      	subs	r3, r0, #1
 8003630:	440a      	add	r2, r1
 8003632:	4291      	cmp	r1, r2
 8003634:	d100      	bne.n	8003638 <memcpy+0xc>
 8003636:	bd10      	pop	{r4, pc}
 8003638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800363c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003640:	e7f7      	b.n	8003632 <memcpy+0x6>

08003642 <memmove>:
 8003642:	4288      	cmp	r0, r1
 8003644:	b510      	push	{r4, lr}
 8003646:	eb01 0302 	add.w	r3, r1, r2
 800364a:	d807      	bhi.n	800365c <memmove+0x1a>
 800364c:	1e42      	subs	r2, r0, #1
 800364e:	4299      	cmp	r1, r3
 8003650:	d00a      	beq.n	8003668 <memmove+0x26>
 8003652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003656:	f802 4f01 	strb.w	r4, [r2, #1]!
 800365a:	e7f8      	b.n	800364e <memmove+0xc>
 800365c:	4283      	cmp	r3, r0
 800365e:	d9f5      	bls.n	800364c <memmove+0xa>
 8003660:	1881      	adds	r1, r0, r2
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	42d3      	cmn	r3, r2
 8003666:	d100      	bne.n	800366a <memmove+0x28>
 8003668:	bd10      	pop	{r4, pc}
 800366a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800366e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003672:	e7f7      	b.n	8003664 <memmove+0x22>

08003674 <_free_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	2900      	cmp	r1, #0
 800367a:	d045      	beq.n	8003708 <_free_r+0x94>
 800367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003680:	1f0c      	subs	r4, r1, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	18e4      	addlt	r4, r4, r3
 8003688:	f000 f8d2 	bl	8003830 <__malloc_lock>
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <_free_r+0x98>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	4610      	mov	r0, r2
 8003692:	b933      	cbnz	r3, 80036a2 <_free_r+0x2e>
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6014      	str	r4, [r2, #0]
 8003698:	4628      	mov	r0, r5
 800369a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369e:	f000 b8c8 	b.w	8003832 <__malloc_unlock>
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	d90c      	bls.n	80036c0 <_free_r+0x4c>
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	1862      	adds	r2, r4, r1
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bf04      	itt	eq
 80036ae:	681a      	ldreq	r2, [r3, #0]
 80036b0:	685b      	ldreq	r3, [r3, #4]
 80036b2:	6063      	str	r3, [r4, #4]
 80036b4:	bf04      	itt	eq
 80036b6:	1852      	addeq	r2, r2, r1
 80036b8:	6022      	streq	r2, [r4, #0]
 80036ba:	6004      	str	r4, [r0, #0]
 80036bc:	e7ec      	b.n	8003698 <_free_r+0x24>
 80036be:	4613      	mov	r3, r2
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	b10a      	cbz	r2, 80036c8 <_free_r+0x54>
 80036c4:	42a2      	cmp	r2, r4
 80036c6:	d9fa      	bls.n	80036be <_free_r+0x4a>
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	1858      	adds	r0, r3, r1
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d10b      	bne.n	80036e8 <_free_r+0x74>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	4401      	add	r1, r0
 80036d4:	1858      	adds	r0, r3, r1
 80036d6:	4282      	cmp	r2, r0
 80036d8:	6019      	str	r1, [r3, #0]
 80036da:	d1dd      	bne.n	8003698 <_free_r+0x24>
 80036dc:	6810      	ldr	r0, [r2, #0]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	4401      	add	r1, r0
 80036e4:	6019      	str	r1, [r3, #0]
 80036e6:	e7d7      	b.n	8003698 <_free_r+0x24>
 80036e8:	d902      	bls.n	80036f0 <_free_r+0x7c>
 80036ea:	230c      	movs	r3, #12
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	e7d3      	b.n	8003698 <_free_r+0x24>
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	1821      	adds	r1, r4, r0
 80036f4:	428a      	cmp	r2, r1
 80036f6:	bf04      	itt	eq
 80036f8:	6811      	ldreq	r1, [r2, #0]
 80036fa:	6852      	ldreq	r2, [r2, #4]
 80036fc:	6062      	str	r2, [r4, #4]
 80036fe:	bf04      	itt	eq
 8003700:	1809      	addeq	r1, r1, r0
 8003702:	6021      	streq	r1, [r4, #0]
 8003704:	605c      	str	r4, [r3, #4]
 8003706:	e7c7      	b.n	8003698 <_free_r+0x24>
 8003708:	bd38      	pop	{r3, r4, r5, pc}
 800370a:	bf00      	nop
 800370c:	2000009c 	.word	0x2000009c

08003710 <_malloc_r>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	1ccd      	adds	r5, r1, #3
 8003714:	f025 0503 	bic.w	r5, r5, #3
 8003718:	3508      	adds	r5, #8
 800371a:	2d0c      	cmp	r5, #12
 800371c:	bf38      	it	cc
 800371e:	250c      	movcc	r5, #12
 8003720:	2d00      	cmp	r5, #0
 8003722:	4606      	mov	r6, r0
 8003724:	db01      	blt.n	800372a <_malloc_r+0x1a>
 8003726:	42a9      	cmp	r1, r5
 8003728:	d903      	bls.n	8003732 <_malloc_r+0x22>
 800372a:	230c      	movs	r3, #12
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	2000      	movs	r0, #0
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	f000 f87d 	bl	8003830 <__malloc_lock>
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <_malloc_r+0xac>)
 8003738:	6814      	ldr	r4, [r2, #0]
 800373a:	4621      	mov	r1, r4
 800373c:	b991      	cbnz	r1, 8003764 <_malloc_r+0x54>
 800373e:	4c20      	ldr	r4, [pc, #128]	; (80037c0 <_malloc_r+0xb0>)
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	b91b      	cbnz	r3, 800374c <_malloc_r+0x3c>
 8003744:	4630      	mov	r0, r6
 8003746:	f000 f863 	bl	8003810 <_sbrk_r>
 800374a:	6020      	str	r0, [r4, #0]
 800374c:	4629      	mov	r1, r5
 800374e:	4630      	mov	r0, r6
 8003750:	f000 f85e 	bl	8003810 <_sbrk_r>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d124      	bne.n	80037a2 <_malloc_r+0x92>
 8003758:	230c      	movs	r3, #12
 800375a:	6033      	str	r3, [r6, #0]
 800375c:	4630      	mov	r0, r6
 800375e:	f000 f868 	bl	8003832 <__malloc_unlock>
 8003762:	e7e4      	b.n	800372e <_malloc_r+0x1e>
 8003764:	680b      	ldr	r3, [r1, #0]
 8003766:	1b5b      	subs	r3, r3, r5
 8003768:	d418      	bmi.n	800379c <_malloc_r+0x8c>
 800376a:	2b0b      	cmp	r3, #11
 800376c:	d90f      	bls.n	800378e <_malloc_r+0x7e>
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	50cd      	str	r5, [r1, r3]
 8003772:	18cc      	adds	r4, r1, r3
 8003774:	4630      	mov	r0, r6
 8003776:	f000 f85c 	bl	8003832 <__malloc_unlock>
 800377a:	f104 000b 	add.w	r0, r4, #11
 800377e:	1d23      	adds	r3, r4, #4
 8003780:	f020 0007 	bic.w	r0, r0, #7
 8003784:	1ac3      	subs	r3, r0, r3
 8003786:	d0d3      	beq.n	8003730 <_malloc_r+0x20>
 8003788:	425a      	negs	r2, r3
 800378a:	50e2      	str	r2, [r4, r3]
 800378c:	e7d0      	b.n	8003730 <_malloc_r+0x20>
 800378e:	428c      	cmp	r4, r1
 8003790:	684b      	ldr	r3, [r1, #4]
 8003792:	bf16      	itet	ne
 8003794:	6063      	strne	r3, [r4, #4]
 8003796:	6013      	streq	r3, [r2, #0]
 8003798:	460c      	movne	r4, r1
 800379a:	e7eb      	b.n	8003774 <_malloc_r+0x64>
 800379c:	460c      	mov	r4, r1
 800379e:	6849      	ldr	r1, [r1, #4]
 80037a0:	e7cc      	b.n	800373c <_malloc_r+0x2c>
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	f024 0403 	bic.w	r4, r4, #3
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d005      	beq.n	80037b8 <_malloc_r+0xa8>
 80037ac:	1a21      	subs	r1, r4, r0
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 f82e 	bl	8003810 <_sbrk_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d0cf      	beq.n	8003758 <_malloc_r+0x48>
 80037b8:	6025      	str	r5, [r4, #0]
 80037ba:	e7db      	b.n	8003774 <_malloc_r+0x64>
 80037bc:	2000009c 	.word	0x2000009c
 80037c0:	200000a0 	.word	0x200000a0

080037c4 <_realloc_r>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	4607      	mov	r7, r0
 80037c8:	4614      	mov	r4, r2
 80037ca:	460e      	mov	r6, r1
 80037cc:	b921      	cbnz	r1, 80037d8 <_realloc_r+0x14>
 80037ce:	4611      	mov	r1, r2
 80037d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037d4:	f7ff bf9c 	b.w	8003710 <_malloc_r>
 80037d8:	b922      	cbnz	r2, 80037e4 <_realloc_r+0x20>
 80037da:	f7ff ff4b 	bl	8003674 <_free_r>
 80037de:	4625      	mov	r5, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	f000 f826 	bl	8003834 <_malloc_usable_size_r>
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	d20f      	bcs.n	800380c <_realloc_r+0x48>
 80037ec:	4621      	mov	r1, r4
 80037ee:	4638      	mov	r0, r7
 80037f0:	f7ff ff8e 	bl	8003710 <_malloc_r>
 80037f4:	4605      	mov	r5, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d0f2      	beq.n	80037e0 <_realloc_r+0x1c>
 80037fa:	4631      	mov	r1, r6
 80037fc:	4622      	mov	r2, r4
 80037fe:	f7ff ff15 	bl	800362c <memcpy>
 8003802:	4631      	mov	r1, r6
 8003804:	4638      	mov	r0, r7
 8003806:	f7ff ff35 	bl	8003674 <_free_r>
 800380a:	e7e9      	b.n	80037e0 <_realloc_r+0x1c>
 800380c:	4635      	mov	r5, r6
 800380e:	e7e7      	b.n	80037e0 <_realloc_r+0x1c>

08003810 <_sbrk_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4c06      	ldr	r4, [pc, #24]	; (800382c <_sbrk_r+0x1c>)
 8003814:	2300      	movs	r3, #0
 8003816:	4605      	mov	r5, r0
 8003818:	4608      	mov	r0, r1
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	f7ff fb3a 	bl	8002e94 <_sbrk>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	d102      	bne.n	800382a <_sbrk_r+0x1a>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	b103      	cbz	r3, 800382a <_sbrk_r+0x1a>
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	200001bc 	.word	0x200001bc

08003830 <__malloc_lock>:
 8003830:	4770      	bx	lr

08003832 <__malloc_unlock>:
 8003832:	4770      	bx	lr

08003834 <_malloc_usable_size_r>:
 8003834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003838:	1f18      	subs	r0, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfbc      	itt	lt
 800383e:	580b      	ldrlt	r3, [r1, r0]
 8003840:	18c0      	addlt	r0, r0, r3
 8003842:	4770      	bx	lr

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
