
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049c4  080049c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c4  080049c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08004a3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004a3c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013471  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002407  00000000  00000000  00033511  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  00036460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d2d6  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b340  00000000  00000000  00054186  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f015  00000000  00000000  0005f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe4db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003148  00000000  00000000  000fe558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800470c 	.word	0x0800470c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800470c 	.word	0x0800470c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f949 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f003 fb14 	bl	80038b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f961 	bl	8000582 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f929 	bl	800052e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000098 	.word	0x20000098

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <NVIC_GetPriorityGrouping+0x18>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	f003 0307 	and.w	r3, r3, #7
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 021f 	and.w	r2, r3, #31
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <NVIC_EnableIRQ+0x30>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	095b      	lsrs	r3, r3, #5
 80003fc:	2001      	movs	r0, #1
 80003fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100

08000418 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	da0b      	bge.n	8000444 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	490c      	ldr	r1, [pc, #48]	; (8000464 <NVIC_SetPriority+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	3b04      	subs	r3, #4
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	440b      	add	r3, r1
 8000440:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000442:	e009      	b.n	8000458 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4907      	ldr	r1, [pc, #28]	; (8000468 <NVIC_SetPriority+0x50>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000e100 	.word	0xe000e100

0800046c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	f1c3 0307 	rsb	r3, r3, #7
 8000486:	2b04      	cmp	r3, #4
 8000488:	bf28      	it	cs
 800048a:	2304      	movcs	r3, #4
 800048c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3304      	adds	r3, #4
 8000492:	2b06      	cmp	r3, #6
 8000494:	d902      	bls.n	800049c <NVIC_EncodePriority+0x30>
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3b03      	subs	r3, #3
 800049a:	e000      	b.n	800049e <NVIC_EncodePriority+0x32>
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	f04f 32ff 	mov.w	r2, #4294967295
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	401a      	ands	r2, r3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43d9      	mvns	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c4:	4313      	orrs	r3, r2
         );
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3b01      	subs	r3, #1
 80004e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004e4:	d301      	bcc.n	80004ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00f      	b.n	800050a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <SysTick_Config+0x40>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f2:	210f      	movs	r1, #15
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f7ff ff8e 	bl	8000418 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <SysTick_Config+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <SysTick_Config+0x40>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	e000e010 	.word	0xe000e010

08000518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ff2d 	bl	8000380 <NVIC_SetPriorityGrouping>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000540:	f7ff ff42 	bl	80003c8 <NVIC_GetPriorityGrouping>
 8000544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	6978      	ldr	r0, [r7, #20]
 800054c:	f7ff ff8e 	bl	800046c <NVIC_EncodePriority>
 8000550:	4602      	mov	r2, r0
 8000552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff5d 	bl	8000418 <NVIC_SetPriority>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff35 	bl	80003e4 <NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffa2 	bl	80004d4 <SysTick_Config>
 8000590:	4603      	mov	r3, r0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b2:	e14e      	b.n	8000852 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2101      	movs	r1, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8140 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d003      	beq.n	80005dc <HAL_GPIO_Init+0x40>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b12      	cmp	r3, #18
 80005da:	d123      	bne.n	8000624 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	08da      	lsrs	r2, r3, #3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3208      	adds	r2, #8
 80005e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	220f      	movs	r2, #15
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	08da      	lsrs	r2, r3, #3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3208      	adds	r2, #8
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 0203 	and.w	r2, r3, #3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066c:	2b11      	cmp	r3, #17
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b12      	cmp	r3, #18
 8000676:	d130      	bne.n	80006da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2203      	movs	r2, #3
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ae:	2201      	movs	r2, #1
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	091b      	lsrs	r3, r3, #4
 80006c4:	f003 0201 	and.w	r2, r3, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	2203      	movs	r2, #3
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 809a 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000730:	4a50      	ldr	r2, [pc, #320]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3302      	adds	r3, #2
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	220f      	movs	r2, #15
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800075a:	d013      	beq.n	8000784 <HAL_GPIO_Init+0x1e8>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <HAL_GPIO_Init+0x2dc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d00d      	beq.n	8000780 <HAL_GPIO_Init+0x1e4>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a45      	ldr	r2, [pc, #276]	; (800087c <HAL_GPIO_Init+0x2e0>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d007      	beq.n	800077c <HAL_GPIO_Init+0x1e0>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a44      	ldr	r2, [pc, #272]	; (8000880 <HAL_GPIO_Init+0x2e4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d101      	bne.n	8000778 <HAL_GPIO_Init+0x1dc>
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000778:	2305      	movs	r3, #5
 800077a:	e004      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 800077c:	2302      	movs	r3, #2
 800077e:	e002      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000784:	2300      	movs	r3, #0
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	f002 0203 	and.w	r2, r2, #3
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	4093      	lsls	r3, r2
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000796:	4937      	ldr	r1, [pc, #220]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3302      	adds	r3, #2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007c8:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4013      	ands	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	f47f aea9 	bne.w	80005b4 <HAL_GPIO_Init+0x18>
  }
}
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800
 8000880:	48000c00 	.word	0x48000c00
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4013      	ands	r3, r2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d006      	beq.n	80008dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 ff88 	bl	80037ec <HAL_GPIO_EXTI_Callback>
  }
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40010400 	.word	0x40010400

080008e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e081      	b.n	80009fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d106      	bne.n	8000914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f002 fff6 	bl	8003900 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2224      	movs	r2, #36	; 0x24
 8000918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f022 0201 	bic.w	r2, r2, #1
 800092a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d107      	bne.n	8000962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	e006      	b.n	8000970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800096e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d104      	bne.n	8000982 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68da      	ldr	r2, [r3, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	ea42 0103 	orr.w	r1, r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	021a      	lsls	r2, r3, #8
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69d9      	ldr	r1, [r3, #28]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1a      	ldr	r2, [r3, #32]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0201 	orr.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2220      	movs	r2, #32
 80009ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	461a      	mov	r2, r3
 8000a14:	460b      	mov	r3, r1
 8000a16:	817b      	strh	r3, [r7, #10]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	f040 80e4 	bne.w	8000bf6 <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <HAL_I2C_Master_Transmit+0x34>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e0dd      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000a44:	f7ff fc6e 	bl	8000324 <HAL_GetTick>
 8000a48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2319      	movs	r3, #25
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f000 f9fc 	bl	8000e54 <I2C_WaitOnFlagUntilTimeout>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e0c8      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2221      	movs	r2, #33	; 0x21
 8000a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2210      	movs	r2, #16
 8000a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	893a      	ldrh	r2, [r7, #8]
 8000a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d90e      	bls.n	8000ab6 <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	8979      	ldrh	r1, [r7, #10]
 8000aa6:	4b56      	ldr	r3, [pc, #344]	; (8000c00 <HAL_I2C_Master_Transmit+0x1f8>)
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 fb50 	bl	8001154 <I2C_TransferConfig>
 8000ab4:	e070      	b.n	8000b98 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	8979      	ldrh	r1, [r7, #10]
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <HAL_I2C_Master_Transmit+0x1f8>)
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 fb3f 	bl	8001154 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000ad6:	e05f      	b.n	8000b98 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	6a39      	ldr	r1, [r7, #32]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 f9f3 	bl	8000ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d101      	bne.n	8000af4 <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e081      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e07f      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	1c59      	adds	r1, r3, #1
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	6251      	str	r1, [r2, #36]	; 0x24
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d135      	bne.n	8000b98 <HAL_I2C_Master_Transmit+0x190>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d030      	beq.n	8000b98 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f987 	bl	8000e54 <I2C_WaitOnFlagUntilTimeout>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e053      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d90e      	bls.n	8000b78 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	8979      	ldrh	r1, [r7, #10]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 faef 	bl	8001154 <I2C_TransferConfig>
 8000b76:	e00f      	b.n	8000b98 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	8979      	ldrh	r1, [r7, #10]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fade 	bl	8001154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d19a      	bne.n	8000ad8 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	6a39      	ldr	r1, [r7, #32]
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f000 f9ce 	bl	8000f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d101      	bne.n	8000bbe <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e01c      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e01a      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6859      	ldr	r1, [r3, #4]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_I2C_Master_Transmit+0x1fc>)
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8000bf6:	2302      	movs	r3, #2
  }
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	80002000 	.word	0x80002000
 8000c04:	fe00e800 	.word	0xfe00e800

08000c08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	461a      	mov	r2, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	817b      	strh	r3, [r7, #10]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b20      	cmp	r3, #32
 8000c2a:	f040 80e5 	bne.w	8000df8 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <HAL_I2C_Master_Receive+0x34>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e0de      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c44:	f7ff fb6e 	bl	8000324 <HAL_GetTick>
 8000c48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2319      	movs	r3, #25
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f000 f8fc 	bl	8000e54 <I2C_WaitOnFlagUntilTimeout>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e0c9      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2222      	movs	r2, #34	; 0x22
 8000c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2210      	movs	r2, #16
 8000c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	893a      	ldrh	r2, [r7, #8]
 8000c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	2bff      	cmp	r3, #255	; 0xff
 8000c96:	d90e      	bls.n	8000cb6 <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	8979      	ldrh	r1, [r7, #10]
 8000ca6:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <HAL_I2C_Master_Receive+0x1fc>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f000 fa50 	bl	8001154 <I2C_TransferConfig>
 8000cb4:	e071      	b.n	8000d9a <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	8979      	ldrh	r1, [r7, #10]
 8000cc8:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <HAL_I2C_Master_Receive+0x1fc>)
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f000 fa3f 	bl	8001154 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000cd6:	e060      	b.n	8000d9a <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	6a39      	ldr	r1, [r7, #32]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 f96f 	bl	8000fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d101      	bne.n	8000cf4 <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e082      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e080      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	1c59      	adds	r1, r3, #1
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	6251      	str	r1, [r2, #36]	; 0x24
 8000d08:	b2c2      	uxtb	r2, r0
 8000d0a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d135      	bne.n	8000d9a <HAL_I2C_Master_Receive+0x192>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d030      	beq.n	8000d9a <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f886 	bl	8000e54 <I2C_WaitOnFlagUntilTimeout>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e053      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	2bff      	cmp	r3, #255	; 0xff
 8000d5a:	d90e      	bls.n	8000d7a <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	8979      	ldrh	r1, [r7, #10]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f000 f9ee 	bl	8001154 <I2C_TransferConfig>
 8000d78:	e00f      	b.n	8000d9a <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	8979      	ldrh	r1, [r7, #10]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 f9dd 	bl	8001154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d199      	bne.n	8000cd8 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	6a39      	ldr	r1, [r7, #32]
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 f8cd 	bl	8000f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d101      	bne.n	8000dc0 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e01c      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e01a      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2220      	movs	r2, #32
 8000dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6859      	ldr	r1, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_I2C_Master_Receive+0x200>)
 8000dd8:	400b      	ands	r3, r1
 8000dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2220      	movs	r2, #32
 8000de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e000      	b.n	8000dfa <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8000df8:	2302      	movs	r3, #2
  }
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	80002400 	.word	0x80002400
 8000e08:	fe00e800 	.word	0xfe00e800

08000e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d103      	bne.n	8000e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d007      	beq.n	8000e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	619a      	str	r2, [r3, #24]
  }
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e64:	e01c      	b.n	8000ea0 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d018      	beq.n	8000ea0 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000e74:	f7ff fa56 	bl	8000324 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d20d      	bcs.n	8000ea0 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2220      	movs	r2, #32
 8000e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e00f      	b.n	8000ec0 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	699a      	ldr	r2, [r3, #24]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d0d3      	beq.n	8000e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ed4:	e02c      	b.n	8000f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 f8dc 	bl	8001098 <I2C_IsAcknowledgeFailed>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e02a      	b.n	8000f40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d01e      	beq.n	8000f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000ef8:	f7ff fa14 	bl	8000324 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d213      	bcs.n	8000f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f043 0220 	orr.w	r2, r3, #32
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2220      	movs	r2, #32
 8000f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e007      	b.n	8000f40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d1cb      	bne.n	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f54:	e028      	b.n	8000fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f89c 	bl	8001098 <I2C_IsAcknowledgeFailed>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e026      	b.n	8000fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000f70:	f7ff f9d8 	bl	8000324 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d213      	bcs.n	8000fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e007      	b.n	8000fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d1cf      	bne.n	8000f56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000fcc:	e055      	b.n	800107a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f860 	bl	8001098 <I2C_IsAcknowledgeFailed>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e053      	b.n	800108a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0320 	and.w	r3, r3, #32
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d129      	bne.n	8001044 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d105      	bne.n	800100a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e03f      	b.n	800108a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2220      	movs	r2, #32
 8001010:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800101e:	400b      	ands	r3, r1
 8001020:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2220      	movs	r2, #32
 800102c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e022      	b.n	800108a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800104a:	f7ff f96b 	bl	8000324 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	429a      	cmp	r2, r3
 8001058:	d20f      	bcs.n	800107a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f043 0220 	orr.w	r2, r3, #32
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e007      	b.n	800108a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b04      	cmp	r3, #4
 8001086:	d1a2      	bne.n	8000fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	fe00e800 	.word	0xfe00e800

08001098 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d148      	bne.n	8001144 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010b2:	e01c      	b.n	80010ee <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ba:	d018      	beq.n	80010ee <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <I2C_IsAcknowledgeFailed+0x3a>
 80010c2:	f7ff f92f 	bl	8000324 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d20d      	bcs.n	80010ee <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2220      	movs	r2, #32
 80010d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e02b      	b.n	8001146 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d1db      	bne.n	80010b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2210      	movs	r2, #16
 8001102:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2220      	movs	r2, #32
 800110a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fe7d 	bl	8000e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <I2C_IsAcknowledgeFailed+0xb8>)
 800111e:	400b      	ands	r3, r1
 8001120:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2204      	movs	r2, #4
 8001126:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2220      	movs	r2, #32
 800112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	fe00e800 	.word	0xfe00e800

08001154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	817b      	strh	r3, [r7, #10]
 8001162:	4613      	mov	r3, r2
 8001164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <I2C_TransferConfig+0x58>)
 8001176:	430b      	orrs	r3, r1
 8001178:	43db      	mvns	r3, r3
 800117a:	ea02 0103 	and.w	r1, r2, r3
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	041b      	lsls	r3, r3, #16
 8001188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	431a      	orrs	r2, r3
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	03ff63ff 	.word	0x03ff63ff

080011b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d138      	bne.n	8001238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e032      	b.n	800123a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001238:	2302      	movs	r3, #2
  }
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b20      	cmp	r3, #32
 800125e:	d139      	bne.n	80012d4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800126a:	2302      	movs	r3, #2
 800126c:	e033      	b.n	80012d6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2224      	movs	r2, #36	; 0x24
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800129c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2220      	movs	r2, #32
 80012c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e000      	b.n	80012d6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80012d4:	2302      	movs	r3, #2
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f000 beda 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 816e 	beq.w	80015ea <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800130e:	4bb5      	ldr	r3, [pc, #724]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00c      	beq.n	8001334 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800131a:	4bb2      	ldr	r3, [pc, #712]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d15a      	bne.n	80013dc <HAL_RCC_OscConfig+0xf8>
 8001326:	4baf      	ldr	r3, [pc, #700]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001332:	d153      	bne.n	80013dc <HAL_RCC_OscConfig+0xf8>
 8001334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001338:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001348:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x82>
 8001360:	4ba0      	ldr	r3, [pc, #640]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0xae>
 8001366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800137a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001382:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800138e:	4b95      	ldr	r3, [pc, #596]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001396:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800139a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800139e:	fa92 f2a2 	rbit	r2, r2
 80013a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80013a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013aa:	fab2 f282 	clz	r2, r2
 80013ae:	b252      	sxtb	r2, r2
 80013b0:	f042 0220 	orr.w	r2, r2, #32
 80013b4:	b252      	sxtb	r2, r2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f002 021f 	and.w	r2, r2, #31
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 810f 	beq.w	80015e8 <HAL_RCC_OscConfig+0x304>
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 8109 	bne.w	80015e8 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f000 be6b 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x112>
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7d      	ldr	r2, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e030      	b.n	8001458 <HAL_RCC_OscConfig+0x174>
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10c      	bne.n	800141a <HAL_RCC_OscConfig+0x136>
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e01e      	b.n	8001458 <HAL_RCC_OscConfig+0x174>
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x15c>
 8001426:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6b      	ldr	r2, [pc, #428]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x174>
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a64      	ldr	r2, [pc, #400]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001458:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	f023 020f 	bic.w	r2, r3, #15
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	495f      	ldr	r1, [pc, #380]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 8001468:	4313      	orrs	r3, r2
 800146a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d05a      	beq.n	800152c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7fe ff55 	bl	8000324 <HAL_GetTick>
 800147a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7fe ff50 	bl	8000324 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d902      	bls.n	8001496 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	f000 be0e 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80014aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	095b      	lsrs	r3, r3, #5
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e4>
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	e015      	b.n	80014f4 <HAL_RCC_OscConfig+0x210>
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014e4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014f0:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80014fc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001500:	fa92 f2a2 	rbit	r2, r2
 8001504:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001508:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800150c:	fab2 f282 	clz	r2, r2
 8001510:	b252      	sxtb	r2, r2
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	b252      	sxtb	r2, r2
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	f002 021f 	and.w	r2, r2, #31
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0aa      	beq.n	8001480 <HAL_RCC_OscConfig+0x19c>
 800152a:	e05e      	b.n	80015ea <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7fe fefa 	bl	8000324 <HAL_GetTick>
 8001530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001536:	f7fe fef5 	bl	8000324 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d902      	bls.n	800154c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	f000 bdb3 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
 800154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001550:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001560:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0x29a>
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x2c6>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001596:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800159a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_RCC_OscConfig+0x300>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80015be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015c2:	fab2 f282 	clz	r2, r2
 80015c6:	b252      	sxtb	r2, r2
 80015c8:	f042 0220 	orr.w	r2, r2, #32
 80015cc:	b252      	sxtb	r2, r2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f002 021f 	and.w	r2, r2, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1aa      	bne.n	8001536 <HAL_RCC_OscConfig+0x252>
 80015e0:	e003      	b.n	80015ea <HAL_RCC_OscConfig+0x306>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 8170 	beq.w	80018da <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015fa:	4bd0      	ldr	r3, [pc, #832]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001606:	4bcd      	ldr	r3, [pc, #820]	; (800193c <HAL_RCC_OscConfig+0x658>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d16d      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
 8001612:	4bca      	ldr	r3, [pc, #808]	; (800193c <HAL_RCC_OscConfig+0x658>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d167      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001630:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x36a>
 8001648:	4bbc      	ldr	r3, [pc, #752]	; (800193c <HAL_RCC_OscConfig+0x658>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	e013      	b.n	8001676 <HAL_RCC_OscConfig+0x392>
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001666:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001672:	4bb2      	ldr	r3, [pc, #712]	; (800193c <HAL_RCC_OscConfig+0x658>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2202      	movs	r2, #2
 8001678:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800167c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001680:	fa92 f2a2 	rbit	r2, r2
 8001684:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001688:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b252      	sxtb	r2, r2
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	b252      	sxtb	r2, r2
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_RCC_OscConfig+0x3d6>
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d002      	beq.n	80016ba <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f000 bcfc 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4ba0      	ldr	r3, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6959      	ldr	r1, [r3, #20]
 80016c8:	23f8      	movs	r3, #248	; 0xf8
 80016ca:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80016da:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	4995      	ldr	r1, [pc, #596]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ec:	e0f5      	b.n	80018da <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8085 	beq.w	8001804 <HAL_RCC_OscConfig+0x520>
 80016fa:	2301      	movs	r3, #1
 80016fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800170c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	461a      	mov	r2, r3
 8001720:	2301      	movs	r3, #1
 8001722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7fe fdfe 	bl	8000324 <HAL_GetTick>
 8001728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7fe fdf9 	bl	8000324 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d902      	bls.n	8001744 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	f000 bcb7 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001756:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HAL_RCC_OscConfig+0x490>
 800176e:	4b73      	ldr	r3, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x658>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	e013      	b.n	800179c <HAL_RCC_OscConfig+0x4b8>
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800178c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x658>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2202      	movs	r2, #2
 800179e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017a2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80017ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b252      	sxtb	r2, r2
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	b252      	sxtb	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f002 021f 	and.w	r2, r2, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ae      	beq.n	800172e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6959      	ldr	r1, [r3, #20]
 80017de:	23f8      	movs	r3, #248	; 0xf8
 80017e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80017f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	494f      	ldr	r1, [pc, #316]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
 8001802:	e06a      	b.n	80018da <HAL_RCC_OscConfig+0x5f6>
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001816:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001822:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	2300      	movs	r3, #0
 800182c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7fe fd79 	bl	8000324 <HAL_GetTick>
 8001832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7fe fd74 	bl	8000324 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d902      	bls.n	800184e <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	f000 bc32 	b.w	80020b2 <HAL_RCC_OscConfig+0xdce>
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001860:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <HAL_RCC_OscConfig+0x59a>
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_RCC_OscConfig+0x658>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e013      	b.n	80018a6 <HAL_RCC_OscConfig+0x5c2>
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001896:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x658>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2202      	movs	r2, #2
 80018a8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80018b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b252      	sxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b252      	sxtb	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ae      	bne.n	8001838 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80d8 	beq.w	8001a9a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d067      	beq.n	80019c4 <HAL_RCC_OscConfig+0x6e0>
 80018f4:	2301      	movs	r3, #1
 80018f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x65c>)
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7fe fd02 	bl	8000324 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001924:	e00e      	b.n	8001944 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7fe fcfd 	bl	8000324 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d906      	bls.n	8001944 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e3bb      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	10908120 	.word	0x10908120
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800195c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001980:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4ba5      	ldr	r3, [pc, #660]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001986:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800198a:	2102      	movs	r1, #2
 800198c:	6019      	str	r1, [r3, #0]
 800198e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f1a3 	rbit	r1, r3
 8001998:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800199c:	6019      	str	r1, [r3, #0]
  return(result);
 800199e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0b1      	beq.n	8001926 <HAL_RCC_OscConfig+0x642>
 80019c2:	e06a      	b.n	8001a9a <HAL_RCC_OscConfig+0x7b6>
 80019c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019da:	601a      	str	r2, [r3, #0]
  return(result);
 80019dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <HAL_RCC_OscConfig+0x938>)
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	461a      	mov	r2, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7fe fc96 	bl	8000324 <HAL_GetTick>
 80019f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7fe fc91 	bl	8000324 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e34f      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001a12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a16:	2202      	movs	r2, #2
 8001a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a62:	2102      	movs	r1, #2
 8001a64:	6019      	str	r1, [r3, #0]
 8001a66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f1a3 	rbit	r1, r3
 8001a70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a74:	6019      	str	r1, [r3, #0]
  return(result);
 8001a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1b1      	bne.n	80019fe <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8159 	beq.w	8001d5c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d112      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	61d3      	str	r3, [r2, #28]
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11a      	bne.n	8001b24 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7fe fc13 	bl	8000324 <HAL_GetTick>
 8001afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b04:	f7fe fc0e 	bl	8000324 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e2cc      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ef      	beq.n	8001b04 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x858>
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	e02f      	b.n	8001b9c <HAL_RCC_OscConfig+0x8b8>
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x87c>
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a30      	ldr	r2, [pc, #192]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0x8b8>
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x8a0>
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x8b8>
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d06b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fbbd 	bl	8000324 <HAL_GetTick>
 8001baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7fe fbb8 	bl	8000324 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e274      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001bc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bf6:	601a      	str	r2, [r3, #0]
  return(result);
 8001bf8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bfc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x940>
 8001c12:	4b01      	ldr	r3, [pc, #4]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	e013      	b.n	8001c40 <HAL_RCC_OscConfig+0x95c>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	10908120 	.word	0x10908120
 8001c20:	40007000 	.word	0x40007000
 8001c24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	4bbb      	ldr	r3, [pc, #748]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c44:	2102      	movs	r1, #2
 8001c46:	6011      	str	r1, [r2, #0]
 8001c48:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	fa92 f1a2 	rbit	r1, r2
 8001c52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c56:	6011      	str	r1, [r2, #0]
  return(result);
 8001c58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b252      	sxtb	r2, r2
 8001c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c68:	b252      	sxtb	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d099      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x8cc>
 8001c7c:	e064      	b.n	8001d48 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fb51 	bl	8000324 <HAL_GetTick>
 8001c82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7fe fb4c 	bl	8000324 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e208      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001ca0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cce:	601a      	str	r2, [r3, #0]
  return(result);
 8001cd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cd4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xa0c>
 8001cea:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	e00d      	b.n	8001d0c <HAL_RCC_OscConfig+0xa28>
 8001cf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d10:	2102      	movs	r1, #2
 8001d12:	6011      	str	r1, [r2, #0]
 8001d14:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	fa92 f1a2 	rbit	r1, r2
 8001d1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d22:	6011      	str	r1, [r2, #0]
  return(result);
 8001d24:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b252      	sxtb	r2, r2
 8001d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d34:	b252      	sxtb	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19f      	bne.n	8001c88 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 81a4 	beq.w	80020b0 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	f000 819b 	beq.w	80020ac <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f040 8113 	bne.w	8001fa8 <HAL_RCC_OscConfig+0xcc4>
 8001d82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d9a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001da0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001daa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	2300      	movs	r3, #0
 8001db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe fab5 	bl	8000324 <HAL_GetTick>
 8001dba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e009      	b.n	8001dd4 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fab0 	bl	8000324 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e16e      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001dd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dec:	601a      	str	r2, [r3, #0]
  return(result);
 8001dee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001df2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_OscConfig+0xb2a>
 8001e08:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e01b      	b.n	8001e46 <HAL_RCC_OscConfig+0xb62>
 8001e0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e4e:	6011      	str	r1, [r2, #0]
 8001e50:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	fa92 f1a2 	rbit	r1, r2
 8001e5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e5e:	6011      	str	r1, [r2, #0]
  return(result);
 8001e60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b252      	sxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b252      	sxtb	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f002 021f 	and.w	r2, r2, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d19d      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4924      	ldr	r1, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
 8001ea0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eb8:	601a      	str	r2, [r3, #0]
  return(result);
 8001eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ebe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ec8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fa26 	bl	8000324 <HAL_GetTick>
 8001ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe fa21 	bl	8000324 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0df      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f0a:	601a      	str	r2, [r3, #0]
  return(result);
 8001f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_RCC_OscConfig+0xc4c>
 8001f26:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <HAL_RCC_OscConfig+0xc48>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xc84>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	4b55      	ldr	r3, [pc, #340]	; (80020bc <HAL_RCC_OscConfig+0xdd8>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f70:	6011      	str	r1, [r2, #0]
 8001f72:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fa92 f1a2 	rbit	r1, r2
 8001f7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f80:	6011      	str	r1, [r2, #0]
  return(result);
 8001f82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b252      	sxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b252      	sxtb	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d09b      	beq.n	8001ede <HAL_RCC_OscConfig+0xbfa>
 8001fa6:	e083      	b.n	80020b0 <HAL_RCC_OscConfig+0xdcc>
 8001fa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	601a      	str	r2, [r3, #0]
  return(result);
 8001fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe f9a2 	bl	8000324 <HAL_GetTick>
 8001fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe f99d 	bl	8000324 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e05b      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 8001ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002012:	601a      	str	r2, [r3, #0]
  return(result);
 8002014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0xd50>
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0xdd8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e01b      	b.n	800206c <HAL_RCC_OscConfig+0xd88>
 8002034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f107 0320 	add.w	r3, r7, #32
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_RCC_OscConfig+0xdd8>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f107 0214 	add.w	r2, r7, #20
 8002070:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	f107 0214 	add.w	r2, r7, #20
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	fa92 f1a2 	rbit	r1, r2
 8002080:	f107 0210 	add.w	r2, r7, #16
 8002084:	6011      	str	r1, [r2, #0]
  return(result);
 8002086:	f107 0210 	add.w	r2, r7, #16
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b252      	sxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b252      	sxtb	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d19d      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xd02>
 80020aa:	e001      	b.n	80020b0 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b09e      	sub	sp, #120	; 0x78
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e164      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d910      	bls.n	8002108 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	498d      	ldr	r1, [pc, #564]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e14c      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b84      	ldr	r3, [pc, #528]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4981      	ldr	r1, [pc, #516]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80df 	beq.w	80022f2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d13d      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
 800213c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002140:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800214a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <HAL_RCC_ClockConfig+0xa6>
 8002160:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	e00f      	b.n	8002186 <HAL_RCC_ClockConfig+0xc6>
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	667b      	str	r3, [r7, #100]	; 0x64
 8002174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002178:	663b      	str	r3, [r7, #96]	; 0x60
 800217a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002182:	4b69      	ldr	r3, [pc, #420]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800218a:	65ba      	str	r2, [r7, #88]	; 0x58
 800218c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b252      	sxtb	r2, r2
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	b252      	sxtb	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f202 	lsl.w	r2, r1, r2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d17d      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0f4      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d13d      	bne.n	800223c <HAL_RCC_ClockConfig+0x17c>
 80021c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_ClockConfig+0x12a>
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	e00f      	b.n	800220a <HAL_RCC_ClockConfig+0x14a>
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
 80021f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b252      	sxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b252      	sxtb	r2, r2
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d13b      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b2      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
 800223c:	2302      	movs	r3, #2
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_ClockConfig+0x1a4>
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e00d      	b.n	8002280 <HAL_RCC_ClockConfig+0x1c0>
 8002264:	2302      	movs	r3, #2
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2202      	movs	r2, #2
 8002282:	61ba      	str	r2, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	617a      	str	r2, [r7, #20]
  return(result);
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b252      	sxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b252      	sxtb	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e078      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 0203 	bic.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	491a      	ldr	r1, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c2:	f7fe f82f 	bl	8000324 <HAL_GetTick>
 80022c6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ca:	f7fe f82b 	bl	8000324 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e060      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_ClockConfig+0x268>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 020c 	and.w	r2, r3, #12
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d1eb      	bne.n	80022ca <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d215      	bcs.n	800232c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4906      	ldr	r1, [pc, #24]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_ClockConfig+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d006      	beq.n	800232c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e03f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2e2>
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <HAL_RCC_ClockConfig+0x2ec>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4919      	ldr	r1, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x2ec>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_RCC_ClockConfig+0x2ec>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4911      	ldr	r1, [pc, #68]	; (80023ac <HAL_RCC_ClockConfig+0x2ec>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236a:	f000 f825 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x2ec>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002378:	23f0      	movs	r3, #240	; 0xf0
 800237a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	60fb      	str	r3, [r7, #12]
  return(result);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800239a:	2000      	movs	r0, #0
 800239c:	f7fd ff7e 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3778      	adds	r7, #120	; 0x78
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08004750 	.word	0x08004750
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b08b      	sub	sp, #44	; 0x2c
 80023bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e03c      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ea:	623b      	str	r3, [r7, #32]
      break;
 80023ec:	e03c      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80023f8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	607b      	str	r3, [r7, #4]
  return(result);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc8>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f003 020f 	and.w	r2, r3, #15
 800241a:	230f      	movs	r3, #15
 800241c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	60fb      	str	r3, [r7, #12]
  return(result);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	fbb2 f2f3 	udiv	r2, r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	e004      	b.n	800245c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	e002      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002464:	623b      	str	r3, [r7, #32]
      break;
 8002466:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002468:	6a3b      	ldr	r3, [r7, #32]
}
 800246a:	4618      	mov	r0, r3
 800246c:	372c      	adds	r7, #44	; 0x2c
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200
 8002480:	08004730 	.word	0x08004730
 8002484:	08004740 	.word	0x08004740
 8002488:	003d0900 	.word	0x003d0900

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000008 	.word	0x20000008

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024aa:	f7ff ffef 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	603b      	str	r3, [r7, #0]
  return(result);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08004760 	.word	0x08004760

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024ee:	f7ff ffcd 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024f2:	4601      	mov	r1, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80024fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002500:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	603b      	str	r3, [r7, #0]
  return(result);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	08004760 	.word	0x08004760

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b092      	sub	sp, #72	; 0x48
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80cf 	beq.w	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002550:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10e      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a89      	ldr	r2, [pc, #548]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b87      	ldr	r3, [pc, #540]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fd fec7 	bl	8000324 <HAL_GetTick>
 8002596:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fd fec3 	bl	8000324 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0e9      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b77      	ldr	r3, [pc, #476]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d07c      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d075      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	2300      	movs	r3, #0
 8002622:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d046      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fd fe76 	bl	8000324 <HAL_GetTick>
 8002638:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fd fe72 	bl	8000324 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e096      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002652:	2302      	movs	r3, #2
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	2302      	movs	r3, #2
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	61fb      	str	r3, [r7, #28]
  return(result);
 800266a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	e007      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2202      	movs	r2, #2
 8002698:	613a      	str	r2, [r7, #16]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	60fa      	str	r2, [r7, #12]
  return(result);
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b252      	sxtb	r2, r2
 80026aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ae:	b252      	sxtb	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0bc      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	492e      	ldr	r1, [pc, #184]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f023 0203 	bic.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4921      	ldr	r1, [pc, #132]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f023 0210 	bic.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	491a      	ldr	r1, [pc, #104]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002720:	4313      	orrs	r3, r2
 8002722:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4912      	ldr	r1, [pc, #72]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	490b      	ldr	r1, [pc, #44]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3748      	adds	r7, #72	; 0x48
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
 8002790:	10908100 	.word	0x10908100

08002794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07c      	b.n	80028a0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f001 f8ff 	bl	80039c4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027e6:	d902      	bls.n	80027ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e002      	b.n	80027f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027fc:	d007      	beq.n	800280e <HAL_SPI_Init+0x7a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002806:	d002      	beq.n	800280e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800281e:	d903      	bls.n	8002828 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	e002      	b.n	800282e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	ea42 0103 	orr.w	r1, r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0204 	and.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	ea42 0103 	orr.w	r1, r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_SPI_Transmit+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e13e      	b.n	8002b4c <HAL_SPI_Transmit+0x2a4>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d6:	f7fd fd25 	bl	8000324 <HAL_GetTick>
 80028da:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ec:	e125      	b.n	8002b3a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_Transmit+0x52>
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fe:	e11c      	b.n	8002b3a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294a:	d107      	bne.n	800295c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800295a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d007      	beq.n	800297a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002982:	d947      	bls.n	8002a14 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_SPI_Transmit+0xee>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d138      	bne.n	8002a08 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3302      	adds	r3, #2
 80029a4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029b4:	e028      	b.n	8002a08 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d10f      	bne.n	80029e4 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3302      	adds	r3, #2
 80029d2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e2:	e011      	b.n	8002a08 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_SPI_Transmit+0x15a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d00a      	beq.n	8002a08 <HAL_SPI_Transmit+0x160>
 80029f2:	f7fd fc97 	bl	8000324 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d802      	bhi.n	8002a08 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a06:	e098      	b.n	8002b3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1d1      	bne.n	80029b6 <HAL_SPI_Transmit+0x10e>
 8002a12:	e070      	b.n	8002af6 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_SPI_Transmit+0x17e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d162      	bne.n	8002aec <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d90f      	bls.n	8002a50 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b02      	subs	r3, #2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a4e:	e04d      	b.n	8002aec <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60ba      	str	r2, [r7, #8]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	320c      	adds	r2, #12
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a6e:	e03d      	b.n	8002aec <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d124      	bne.n	8002ac8 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d90f      	bls.n	8002aa8 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3302      	adds	r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b02      	subs	r3, #2
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aa6:	e021      	b.n	8002aec <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	320c      	adds	r2, #12
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ac6:	e011      	b.n	8002aec <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_SPI_Transmit+0x23e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d00a      	beq.n	8002aec <HAL_SPI_Transmit+0x244>
 8002ad6:	f7fd fc25 	bl	8000324 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d802      	bhi.n	8002aec <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aea:	e026      	b.n	8002b3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1bc      	bne.n	8002a70 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f902 	bl	8002d04 <SPI_EndRxTxTransaction>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e000      	b.n	8002b3a <HAL_SPI_Transmit+0x292>
  }

error:
 8002b38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b62:	e04c      	b.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d048      	beq.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002b72:	f7fd fbd7 	bl	8000324 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d83d      	bhi.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b9a:	d111      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba4:	d004      	beq.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d107      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc8:	d10f      	bne.n	8002bea <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e00e      	b.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d101      	bne.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002c0e:	2201      	movs	r2, #1
 8002c10:	e000      	b.n	8002c14 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002c12:	2200      	movs	r2, #0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d1a4      	bne.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002c32:	e05a      	b.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c3a:	d109      	bne.n	8002c50 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d048      	beq.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002c5e:	f7fd fb61 	bl	8000324 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d83d      	bhi.n	8002cea <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c86:	d111      	bne.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x88>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c90:	d004      	beq.n	8002c9c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d107      	bne.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d10f      	bne.n	8002cd6 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e008      	b.n	8002cfc <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d19c      	bne.n	8002c34 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff ff81 	bl	8002c24 <SPI_WaitFifoStateUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e027      	b.n	8002d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff06 	bl	8002b54 <SPI_WaitFlagStateUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e014      	b.n	8002d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff5a 	bl	8002c24 <SPI_WaitFifoStateUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e000      	b.n	8002d88 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e043      	b.n	8002e2a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fe48 	bl	8003a4c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f82d 	bl	8002e34 <UART_SetConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e022      	b.n	8002e2a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f987 	bl	8003100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa0e 	bl	8003244 <UART_CheckIdleState>
 8002e28:	4603      	mov	r3, r0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002e40:	2310      	movs	r3, #16
 8002e42:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b9f      	ldr	r3, [pc, #636]	; (80030ec <UART_SetConfig+0x2b8>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a8e      	ldr	r2, [pc, #568]	; (80030f0 <UART_SetConfig+0x2bc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d121      	bne.n	8002f00 <UART_SetConfig+0xcc>
 8002ebc:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <UART_SetConfig+0x2c0>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0xc4>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x9c>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	08002ef3 	.word	0x08002ef3
 8002edc:	08002ee7 	.word	0x08002ee7
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
 8002ee4:	e01e      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	75fb      	strb	r3, [r7, #23]
 8002eea:	e01b      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002eec:	2304      	movs	r3, #4
 8002eee:	75fb      	strb	r3, [r7, #23]
 8002ef0:	e018      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	e015      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	75fb      	strb	r3, [r7, #23]
 8002efc:	bf00      	nop
 8002efe:	e011      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <UART_SetConfig+0x2c4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d102      	bne.n	8002f10 <UART_SetConfig+0xdc>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
 8002f0e:	e009      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a79      	ldr	r2, [pc, #484]	; (80030fc <UART_SetConfig+0x2c8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d102      	bne.n	8002f20 <UART_SetConfig+0xec>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
 8002f1e:	e001      	b.n	8002f24 <UART_SetConfig+0xf0>
 8002f20:	2310      	movs	r3, #16
 8002f22:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2c:	d16f      	bne.n	800300e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d857      	bhi.n	8002fe4 <UART_SetConfig+0x1b0>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <UART_SetConfig+0x108>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f7d 	.word	0x08002f7d
 8002f44:	08002f99 	.word	0x08002f99
 8002f48:	08002fe5 	.word	0x08002fe5
 8002f4c:	08002fb3 	.word	0x08002fb3
 8002f50:	08002fe5 	.word	0x08002fe5
 8002f54:	08002fe5 	.word	0x08002fe5
 8002f58:	08002fe5 	.word	0x08002fe5
 8002f5c:	08002fcf 	.word	0x08002fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f60:	f7ff faa0 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8002f64:	4603      	mov	r3, r0
 8002f66:	005a      	lsls	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	82bb      	strh	r3, [r7, #20]
        break;
 8002f7a:	e036      	b.n	8002fea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f7c:	f7ff fab4 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8002f80:	4603      	mov	r3, r0
 8002f82:	005a      	lsls	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	441a      	add	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	82bb      	strh	r3, [r7, #20]
        break;
 8002f96:	e028      	b.n	8002fea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fa2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6852      	ldr	r2, [r2, #4]
 8002faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fae:	82bb      	strh	r3, [r7, #20]
        break;
 8002fb0:	e01b      	b.n	8002fea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fb2:	f7ff fa01 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	005a      	lsls	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	82bb      	strh	r3, [r7, #20]
        break;
 8002fcc:	e00d      	b.n	8002fea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	82bb      	strh	r3, [r7, #20]
        break;
 8002fe2:	e002      	b.n	8002fea <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002fea:	8abb      	ldrh	r3, [r7, #20]
 8002fec:	f023 030f 	bic.w	r3, r3, #15
 8002ff0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ff2:	8abb      	ldrh	r3, [r7, #20]
 8002ff4:	105b      	asrs	r3, r3, #1
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	4313      	orrs	r3, r2
 8003002:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	897a      	ldrh	r2, [r7, #10]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	e069      	b.n	80030e2 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d863      	bhi.n	80030dc <UART_SetConfig+0x2a8>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0x1e8>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003041 	.word	0x08003041
 8003020:	08003061 	.word	0x08003061
 8003024:	08003081 	.word	0x08003081
 8003028:	080030dd 	.word	0x080030dd
 800302c:	080030a1 	.word	0x080030a1
 8003030:	080030dd 	.word	0x080030dd
 8003034:	080030dd 	.word	0x080030dd
 8003038:	080030dd 	.word	0x080030dd
 800303c:	080030c1 	.word	0x080030c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003040:	f7ff fa30 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	b29a      	uxth	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60da      	str	r2, [r3, #12]
        break;
 800305e:	e040      	b.n	80030e2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003060:	f7ff fa42 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60da      	str	r2, [r3, #12]
        break;
 800307e:	e030      	b.n	80030e2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800308a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6852      	ldr	r2, [r2, #4]
 8003092:	fbb3 f3f2 	udiv	r3, r3, r2
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60da      	str	r2, [r3, #12]
        break;
 800309e:	e020      	b.n	80030e2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030a0:	f7ff f98a 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60da      	str	r2, [r3, #12]
        break;
 80030be:	e010      	b.n	80030e2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60da      	str	r2, [r3, #12]
        break;
 80030da:	e002      	b.n	80030e2 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	74fb      	strb	r3, [r7, #19]
        break;
 80030e0:	bf00      	nop
    }
  }

  return ret;
 80030e2:	7cfb      	ldrb	r3, [r7, #19]

}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	efff69f3 	.word	0xefff69f3
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40004400 	.word	0x40004400
 80030fc:	40004800 	.word	0x40004800

08003100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01a      	beq.n	8003216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031fe:	d10a      	bne.n	8003216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003256:	f7fd f865 	bl	8000324 <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	d10e      	bne.n	8003288 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800326a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f82c 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e022      	b.n	80032ce <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d10e      	bne.n	80032b4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f816 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e00c      	b.n	80032ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	e02c      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d028      	beq.n	8003342 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x30>
 80032f6:	f7fd f815 	bl	8000324 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d21d      	bcs.n	8003342 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003314:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e00f      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0c3      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003372:	f7fc ff7d 	bl	8000270 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003376:	f000 f879 	bl	800346c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800337a:	f000 f97f 	bl	800367c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800337e:	f000 f94d 	bl	800361c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003382:	f000 f8cd 	bl	8003520 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003386:	f000 f90b 	bl	80035a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 800338a:	f000 fc5d 	bl	8003c48 <LCD_Init>

  uint8_t endereco[2];

  data[0] = 0;
 800338e:	4b33      	ldr	r3, [pc, #204]	; (800345c <main+0xf0>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
  data[1] = 1;
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <main+0xf0>)
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]

  endereco[0] = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  endereco[1] = 1;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDRESS , endereco, 2, 1000); // manda endereço que quer ler dado
 80033a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2302      	movs	r3, #2
 80033b2:	21a0      	movs	r1, #160	; 0xa0
 80033b4:	482a      	ldr	r0, [pc, #168]	; (8003460 <main+0xf4>)
 80033b6:	f7fd fb27 	bl	8000a08 <HAL_I2C_Master_Transmit>

	  HAL_Delay(1000);
 80033ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033be:	f7fc ffbd 	bl	800033c <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDRESS, data, 5, 1000); // lê o dado
 80033c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2305      	movs	r3, #5
 80033ca:	4a24      	ldr	r2, [pc, #144]	; (800345c <main+0xf0>)
 80033cc:	21a0      	movs	r1, #160	; 0xa0
 80033ce:	4824      	ldr	r0, [pc, #144]	; (8003460 <main+0xf4>)
 80033d0:	f7fd fc1a 	bl	8000c08 <HAL_I2C_Master_Receive>

	  sprintf(BufferA,"Dado: %d\r\n",data[2]);
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <main+0xf0>)
 80033d6:	789b      	ldrb	r3, [r3, #2]
 80033d8:	461a      	mov	r2, r3
 80033da:	f107 0318 	add.w	r3, r7, #24
 80033de:	4921      	ldr	r1, [pc, #132]	; (8003464 <main+0xf8>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd8d 	bl	8003f00 <siprintf>
	  sprintf(BufferB,"Dado: %d\r\n",data[3]);
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <main+0xf0>)
 80033e8:	78db      	ldrb	r3, [r3, #3]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	491c      	ldr	r1, [pc, #112]	; (8003464 <main+0xf8>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd84 	bl	8003f00 <siprintf>
	  sprintf(BufferC,"Dado: %d\r\n",data[4]);
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <main+0xf0>)
 80033fa:	791b      	ldrb	r3, [r3, #4]
 80033fc:	461a      	mov	r2, r3
 80033fe:	463b      	mov	r3, r7
 8003400:	4918      	ldr	r1, [pc, #96]	; (8003464 <main+0xf8>)
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fd7c 	bl	8003f00 <siprintf>

	  LCD_Write_String(0,0,BufferA);
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	461a      	mov	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	2000      	movs	r0, #0
 8003412:	f000 fca1 	bl	8003d58 <LCD_Write_String>
	  LCD_Write_String(0,1,BufferB);
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	461a      	mov	r2, r3
 800341c:	2101      	movs	r1, #1
 800341e:	2000      	movs	r0, #0
 8003420:	f000 fc9a 	bl	8003d58 <LCD_Write_String>
	  LCD_Write_String(0,2,BufferC);
 8003424:	463b      	mov	r3, r7
 8003426:	461a      	mov	r2, r3
 8003428:	2102      	movs	r1, #2
 800342a:	2000      	movs	r0, #0
 800342c:	f000 fc94 	bl	8003d58 <LCD_Write_String>

	  if (f == 1){
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <main+0xfc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d1b6      	bne.n	80033a6 <main+0x3a>
		  HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDRESS , data, 5, 1000); // escreve o dado
 8003438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2305      	movs	r3, #5
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <main+0xf0>)
 8003442:	21a0      	movs	r1, #160	; 0xa0
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <main+0xf4>)
 8003446:	f7fd fadf 	bl	8000a08 <HAL_I2C_Master_Transmit>
		  HAL_Delay(1000);
 800344a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800344e:	f7fc ff75 	bl	800033c <HAL_Delay>
	  	  f=0;
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <main+0xfc>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
  {
 8003458:	e7a5      	b.n	80033a6 <main+0x3a>
 800345a:	bf00      	nop
 800345c:	200000f8 	.word	0x200000f8
 8003460:	200000a4 	.word	0x200000a4
 8003464:	08004724 	.word	0x08004724
 8003468:	200000a0 	.word	0x200000a0

0800346c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b096      	sub	sp, #88	; 0x58
 8003470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003476:	2228      	movs	r2, #40	; 0x28
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd38 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003490:	463b      	mov	r3, r7
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]
 800349e:	615a      	str	r2, [r3, #20]
 80034a0:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034a2:	2302      	movs	r3, #2
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034a6:	2301      	movs	r3, #1
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034aa:	2310      	movs	r3, #16
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ae:	2302      	movs	r3, #2
 80034b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034b2:	2300      	movs	r3, #0
 80034b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80034b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd ff0f 	bl	80012e4 <HAL_RCC_OscConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80034cc:	f000 f9ec 	bl	80038a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034d0:	230f      	movs	r3, #15
 80034d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034d4:	2302      	movs	r3, #2
 80034d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034e6:	f107 031c 	add.w	r3, r7, #28
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fde7 	bl	80020c0 <HAL_RCC_ClockConfig>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80034f8:	f000 f9d6 	bl	80038a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034fc:	2320      	movs	r3, #32
 80034fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003504:	463b      	mov	r3, r7
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f810 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003512:	f000 f9c9 	bl	80038a8 <Error_Handler>
  }
}
 8003516:	bf00      	nop
 8003518:	3758      	adds	r7, #88	; 0x58
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <MX_I2C1_Init+0x74>)
 8003526:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <MX_I2C1_Init+0x78>)
 8003528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <MX_I2C1_Init+0x74>)
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <MX_I2C1_Init+0x7c>)
 800352e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <MX_I2C1_Init+0x74>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <MX_I2C1_Init+0x74>)
 8003538:	2201      	movs	r2, #1
 800353a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <MX_I2C1_Init+0x74>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <MX_I2C1_Init+0x74>)
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <MX_I2C1_Init+0x74>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_I2C1_Init+0x74>)
 8003550:	2200      	movs	r2, #0
 8003552:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <MX_I2C1_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800355a:	480e      	ldr	r0, [pc, #56]	; (8003594 <MX_I2C1_Init+0x74>)
 800355c:	f7fd f9c4 	bl	80008e8 <HAL_I2C_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003566:	f000 f99f 	bl	80038a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800356a:	2100      	movs	r1, #0
 800356c:	4809      	ldr	r0, [pc, #36]	; (8003594 <MX_I2C1_Init+0x74>)
 800356e:	f7fd fe1f 	bl	80011b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003578:	f000 f996 	bl	80038a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800357c:	2100      	movs	r1, #0
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <MX_I2C1_Init+0x74>)
 8003580:	f7fd fe61 	bl	8001246 <HAL_I2CEx_ConfigDigitalFilter>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800358a:	f000 f98d 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200000a4 	.word	0x200000a4
 8003598:	40005400 	.word	0x40005400
 800359c:	2000090e 	.word	0x2000090e

080035a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <MX_SPI1_Init+0x74>)
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <MX_SPI1_Init+0x78>)
 80035a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <MX_SPI1_Init+0x74>)
 80035ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <MX_SPI1_Init+0x74>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <MX_SPI1_Init+0x74>)
 80035ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <MX_SPI1_Init+0x74>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <MX_SPI1_Init+0x74>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <MX_SPI1_Init+0x74>)
 80035ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <MX_SPI1_Init+0x74>)
 80035d6:	2238      	movs	r2, #56	; 0x38
 80035d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <MX_SPI1_Init+0x74>)
 80035dc:	2200      	movs	r2, #0
 80035de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <MX_SPI1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <MX_SPI1_Init+0x74>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <MX_SPI1_Init+0x74>)
 80035ee:	2207      	movs	r2, #7
 80035f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <MX_SPI1_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <MX_SPI1_Init+0x74>)
 80035fa:	2208      	movs	r2, #8
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035fe:	4805      	ldr	r0, [pc, #20]	; (8003614 <MX_SPI1_Init+0x74>)
 8003600:	f7ff f8c8 	bl	8002794 <HAL_SPI_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800360a:	f000 f94d 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000100 	.word	0x20000100
 8003618:	40013000 	.word	0x40013000

0800361c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <MX_USART2_UART_Init+0x5c>)
 8003624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003628:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800362c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <MX_USART2_UART_Init+0x58>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003642:	220c      	movs	r2, #12
 8003644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <MX_USART2_UART_Init+0x58>)
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <MX_USART2_UART_Init+0x58>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800365e:	4805      	ldr	r0, [pc, #20]	; (8003674 <MX_USART2_UART_Init+0x58>)
 8003660:	f7ff fb96 	bl	8002d90 <HAL_UART_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800366a:	f000 f91d 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000164 	.word	0x20000164
 8003678:	40004400 	.word	0x40004400

0800367c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <MX_GPIO_Init+0x15c>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4a50      	ldr	r2, [pc, #320]	; (80037d8 <MX_GPIO_Init+0x15c>)
 8003698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800369c:	6153      	str	r3, [r2, #20]
 800369e:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b4:	6153      	str	r3, [r2, #20]
 80036b6:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4a44      	ldr	r2, [pc, #272]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	6153      	str	r3, [r2, #20]
 80036ce:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4a3e      	ldr	r2, [pc, #248]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e4:	6153      	str	r3, [r2, #20]
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <MX_GPIO_Init+0x15c>)
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80036f2:	2200      	movs	r2, #0
 80036f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036f8:	4838      	ldr	r0, [pc, #224]	; (80037dc <MX_GPIO_Init+0x160>)
 80036fa:	f7fd f8c5 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003704:	4836      	ldr	r0, [pc, #216]	; (80037e0 <MX_GPIO_Init+0x164>)
 8003706:	f7fd f8bf 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800370a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <MX_GPIO_Init+0x168>)
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	4619      	mov	r1, r3
 800371e:	4830      	ldr	r0, [pc, #192]	; (80037e0 <MX_GPIO_Init+0x164>)
 8003720:	f7fc ff3c 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : nCS_Pin */
  GPIO_InitStruct.Pin = nCS_Pin;
 8003724:	2310      	movs	r3, #16
 8003726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nCS_GPIO_Port, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373a:	f7fc ff2f 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S1_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S1_Pin;
 800373e:	f241 0310 	movw	r3, #4112	; 0x1010
 8003742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <MX_GPIO_Init+0x16c>)
 8003746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4619      	mov	r1, r3
 8003752:	4823      	ldr	r0, [pc, #140]	; (80037e0 <MX_GPIO_Init+0x164>)
 8003754:	f7fc ff22 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8003758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800375c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	4619      	mov	r1, r3
 8003770:	481a      	ldr	r0, [pc, #104]	; (80037dc <MX_GPIO_Init+0x160>)
 8003772:	f7fc ff13 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_Pin */
  GPIO_InitStruct.Pin = S2_Pin;
 8003776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <MX_GPIO_Init+0x16c>)
 800377e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4619      	mov	r1, r3
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f7fc ff05 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_DC_Pin;
 8003792:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003798:	2301      	movs	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4619      	mov	r1, r3
 80037aa:	480d      	ldr	r0, [pc, #52]	; (80037e0 <MX_GPIO_Init+0x164>)
 80037ac:	f7fc fef6 	bl	800059c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	200a      	movs	r0, #10
 80037b6:	f7fc feba 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80037ba:	200a      	movs	r0, #10
 80037bc:	f7fc fed3 	bl	8000566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	2028      	movs	r0, #40	; 0x28
 80037c6:	f7fc feb2 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037ca:	2028      	movs	r0, #40	; 0x28
 80037cc:	f7fc fecb 	bl	8000566 <HAL_NVIC_EnableIRQ>

}
 80037d0:	bf00      	nop
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	48000400 	.word	0x48000400
 80037e0:	48000800 	.word	0x48000800
 80037e4:	10210000 	.word	0x10210000
 80037e8:	10110000 	.word	0x10110000

080037ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	80fb      	strh	r3, [r7, #6]

	f=1;
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_GPIO_EXTI_Callback+0xa8>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
	if (GPIO_Pin == S1_Pin){
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003802:	d109      	bne.n	8003818 <HAL_GPIO_EXTI_Callback+0x2c>

		contA++;
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_GPIO_EXTI_Callback+0xac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_GPIO_EXTI_Callback+0xac>)
 800380c:	6013      	str	r3, [r2, #0]
		data[2] = contA;
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_GPIO_EXTI_Callback+0xac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003816:	709a      	strb	r2, [r3, #2]
	}
	if (GPIO_Pin == S2_Pin){
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d109      	bne.n	8003834 <HAL_GPIO_EXTI_Callback+0x48>

		contB++;
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003828:	6013      	str	r3, [r2, #0]
		data[3] = contB;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003832:	70da      	strb	r2, [r3, #3]
	}
	if (GPIO_Pin == S3_Pin){
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b10      	cmp	r3, #16
 8003838:	d109      	bne.n	800384e <HAL_GPIO_EXTI_Callback+0x62>

		contC++;
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003842:	6013      	str	r3, [r2, #0]
		data[4] = contC;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 800384c:	711a      	strb	r2, [r3, #4]
	}
	if (GPIO_Pin == B1_Pin){
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d117      	bne.n	8003886 <HAL_GPIO_EXTI_Callback+0x9a>

		contA = 0; data[2] = contA;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_GPIO_EXTI_Callback+0xac>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_GPIO_EXTI_Callback+0xac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003864:	709a      	strb	r2, [r3, #2]
		contB = 0; data[3] = contB;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003874:	70da      	strb	r2, [r3, #3]
		contC = 0; data[4] = contC;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003884:	711a      	strb	r2, [r3, #4]
	}
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	200000a0 	.word	0x200000a0
 8003898:	200000f4 	.word	0x200000f4
 800389c:	200000f8 	.word	0x200000f8
 80038a0:	2000009c 	.word	0x2000009c
 80038a4:	200000f0 	.word	0x200000f0

080038a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_MspInit+0x44>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_MspInit+0x44>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6193      	str	r3, [r2, #24]
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_MspInit+0x44>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_MspInit+0x44>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_MspInit+0x44>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	61d3      	str	r3, [r2, #28]
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_MspInit+0x44>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038ee:	2007      	movs	r0, #7
 80038f0:	f7fc fe12 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000

08003900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <HAL_I2C_MspInit+0xb8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d145      	bne.n	80039ae <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4a25      	ldr	r2, [pc, #148]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	6153      	str	r3, [r2, #20]
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6153      	str	r3, [r2, #20]
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003958:	2312      	movs	r3, #18
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800395c:	2301      	movs	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003964:	2304      	movs	r3, #4
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003972:	f7fc fe13 	bl	800059c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800397a:	2312      	movs	r3, #18
 800397c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397e:	2301      	movs	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003982:	2303      	movs	r3, #3
 8003984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003986:	2304      	movs	r3, #4
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	4619      	mov	r1, r3
 8003990:	480b      	ldr	r0, [pc, #44]	; (80039c0 <HAL_I2C_MspInit+0xc0>)
 8003992:	f7fc fe03 	bl	800059c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 800399c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039a0:	61d3      	str	r3, [r2, #28]
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_I2C_MspInit+0xbc>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40005400 	.word	0x40005400
 80039bc:	40021000 	.word	0x40021000
 80039c0:	48000400 	.word	0x48000400

080039c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_SPI_MspInit+0x7c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d127      	bne.n	8003a36 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 80039ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f0:	6193      	str	r3, [r2, #24]
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6153      	str	r3, [r2, #20]
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_SPI_MspInit+0x80>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003a16:	2338      	movs	r3, #56	; 0x38
 8003a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a22:	2303      	movs	r3, #3
 8003a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a26:	2305      	movs	r3, #5
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <HAL_SPI_MspInit+0x84>)
 8003a32:	f7fc fdb3 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a36:	bf00      	nop
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40013000 	.word	0x40013000
 8003a44:	40021000 	.word	0x40021000
 8003a48:	48000400 	.word	0x48000400

08003a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_UART_MspInit+0x7c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d128      	bne.n	8003ac0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	61d3      	str	r3, [r2, #28]
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a90:	6153      	str	r3, [r2, #20]
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_UART_MspInit+0x80>)
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aae:	2307      	movs	r3, #7
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abc:	f7fc fd6e 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40021000 	.word	0x40021000

08003ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae2:	e7fe      	b.n	8003ae2 <HardFault_Handler+0x4>

08003ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <MemManage_Handler+0x4>

08003aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aee:	e7fe      	b.n	8003aee <BusFault_Handler+0x4>

08003af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <UsageFault_Handler+0x4>

08003af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b24:	f7fc fbea 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b30:	2010      	movs	r0, #16
 8003b32:	f7fc fec1 	bl	80008b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003b3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b42:	f7fc feb9 	bl	80008b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003b46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b4a:	f7fc feb5 	bl	80008b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b52:	f7fc feb1 	bl	80008b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <_sbrk+0x50>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <_sbrk+0x16>
		heap_end = &end;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <_sbrk+0x50>)
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <_sbrk+0x54>)
 8003b70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <_sbrk+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <_sbrk+0x50>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	466a      	mov	r2, sp
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d907      	bls.n	8003b96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b86:	f000 f989 	bl	8003e9c <__errno>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	e006      	b.n	8003ba4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <_sbrk+0x50>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	4a03      	ldr	r2, [pc, #12]	; (8003bac <_sbrk+0x50>)
 8003ba0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	2000008c 	.word	0x2000008c
 8003bb0:	200001d8 	.word	0x200001d8

08003bb4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <SystemInit+0x84>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <SystemInit+0x84>)
 8003bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <SystemInit+0x88>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <SystemInit+0x88>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <SystemInit+0x88>)
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	4918      	ldr	r1, [pc, #96]	; (8003c3c <SystemInit+0x88>)
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <SystemInit+0x8c>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <SystemInit+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <SystemInit+0x88>)
 8003be6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <SystemInit+0x88>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <SystemInit+0x88>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <SystemInit+0x88>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <SystemInit+0x88>)
 8003c02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003c06:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <SystemInit+0x88>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <SystemInit+0x88>)
 8003c0e:	f023 030f 	bic.w	r3, r3, #15
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <SystemInit+0x88>)
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	4908      	ldr	r1, [pc, #32]	; (8003c3c <SystemInit+0x88>)
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <SystemInit+0x90>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <SystemInit+0x88>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SystemInit+0x84>)
 8003c28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c2c:	609a      	str	r2, [r3, #8]
#endif
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	f87fc00c 	.word	0xf87fc00c
 8003c44:	ff00fccc 	.word	0xff00fccc

08003c48 <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  LCD_Reset();
 8003c4c:	f000 f810 	bl	8003c70 <LCD_Reset>
  LCD_Write_Command(0x21);
 8003c50:	2021      	movs	r0, #33	; 0x21
 8003c52:	f000 f8a1 	bl	8003d98 <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 8003c56:	20d0      	movs	r0, #208	; 0xd0
 8003c58:	f000 f89e 	bl	8003d98 <LCD_Write_Command>
  LCD_Write_Command(0x20);
 8003c5c:	2020      	movs	r0, #32
 8003c5e:	f000 f89b 	bl	8003d98 <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 8003c62:	200c      	movs	r0, #12
 8003c64:	f000 f898 	bl	8003d98 <LCD_Write_Command>
  LCD_Clear();
 8003c68:	f000 f832 	bl	8003cd0 <LCD_Clear>
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c7a:	4807      	ldr	r0, [pc, #28]	; (8003c98 <LCD_Reset+0x28>)
 8003c7c:	f7fc fe04 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8003c80:	2032      	movs	r0, #50	; 0x32
 8003c82:	f7fc fb5b 	bl	800033c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003c86:	2201      	movs	r2, #1
 8003c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <LCD_Reset+0x28>)
 8003c8e:	f7fc fdfb 	bl	8000888 <HAL_GPIO_WritePin>
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	48000400 	.word	0x48000400

08003c9c <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 8003cac:	79bb      	ldrb	r3, [r7, #6]
 8003cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f86f 	bl	8003d98 <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f868 	bl	8003d98 <LCD_Write_Command>
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7ff ffdf 	bl	8003c9c <LCD_Set_Postion>
  for(t=0;t<6;t++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	71fb      	strb	r3, [r7, #7]
 8003ce2:	e00e      	b.n	8003d02 <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	71bb      	strb	r3, [r7, #6]
 8003ce8:	e005      	b.n	8003cf6 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 8003cea:	2000      	movs	r0, #0
 8003cec:	f000 f880 	bl	8003df0 <LCD_Write_Data>
    for(k=0;k<84;k++)
 8003cf0:	79bb      	ldrb	r3, [r7, #6]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	71bb      	strb	r3, [r7, #6]
 8003cf6:	79bb      	ldrb	r3, [r7, #6]
 8003cf8:	2b53      	cmp	r3, #83	; 0x53
 8003cfa:	d9f6      	bls.n	8003cea <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	71fb      	strb	r3, [r7, #7]
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d9ed      	bls.n	8003ce4 <LCD_Clear+0x14>
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	3b20      	subs	r3, #32
 8003d1e:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e00f      	b.n	8003d46 <LCD_Write_Char+0x36>
 8003d26:	79fa      	ldrb	r2, [r7, #7]
 8003d28:	7bf9      	ldrb	r1, [r7, #15]
 8003d2a:	480a      	ldr	r0, [pc, #40]	; (8003d54 <LCD_Write_Char+0x44>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4403      	add	r3, r0
 8003d36:	440b      	add	r3, r1
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f858 	bl	8003df0 <LCD_Write_Data>
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	3301      	adds	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d9ec      	bls.n	8003d26 <LCD_Write_Char+0x16>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08004768 	.word	0x08004768

08003d58 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	603a      	str	r2, [r7, #0]
 8003d62:	71fb      	strb	r3, [r7, #7]
 8003d64:	460b      	mov	r3, r1
 8003d66:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 8003d68:	79ba      	ldrb	r2, [r7, #6]
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff94 	bl	8003c9c <LCD_Set_Postion>
  while(* str) {
 8003d74:	e007      	b.n	8003d86 <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ffc8 	bl	8003d10 <LCD_Write_Char>
    str ++;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	603b      	str	r3, [r7, #0]
  while(* str) {
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f3      	bne.n	8003d76 <LCD_Write_String+0x1e>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8003da2:	2200      	movs	r2, #0
 8003da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003da8:	480f      	ldr	r0, [pc, #60]	; (8003de8 <LCD_Write_Command+0x50>)
 8003daa:	f7fc fd6d 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003db4:	480c      	ldr	r0, [pc, #48]	; (8003de8 <LCD_Write_Command+0x50>)
 8003db6:	f7fc fd67 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 8003dba:	1df9      	adds	r1, r7, #7
 8003dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	480a      	ldr	r0, [pc, #40]	; (8003dec <LCD_Write_Command+0x54>)
 8003dc4:	f7fe fd70 	bl	80028a8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dce:	4806      	ldr	r0, [pc, #24]	; (8003de8 <LCD_Write_Command+0x50>)
 8003dd0:	f7fc fd5a 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dda:	4803      	ldr	r0, [pc, #12]	; (8003de8 <LCD_Write_Command+0x50>)
 8003ddc:	f7fc fd54 	bl	8000888 <HAL_GPIO_WritePin>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	48000800 	.word	0x48000800
 8003dec:	20000100 	.word	0x20000100

08003df0 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e00:	480f      	ldr	r0, [pc, #60]	; (8003e40 <LCD_Write_Data+0x50>)
 8003e02:	f7fc fd41 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003e06:	2201      	movs	r2, #1
 8003e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <LCD_Write_Data+0x50>)
 8003e0e:	f7fc fd3b 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 8003e12:	1df9      	adds	r1, r7, #7
 8003e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e18:	2201      	movs	r2, #1
 8003e1a:	480a      	ldr	r0, [pc, #40]	; (8003e44 <LCD_Write_Data+0x54>)
 8003e1c:	f7fe fd44 	bl	80028a8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8003e20:	2201      	movs	r2, #1
 8003e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e26:	4806      	ldr	r0, [pc, #24]	; (8003e40 <LCD_Write_Data+0x50>)
 8003e28:	f7fc fd2e 	bl	8000888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <LCD_Write_Data+0x50>)
 8003e34:	f7fc fd28 	bl	8000888 <HAL_GPIO_WritePin>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	48000800 	.word	0x48000800
 8003e44:	20000100 	.word	0x20000100

08003e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e4e:	e003      	b.n	8003e58 <LoopCopyDataInit>

08003e50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003e52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e56:	3104      	adds	r1, #4

08003e58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e60:	d3f6      	bcc.n	8003e50 <CopyDataInit>
	ldr	r2, =_sbss
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e64:	e002      	b.n	8003e6c <LoopFillZerobss>

08003e66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e68:	f842 3b04 	str.w	r3, [r2], #4

08003e6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <LoopForever+0x16>)
	cmp	r2, r3
 8003e6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e70:	d3f9      	bcc.n	8003e66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e72:	f7ff fe9f 	bl	8003bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e76:	f000 f817 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e7a:	f7ff fa77 	bl	800336c <main>

08003e7e <LoopForever>:

LoopForever:
    b LoopForever
 8003e7e:	e7fe      	b.n	8003e7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e80:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003e84:	080049cc 	.word	0x080049cc
	ldr	r0, =_sdata
 8003e88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e8c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003e90:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003e94:	200001d8 	.word	0x200001d8

08003e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e98:	e7fe      	b.n	8003e98 <ADC1_2_IRQHandler>
	...

08003e9c <__errno>:
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <__errno+0x8>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4e0d      	ldr	r6, [pc, #52]	; (8003ee0 <__libc_init_array+0x38>)
 8003eac:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eae:	1ba4      	subs	r4, r4, r6
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	2500      	movs	r5, #0
 8003eb4:	42a5      	cmp	r5, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	4e0b      	ldr	r6, [pc, #44]	; (8003ee8 <__libc_init_array+0x40>)
 8003eba:	4c0c      	ldr	r4, [pc, #48]	; (8003eec <__libc_init_array+0x44>)
 8003ebc:	f000 fc26 	bl	800470c <_init>
 8003ec0:	1ba4      	subs	r4, r4, r6
 8003ec2:	10a4      	asrs	r4, r4, #2
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	42a5      	cmp	r5, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed0:	4798      	blx	r3
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eda:	4798      	blx	r3
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	080049c4 	.word	0x080049c4
 8003ee4:	080049c4 	.word	0x080049c4
 8003ee8:	080049c4 	.word	0x080049c4
 8003eec:	080049c8 	.word	0x080049c8

08003ef0 <memset>:
 8003ef0:	4402      	add	r2, r0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	f803 1b01 	strb.w	r1, [r3], #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <siprintf>:
 8003f00:	b40e      	push	{r1, r2, r3}
 8003f02:	b500      	push	{lr}
 8003f04:	b09c      	sub	sp, #112	; 0x70
 8003f06:	ab1d      	add	r3, sp, #116	; 0x74
 8003f08:	9002      	str	r0, [sp, #8]
 8003f0a:	9006      	str	r0, [sp, #24]
 8003f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f10:	4809      	ldr	r0, [pc, #36]	; (8003f38 <siprintf+0x38>)
 8003f12:	9107      	str	r1, [sp, #28]
 8003f14:	9104      	str	r1, [sp, #16]
 8003f16:	4909      	ldr	r1, [pc, #36]	; (8003f3c <siprintf+0x3c>)
 8003f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f1c:	9105      	str	r1, [sp, #20]
 8003f1e:	6800      	ldr	r0, [r0, #0]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	a902      	add	r1, sp, #8
 8003f24:	f000 f866 	bl	8003ff4 <_svfiprintf_r>
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	b01c      	add	sp, #112	; 0x70
 8003f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f34:	b003      	add	sp, #12
 8003f36:	4770      	bx	lr
 8003f38:	2000000c 	.word	0x2000000c
 8003f3c:	ffff0208 	.word	0xffff0208

08003f40 <__ssputs_r>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	688e      	ldr	r6, [r1, #8]
 8003f46:	429e      	cmp	r6, r3
 8003f48:	4682      	mov	sl, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4690      	mov	r8, r2
 8003f4e:	4699      	mov	r9, r3
 8003f50:	d837      	bhi.n	8003fc2 <__ssputs_r+0x82>
 8003f52:	898a      	ldrh	r2, [r1, #12]
 8003f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f58:	d031      	beq.n	8003fbe <__ssputs_r+0x7e>
 8003f5a:	6825      	ldr	r5, [r4, #0]
 8003f5c:	6909      	ldr	r1, [r1, #16]
 8003f5e:	1a6f      	subs	r7, r5, r1
 8003f60:	6965      	ldr	r5, [r4, #20]
 8003f62:	2302      	movs	r3, #2
 8003f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f68:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f6c:	f109 0301 	add.w	r3, r9, #1
 8003f70:	443b      	add	r3, r7
 8003f72:	429d      	cmp	r5, r3
 8003f74:	bf38      	it	cc
 8003f76:	461d      	movcc	r5, r3
 8003f78:	0553      	lsls	r3, r2, #21
 8003f7a:	d530      	bpl.n	8003fde <__ssputs_r+0x9e>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f000 fb2b 	bl	80045d8 <_malloc_r>
 8003f82:	4606      	mov	r6, r0
 8003f84:	b950      	cbnz	r0, 8003f9c <__ssputs_r+0x5c>
 8003f86:	230c      	movs	r3, #12
 8003f88:	f8ca 3000 	str.w	r3, [sl]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	463a      	mov	r2, r7
 8003f9e:	6921      	ldr	r1, [r4, #16]
 8003fa0:	f000 faa8 	bl	80044f4 <memcpy>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	6126      	str	r6, [r4, #16]
 8003fb2:	6165      	str	r5, [r4, #20]
 8003fb4:	443e      	add	r6, r7
 8003fb6:	1bed      	subs	r5, r5, r7
 8003fb8:	6026      	str	r6, [r4, #0]
 8003fba:	60a5      	str	r5, [r4, #8]
 8003fbc:	464e      	mov	r6, r9
 8003fbe:	454e      	cmp	r6, r9
 8003fc0:	d900      	bls.n	8003fc4 <__ssputs_r+0x84>
 8003fc2:	464e      	mov	r6, r9
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	6820      	ldr	r0, [r4, #0]
 8003fca:	f000 fa9e 	bl	800450a <memmove>
 8003fce:	68a3      	ldr	r3, [r4, #8]
 8003fd0:	1b9b      	subs	r3, r3, r6
 8003fd2:	60a3      	str	r3, [r4, #8]
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	441e      	add	r6, r3
 8003fd8:	6026      	str	r6, [r4, #0]
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e7dc      	b.n	8003f98 <__ssputs_r+0x58>
 8003fde:	462a      	mov	r2, r5
 8003fe0:	f000 fb54 	bl	800468c <_realloc_r>
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1e2      	bne.n	8003fb0 <__ssputs_r+0x70>
 8003fea:	6921      	ldr	r1, [r4, #16]
 8003fec:	4650      	mov	r0, sl
 8003fee:	f000 faa5 	bl	800453c <_free_r>
 8003ff2:	e7c8      	b.n	8003f86 <__ssputs_r+0x46>

08003ff4 <_svfiprintf_r>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	461d      	mov	r5, r3
 8003ffa:	898b      	ldrh	r3, [r1, #12]
 8003ffc:	061f      	lsls	r7, r3, #24
 8003ffe:	b09d      	sub	sp, #116	; 0x74
 8004000:	4680      	mov	r8, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4616      	mov	r6, r2
 8004006:	d50f      	bpl.n	8004028 <_svfiprintf_r+0x34>
 8004008:	690b      	ldr	r3, [r1, #16]
 800400a:	b96b      	cbnz	r3, 8004028 <_svfiprintf_r+0x34>
 800400c:	2140      	movs	r1, #64	; 0x40
 800400e:	f000 fae3 	bl	80045d8 <_malloc_r>
 8004012:	6020      	str	r0, [r4, #0]
 8004014:	6120      	str	r0, [r4, #16]
 8004016:	b928      	cbnz	r0, 8004024 <_svfiprintf_r+0x30>
 8004018:	230c      	movs	r3, #12
 800401a:	f8c8 3000 	str.w	r3, [r8]
 800401e:	f04f 30ff 	mov.w	r0, #4294967295
 8004022:	e0c8      	b.n	80041b6 <_svfiprintf_r+0x1c2>
 8004024:	2340      	movs	r3, #64	; 0x40
 8004026:	6163      	str	r3, [r4, #20]
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	2320      	movs	r3, #32
 800402e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004032:	2330      	movs	r3, #48	; 0x30
 8004034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004038:	9503      	str	r5, [sp, #12]
 800403a:	f04f 0b01 	mov.w	fp, #1
 800403e:	4637      	mov	r7, r6
 8004040:	463d      	mov	r5, r7
 8004042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004046:	b10b      	cbz	r3, 800404c <_svfiprintf_r+0x58>
 8004048:	2b25      	cmp	r3, #37	; 0x25
 800404a:	d13e      	bne.n	80040ca <_svfiprintf_r+0xd6>
 800404c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004050:	d00b      	beq.n	800406a <_svfiprintf_r+0x76>
 8004052:	4653      	mov	r3, sl
 8004054:	4632      	mov	r2, r6
 8004056:	4621      	mov	r1, r4
 8004058:	4640      	mov	r0, r8
 800405a:	f7ff ff71 	bl	8003f40 <__ssputs_r>
 800405e:	3001      	adds	r0, #1
 8004060:	f000 80a4 	beq.w	80041ac <_svfiprintf_r+0x1b8>
 8004064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004066:	4453      	add	r3, sl
 8004068:	9309      	str	r3, [sp, #36]	; 0x24
 800406a:	783b      	ldrb	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 809d 	beq.w	80041ac <_svfiprintf_r+0x1b8>
 8004072:	2300      	movs	r3, #0
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	9307      	str	r3, [sp, #28]
 8004080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004084:	931a      	str	r3, [sp, #104]	; 0x68
 8004086:	462f      	mov	r7, r5
 8004088:	2205      	movs	r2, #5
 800408a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800408e:	4850      	ldr	r0, [pc, #320]	; (80041d0 <_svfiprintf_r+0x1dc>)
 8004090:	f7fc f89e 	bl	80001d0 <memchr>
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	b9d0      	cbnz	r0, 80040ce <_svfiprintf_r+0xda>
 8004098:	06d9      	lsls	r1, r3, #27
 800409a:	bf44      	itt	mi
 800409c:	2220      	movmi	r2, #32
 800409e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040a2:	071a      	lsls	r2, r3, #28
 80040a4:	bf44      	itt	mi
 80040a6:	222b      	movmi	r2, #43	; 0x2b
 80040a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ac:	782a      	ldrb	r2, [r5, #0]
 80040ae:	2a2a      	cmp	r2, #42	; 0x2a
 80040b0:	d015      	beq.n	80040de <_svfiprintf_r+0xea>
 80040b2:	9a07      	ldr	r2, [sp, #28]
 80040b4:	462f      	mov	r7, r5
 80040b6:	2000      	movs	r0, #0
 80040b8:	250a      	movs	r5, #10
 80040ba:	4639      	mov	r1, r7
 80040bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c0:	3b30      	subs	r3, #48	; 0x30
 80040c2:	2b09      	cmp	r3, #9
 80040c4:	d94d      	bls.n	8004162 <_svfiprintf_r+0x16e>
 80040c6:	b1b8      	cbz	r0, 80040f8 <_svfiprintf_r+0x104>
 80040c8:	e00f      	b.n	80040ea <_svfiprintf_r+0xf6>
 80040ca:	462f      	mov	r7, r5
 80040cc:	e7b8      	b.n	8004040 <_svfiprintf_r+0x4c>
 80040ce:	4a40      	ldr	r2, [pc, #256]	; (80041d0 <_svfiprintf_r+0x1dc>)
 80040d0:	1a80      	subs	r0, r0, r2
 80040d2:	fa0b f000 	lsl.w	r0, fp, r0
 80040d6:	4318      	orrs	r0, r3
 80040d8:	9004      	str	r0, [sp, #16]
 80040da:	463d      	mov	r5, r7
 80040dc:	e7d3      	b.n	8004086 <_svfiprintf_r+0x92>
 80040de:	9a03      	ldr	r2, [sp, #12]
 80040e0:	1d11      	adds	r1, r2, #4
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	9103      	str	r1, [sp, #12]
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	db01      	blt.n	80040ee <_svfiprintf_r+0xfa>
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	e004      	b.n	80040f8 <_svfiprintf_r+0x104>
 80040ee:	4252      	negs	r2, r2
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	9207      	str	r2, [sp, #28]
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	783b      	ldrb	r3, [r7, #0]
 80040fa:	2b2e      	cmp	r3, #46	; 0x2e
 80040fc:	d10c      	bne.n	8004118 <_svfiprintf_r+0x124>
 80040fe:	787b      	ldrb	r3, [r7, #1]
 8004100:	2b2a      	cmp	r3, #42	; 0x2a
 8004102:	d133      	bne.n	800416c <_svfiprintf_r+0x178>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	9203      	str	r2, [sp, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	bfb8      	it	lt
 8004110:	f04f 33ff 	movlt.w	r3, #4294967295
 8004114:	3702      	adds	r7, #2
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	4d2e      	ldr	r5, [pc, #184]	; (80041d4 <_svfiprintf_r+0x1e0>)
 800411a:	7839      	ldrb	r1, [r7, #0]
 800411c:	2203      	movs	r2, #3
 800411e:	4628      	mov	r0, r5
 8004120:	f7fc f856 	bl	80001d0 <memchr>
 8004124:	b138      	cbz	r0, 8004136 <_svfiprintf_r+0x142>
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	1b40      	subs	r0, r0, r5
 800412a:	fa03 f000 	lsl.w	r0, r3, r0
 800412e:	9b04      	ldr	r3, [sp, #16]
 8004130:	4303      	orrs	r3, r0
 8004132:	3701      	adds	r7, #1
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	7839      	ldrb	r1, [r7, #0]
 8004138:	4827      	ldr	r0, [pc, #156]	; (80041d8 <_svfiprintf_r+0x1e4>)
 800413a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800413e:	2206      	movs	r2, #6
 8004140:	1c7e      	adds	r6, r7, #1
 8004142:	f7fc f845 	bl	80001d0 <memchr>
 8004146:	2800      	cmp	r0, #0
 8004148:	d038      	beq.n	80041bc <_svfiprintf_r+0x1c8>
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <_svfiprintf_r+0x1e8>)
 800414c:	bb13      	cbnz	r3, 8004194 <_svfiprintf_r+0x1a0>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	3307      	adds	r3, #7
 8004152:	f023 0307 	bic.w	r3, r3, #7
 8004156:	3308      	adds	r3, #8
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415c:	444b      	add	r3, r9
 800415e:	9309      	str	r3, [sp, #36]	; 0x24
 8004160:	e76d      	b.n	800403e <_svfiprintf_r+0x4a>
 8004162:	fb05 3202 	mla	r2, r5, r2, r3
 8004166:	2001      	movs	r0, #1
 8004168:	460f      	mov	r7, r1
 800416a:	e7a6      	b.n	80040ba <_svfiprintf_r+0xc6>
 800416c:	2300      	movs	r3, #0
 800416e:	3701      	adds	r7, #1
 8004170:	9305      	str	r3, [sp, #20]
 8004172:	4619      	mov	r1, r3
 8004174:	250a      	movs	r5, #10
 8004176:	4638      	mov	r0, r7
 8004178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800417c:	3a30      	subs	r2, #48	; 0x30
 800417e:	2a09      	cmp	r2, #9
 8004180:	d903      	bls.n	800418a <_svfiprintf_r+0x196>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0c8      	beq.n	8004118 <_svfiprintf_r+0x124>
 8004186:	9105      	str	r1, [sp, #20]
 8004188:	e7c6      	b.n	8004118 <_svfiprintf_r+0x124>
 800418a:	fb05 2101 	mla	r1, r5, r1, r2
 800418e:	2301      	movs	r3, #1
 8004190:	4607      	mov	r7, r0
 8004192:	e7f0      	b.n	8004176 <_svfiprintf_r+0x182>
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	4622      	mov	r2, r4
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <_svfiprintf_r+0x1ec>)
 800419c:	a904      	add	r1, sp, #16
 800419e:	4640      	mov	r0, r8
 80041a0:	f3af 8000 	nop.w
 80041a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041a8:	4681      	mov	r9, r0
 80041aa:	d1d6      	bne.n	800415a <_svfiprintf_r+0x166>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	065b      	lsls	r3, r3, #25
 80041b0:	f53f af35 	bmi.w	800401e <_svfiprintf_r+0x2a>
 80041b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b6:	b01d      	add	sp, #116	; 0x74
 80041b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041bc:	ab03      	add	r3, sp, #12
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4622      	mov	r2, r4
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <_svfiprintf_r+0x1ec>)
 80041c4:	a904      	add	r1, sp, #16
 80041c6:	4640      	mov	r0, r8
 80041c8:	f000 f882 	bl	80042d0 <_printf_i>
 80041cc:	e7ea      	b.n	80041a4 <_svfiprintf_r+0x1b0>
 80041ce:	bf00      	nop
 80041d0:	08004990 	.word	0x08004990
 80041d4:	08004996 	.word	0x08004996
 80041d8:	0800499a 	.word	0x0800499a
 80041dc:	00000000 	.word	0x00000000
 80041e0:	08003f41 	.word	0x08003f41

080041e4 <_printf_common>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	4691      	mov	r9, r2
 80041ea:	461f      	mov	r7, r3
 80041ec:	688a      	ldr	r2, [r1, #8]
 80041ee:	690b      	ldr	r3, [r1, #16]
 80041f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bfb8      	it	lt
 80041f8:	4613      	movlt	r3, r2
 80041fa:	f8c9 3000 	str.w	r3, [r9]
 80041fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004202:	4606      	mov	r6, r0
 8004204:	460c      	mov	r4, r1
 8004206:	b112      	cbz	r2, 800420e <_printf_common+0x2a>
 8004208:	3301      	adds	r3, #1
 800420a:	f8c9 3000 	str.w	r3, [r9]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004218:	3302      	addmi	r3, #2
 800421a:	f8c9 3000 	strmi.w	r3, [r9]
 800421e:	6825      	ldr	r5, [r4, #0]
 8004220:	f015 0506 	ands.w	r5, r5, #6
 8004224:	d107      	bne.n	8004236 <_printf_common+0x52>
 8004226:	f104 0a19 	add.w	sl, r4, #25
 800422a:	68e3      	ldr	r3, [r4, #12]
 800422c:	f8d9 2000 	ldr.w	r2, [r9]
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	42ab      	cmp	r3, r5
 8004234:	dc28      	bgt.n	8004288 <_printf_common+0xa4>
 8004236:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	3300      	adds	r3, #0
 800423e:	bf18      	it	ne
 8004240:	2301      	movne	r3, #1
 8004242:	0692      	lsls	r2, r2, #26
 8004244:	d42d      	bmi.n	80042a2 <_printf_common+0xbe>
 8004246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424a:	4639      	mov	r1, r7
 800424c:	4630      	mov	r0, r6
 800424e:	47c0      	blx	r8
 8004250:	3001      	adds	r0, #1
 8004252:	d020      	beq.n	8004296 <_printf_common+0xb2>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	68e5      	ldr	r5, [r4, #12]
 8004258:	f8d9 2000 	ldr.w	r2, [r9]
 800425c:	f003 0306 	and.w	r3, r3, #6
 8004260:	2b04      	cmp	r3, #4
 8004262:	bf08      	it	eq
 8004264:	1aad      	subeq	r5, r5, r2
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	bf0c      	ite	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	2500      	movne	r5, #0
 8004272:	4293      	cmp	r3, r2
 8004274:	bfc4      	itt	gt
 8004276:	1a9b      	subgt	r3, r3, r2
 8004278:	18ed      	addgt	r5, r5, r3
 800427a:	f04f 0900 	mov.w	r9, #0
 800427e:	341a      	adds	r4, #26
 8004280:	454d      	cmp	r5, r9
 8004282:	d11a      	bne.n	80042ba <_printf_common+0xd6>
 8004284:	2000      	movs	r0, #0
 8004286:	e008      	b.n	800429a <_printf_common+0xb6>
 8004288:	2301      	movs	r3, #1
 800428a:	4652      	mov	r2, sl
 800428c:	4639      	mov	r1, r7
 800428e:	4630      	mov	r0, r6
 8004290:	47c0      	blx	r8
 8004292:	3001      	adds	r0, #1
 8004294:	d103      	bne.n	800429e <_printf_common+0xba>
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429e:	3501      	adds	r5, #1
 80042a0:	e7c3      	b.n	800422a <_printf_common+0x46>
 80042a2:	18e1      	adds	r1, r4, r3
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	2030      	movs	r0, #48	; 0x30
 80042a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ac:	4422      	add	r2, r4
 80042ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b6:	3302      	adds	r3, #2
 80042b8:	e7c5      	b.n	8004246 <_printf_common+0x62>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4622      	mov	r2, r4
 80042be:	4639      	mov	r1, r7
 80042c0:	4630      	mov	r0, r6
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d0e6      	beq.n	8004296 <_printf_common+0xb2>
 80042c8:	f109 0901 	add.w	r9, r9, #1
 80042cc:	e7d8      	b.n	8004280 <_printf_common+0x9c>
	...

080042d0 <_printf_i>:
 80042d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042d8:	460c      	mov	r4, r1
 80042da:	7e09      	ldrb	r1, [r1, #24]
 80042dc:	b085      	sub	sp, #20
 80042de:	296e      	cmp	r1, #110	; 0x6e
 80042e0:	4617      	mov	r7, r2
 80042e2:	4606      	mov	r6, r0
 80042e4:	4698      	mov	r8, r3
 80042e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042e8:	f000 80b3 	beq.w	8004452 <_printf_i+0x182>
 80042ec:	d822      	bhi.n	8004334 <_printf_i+0x64>
 80042ee:	2963      	cmp	r1, #99	; 0x63
 80042f0:	d036      	beq.n	8004360 <_printf_i+0x90>
 80042f2:	d80a      	bhi.n	800430a <_printf_i+0x3a>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	f000 80b9 	beq.w	800446c <_printf_i+0x19c>
 80042fa:	2958      	cmp	r1, #88	; 0x58
 80042fc:	f000 8083 	beq.w	8004406 <_printf_i+0x136>
 8004300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004304:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004308:	e032      	b.n	8004370 <_printf_i+0xa0>
 800430a:	2964      	cmp	r1, #100	; 0x64
 800430c:	d001      	beq.n	8004312 <_printf_i+0x42>
 800430e:	2969      	cmp	r1, #105	; 0x69
 8004310:	d1f6      	bne.n	8004300 <_printf_i+0x30>
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	0605      	lsls	r5, r0, #24
 8004318:	f103 0104 	add.w	r1, r3, #4
 800431c:	d52a      	bpl.n	8004374 <_printf_i+0xa4>
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da03      	bge.n	800432e <_printf_i+0x5e>
 8004326:	222d      	movs	r2, #45	; 0x2d
 8004328:	425b      	negs	r3, r3
 800432a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800432e:	486f      	ldr	r0, [pc, #444]	; (80044ec <_printf_i+0x21c>)
 8004330:	220a      	movs	r2, #10
 8004332:	e039      	b.n	80043a8 <_printf_i+0xd8>
 8004334:	2973      	cmp	r1, #115	; 0x73
 8004336:	f000 809d 	beq.w	8004474 <_printf_i+0x1a4>
 800433a:	d808      	bhi.n	800434e <_printf_i+0x7e>
 800433c:	296f      	cmp	r1, #111	; 0x6f
 800433e:	d020      	beq.n	8004382 <_printf_i+0xb2>
 8004340:	2970      	cmp	r1, #112	; 0x70
 8004342:	d1dd      	bne.n	8004300 <_printf_i+0x30>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	f043 0320 	orr.w	r3, r3, #32
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	e003      	b.n	8004356 <_printf_i+0x86>
 800434e:	2975      	cmp	r1, #117	; 0x75
 8004350:	d017      	beq.n	8004382 <_printf_i+0xb2>
 8004352:	2978      	cmp	r1, #120	; 0x78
 8004354:	d1d4      	bne.n	8004300 <_printf_i+0x30>
 8004356:	2378      	movs	r3, #120	; 0x78
 8004358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800435c:	4864      	ldr	r0, [pc, #400]	; (80044f0 <_printf_i+0x220>)
 800435e:	e055      	b.n	800440c <_printf_i+0x13c>
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	1d19      	adds	r1, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6011      	str	r1, [r2, #0]
 8004368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800436c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004370:	2301      	movs	r3, #1
 8004372:	e08c      	b.n	800448e <_printf_i+0x1be>
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6011      	str	r1, [r2, #0]
 8004378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800437c:	bf18      	it	ne
 800437e:	b21b      	sxthne	r3, r3
 8004380:	e7cf      	b.n	8004322 <_printf_i+0x52>
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	6825      	ldr	r5, [r4, #0]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6010      	str	r0, [r2, #0]
 800438a:	0628      	lsls	r0, r5, #24
 800438c:	d501      	bpl.n	8004392 <_printf_i+0xc2>
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	e002      	b.n	8004398 <_printf_i+0xc8>
 8004392:	0668      	lsls	r0, r5, #25
 8004394:	d5fb      	bpl.n	800438e <_printf_i+0xbe>
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	4854      	ldr	r0, [pc, #336]	; (80044ec <_printf_i+0x21c>)
 800439a:	296f      	cmp	r1, #111	; 0x6f
 800439c:	bf14      	ite	ne
 800439e:	220a      	movne	r2, #10
 80043a0:	2208      	moveq	r2, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043a8:	6865      	ldr	r5, [r4, #4]
 80043aa:	60a5      	str	r5, [r4, #8]
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	f2c0 8095 	blt.w	80044dc <_printf_i+0x20c>
 80043b2:	6821      	ldr	r1, [r4, #0]
 80043b4:	f021 0104 	bic.w	r1, r1, #4
 80043b8:	6021      	str	r1, [r4, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d13d      	bne.n	800443a <_printf_i+0x16a>
 80043be:	2d00      	cmp	r5, #0
 80043c0:	f040 808e 	bne.w	80044e0 <_printf_i+0x210>
 80043c4:	4665      	mov	r5, ip
 80043c6:	2a08      	cmp	r2, #8
 80043c8:	d10b      	bne.n	80043e2 <_printf_i+0x112>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	07db      	lsls	r3, r3, #31
 80043ce:	d508      	bpl.n	80043e2 <_printf_i+0x112>
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	6862      	ldr	r2, [r4, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	bfde      	ittt	le
 80043d8:	2330      	movle	r3, #48	; 0x30
 80043da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043e2:	ebac 0305 	sub.w	r3, ip, r5
 80043e6:	6123      	str	r3, [r4, #16]
 80043e8:	f8cd 8000 	str.w	r8, [sp]
 80043ec:	463b      	mov	r3, r7
 80043ee:	aa03      	add	r2, sp, #12
 80043f0:	4621      	mov	r1, r4
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7ff fef6 	bl	80041e4 <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d14d      	bne.n	8004498 <_printf_i+0x1c8>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b005      	add	sp, #20
 8004402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004406:	4839      	ldr	r0, [pc, #228]	; (80044ec <_printf_i+0x21c>)
 8004408:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	1d1d      	adds	r5, r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6015      	str	r5, [r2, #0]
 8004416:	060a      	lsls	r2, r1, #24
 8004418:	d50b      	bpl.n	8004432 <_printf_i+0x162>
 800441a:	07ca      	lsls	r2, r1, #31
 800441c:	bf44      	itt	mi
 800441e:	f041 0120 	orrmi.w	r1, r1, #32
 8004422:	6021      	strmi	r1, [r4, #0]
 8004424:	b91b      	cbnz	r3, 800442e <_printf_i+0x15e>
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	f022 0220 	bic.w	r2, r2, #32
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	e7b7      	b.n	80043a2 <_printf_i+0xd2>
 8004432:	064d      	lsls	r5, r1, #25
 8004434:	bf48      	it	mi
 8004436:	b29b      	uxthmi	r3, r3
 8004438:	e7ef      	b.n	800441a <_printf_i+0x14a>
 800443a:	4665      	mov	r5, ip
 800443c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004440:	fb02 3311 	mls	r3, r2, r1, r3
 8004444:	5cc3      	ldrb	r3, [r0, r3]
 8004446:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800444a:	460b      	mov	r3, r1
 800444c:	2900      	cmp	r1, #0
 800444e:	d1f5      	bne.n	800443c <_printf_i+0x16c>
 8004450:	e7b9      	b.n	80043c6 <_printf_i+0xf6>
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	6825      	ldr	r5, [r4, #0]
 8004456:	6961      	ldr	r1, [r4, #20]
 8004458:	1d18      	adds	r0, r3, #4
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	0628      	lsls	r0, r5, #24
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	d501      	bpl.n	8004466 <_printf_i+0x196>
 8004462:	6019      	str	r1, [r3, #0]
 8004464:	e002      	b.n	800446c <_printf_i+0x19c>
 8004466:	066a      	lsls	r2, r5, #25
 8004468:	d5fb      	bpl.n	8004462 <_printf_i+0x192>
 800446a:	8019      	strh	r1, [r3, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	4665      	mov	r5, ip
 8004472:	e7b9      	b.n	80043e8 <_printf_i+0x118>
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	1d19      	adds	r1, r3, #4
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	681d      	ldr	r5, [r3, #0]
 800447c:	6862      	ldr	r2, [r4, #4]
 800447e:	2100      	movs	r1, #0
 8004480:	4628      	mov	r0, r5
 8004482:	f7fb fea5 	bl	80001d0 <memchr>
 8004486:	b108      	cbz	r0, 800448c <_printf_i+0x1bc>
 8004488:	1b40      	subs	r0, r0, r5
 800448a:	6060      	str	r0, [r4, #4]
 800448c:	6863      	ldr	r3, [r4, #4]
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	2300      	movs	r3, #0
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004496:	e7a7      	b.n	80043e8 <_printf_i+0x118>
 8004498:	6923      	ldr	r3, [r4, #16]
 800449a:	462a      	mov	r2, r5
 800449c:	4639      	mov	r1, r7
 800449e:	4630      	mov	r0, r6
 80044a0:	47c0      	blx	r8
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0aa      	beq.n	80043fc <_printf_i+0x12c>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	079b      	lsls	r3, r3, #30
 80044aa:	d413      	bmi.n	80044d4 <_printf_i+0x204>
 80044ac:	68e0      	ldr	r0, [r4, #12]
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	4298      	cmp	r0, r3
 80044b2:	bfb8      	it	lt
 80044b4:	4618      	movlt	r0, r3
 80044b6:	e7a3      	b.n	8004400 <_printf_i+0x130>
 80044b8:	2301      	movs	r3, #1
 80044ba:	464a      	mov	r2, r9
 80044bc:	4639      	mov	r1, r7
 80044be:	4630      	mov	r0, r6
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d09a      	beq.n	80043fc <_printf_i+0x12c>
 80044c6:	3501      	adds	r5, #1
 80044c8:	68e3      	ldr	r3, [r4, #12]
 80044ca:	9a03      	ldr	r2, [sp, #12]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	42ab      	cmp	r3, r5
 80044d0:	dcf2      	bgt.n	80044b8 <_printf_i+0x1e8>
 80044d2:	e7eb      	b.n	80044ac <_printf_i+0x1dc>
 80044d4:	2500      	movs	r5, #0
 80044d6:	f104 0919 	add.w	r9, r4, #25
 80044da:	e7f5      	b.n	80044c8 <_printf_i+0x1f8>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ac      	bne.n	800443a <_printf_i+0x16a>
 80044e0:	7803      	ldrb	r3, [r0, #0]
 80044e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ea:	e76c      	b.n	80043c6 <_printf_i+0xf6>
 80044ec:	080049a1 	.word	0x080049a1
 80044f0:	080049b2 	.word	0x080049b2

080044f4 <memcpy>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	1e43      	subs	r3, r0, #1
 80044f8:	440a      	add	r2, r1
 80044fa:	4291      	cmp	r1, r2
 80044fc:	d100      	bne.n	8004500 <memcpy+0xc>
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004508:	e7f7      	b.n	80044fa <memcpy+0x6>

0800450a <memmove>:
 800450a:	4288      	cmp	r0, r1
 800450c:	b510      	push	{r4, lr}
 800450e:	eb01 0302 	add.w	r3, r1, r2
 8004512:	d807      	bhi.n	8004524 <memmove+0x1a>
 8004514:	1e42      	subs	r2, r0, #1
 8004516:	4299      	cmp	r1, r3
 8004518:	d00a      	beq.n	8004530 <memmove+0x26>
 800451a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800451e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004522:	e7f8      	b.n	8004516 <memmove+0xc>
 8004524:	4283      	cmp	r3, r0
 8004526:	d9f5      	bls.n	8004514 <memmove+0xa>
 8004528:	1881      	adds	r1, r0, r2
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	42d3      	cmn	r3, r2
 800452e:	d100      	bne.n	8004532 <memmove+0x28>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004536:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800453a:	e7f7      	b.n	800452c <memmove+0x22>

0800453c <_free_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4605      	mov	r5, r0
 8004540:	2900      	cmp	r1, #0
 8004542:	d045      	beq.n	80045d0 <_free_r+0x94>
 8004544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004548:	1f0c      	subs	r4, r1, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfb8      	it	lt
 800454e:	18e4      	addlt	r4, r4, r3
 8004550:	f000 f8d2 	bl	80046f8 <__malloc_lock>
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <_free_r+0x98>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	4610      	mov	r0, r2
 800455a:	b933      	cbnz	r3, 800456a <_free_r+0x2e>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	4628      	mov	r0, r5
 8004562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004566:	f000 b8c8 	b.w	80046fa <__malloc_unlock>
 800456a:	42a3      	cmp	r3, r4
 800456c:	d90c      	bls.n	8004588 <_free_r+0x4c>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	1862      	adds	r2, r4, r1
 8004572:	4293      	cmp	r3, r2
 8004574:	bf04      	itt	eq
 8004576:	681a      	ldreq	r2, [r3, #0]
 8004578:	685b      	ldreq	r3, [r3, #4]
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	bf04      	itt	eq
 800457e:	1852      	addeq	r2, r2, r1
 8004580:	6022      	streq	r2, [r4, #0]
 8004582:	6004      	str	r4, [r0, #0]
 8004584:	e7ec      	b.n	8004560 <_free_r+0x24>
 8004586:	4613      	mov	r3, r2
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	b10a      	cbz	r2, 8004590 <_free_r+0x54>
 800458c:	42a2      	cmp	r2, r4
 800458e:	d9fa      	bls.n	8004586 <_free_r+0x4a>
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	1858      	adds	r0, r3, r1
 8004594:	42a0      	cmp	r0, r4
 8004596:	d10b      	bne.n	80045b0 <_free_r+0x74>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	4401      	add	r1, r0
 800459c:	1858      	adds	r0, r3, r1
 800459e:	4282      	cmp	r2, r0
 80045a0:	6019      	str	r1, [r3, #0]
 80045a2:	d1dd      	bne.n	8004560 <_free_r+0x24>
 80045a4:	6810      	ldr	r0, [r2, #0]
 80045a6:	6852      	ldr	r2, [r2, #4]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	4401      	add	r1, r0
 80045ac:	6019      	str	r1, [r3, #0]
 80045ae:	e7d7      	b.n	8004560 <_free_r+0x24>
 80045b0:	d902      	bls.n	80045b8 <_free_r+0x7c>
 80045b2:	230c      	movs	r3, #12
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	e7d3      	b.n	8004560 <_free_r+0x24>
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	1821      	adds	r1, r4, r0
 80045bc:	428a      	cmp	r2, r1
 80045be:	bf04      	itt	eq
 80045c0:	6811      	ldreq	r1, [r2, #0]
 80045c2:	6852      	ldreq	r2, [r2, #4]
 80045c4:	6062      	str	r2, [r4, #4]
 80045c6:	bf04      	itt	eq
 80045c8:	1809      	addeq	r1, r1, r0
 80045ca:	6021      	streq	r1, [r4, #0]
 80045cc:	605c      	str	r4, [r3, #4]
 80045ce:	e7c7      	b.n	8004560 <_free_r+0x24>
 80045d0:	bd38      	pop	{r3, r4, r5, pc}
 80045d2:	bf00      	nop
 80045d4:	20000090 	.word	0x20000090

080045d8 <_malloc_r>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	1ccd      	adds	r5, r1, #3
 80045dc:	f025 0503 	bic.w	r5, r5, #3
 80045e0:	3508      	adds	r5, #8
 80045e2:	2d0c      	cmp	r5, #12
 80045e4:	bf38      	it	cc
 80045e6:	250c      	movcc	r5, #12
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	4606      	mov	r6, r0
 80045ec:	db01      	blt.n	80045f2 <_malloc_r+0x1a>
 80045ee:	42a9      	cmp	r1, r5
 80045f0:	d903      	bls.n	80045fa <_malloc_r+0x22>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	2000      	movs	r0, #0
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
 80045fa:	f000 f87d 	bl	80046f8 <__malloc_lock>
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <_malloc_r+0xac>)
 8004600:	6814      	ldr	r4, [r2, #0]
 8004602:	4621      	mov	r1, r4
 8004604:	b991      	cbnz	r1, 800462c <_malloc_r+0x54>
 8004606:	4c20      	ldr	r4, [pc, #128]	; (8004688 <_malloc_r+0xb0>)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	b91b      	cbnz	r3, 8004614 <_malloc_r+0x3c>
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f863 	bl	80046d8 <_sbrk_r>
 8004612:	6020      	str	r0, [r4, #0]
 8004614:	4629      	mov	r1, r5
 8004616:	4630      	mov	r0, r6
 8004618:	f000 f85e 	bl	80046d8 <_sbrk_r>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d124      	bne.n	800466a <_malloc_r+0x92>
 8004620:	230c      	movs	r3, #12
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	4630      	mov	r0, r6
 8004626:	f000 f868 	bl	80046fa <__malloc_unlock>
 800462a:	e7e4      	b.n	80045f6 <_malloc_r+0x1e>
 800462c:	680b      	ldr	r3, [r1, #0]
 800462e:	1b5b      	subs	r3, r3, r5
 8004630:	d418      	bmi.n	8004664 <_malloc_r+0x8c>
 8004632:	2b0b      	cmp	r3, #11
 8004634:	d90f      	bls.n	8004656 <_malloc_r+0x7e>
 8004636:	600b      	str	r3, [r1, #0]
 8004638:	50cd      	str	r5, [r1, r3]
 800463a:	18cc      	adds	r4, r1, r3
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f85c 	bl	80046fa <__malloc_unlock>
 8004642:	f104 000b 	add.w	r0, r4, #11
 8004646:	1d23      	adds	r3, r4, #4
 8004648:	f020 0007 	bic.w	r0, r0, #7
 800464c:	1ac3      	subs	r3, r0, r3
 800464e:	d0d3      	beq.n	80045f8 <_malloc_r+0x20>
 8004650:	425a      	negs	r2, r3
 8004652:	50e2      	str	r2, [r4, r3]
 8004654:	e7d0      	b.n	80045f8 <_malloc_r+0x20>
 8004656:	428c      	cmp	r4, r1
 8004658:	684b      	ldr	r3, [r1, #4]
 800465a:	bf16      	itet	ne
 800465c:	6063      	strne	r3, [r4, #4]
 800465e:	6013      	streq	r3, [r2, #0]
 8004660:	460c      	movne	r4, r1
 8004662:	e7eb      	b.n	800463c <_malloc_r+0x64>
 8004664:	460c      	mov	r4, r1
 8004666:	6849      	ldr	r1, [r1, #4]
 8004668:	e7cc      	b.n	8004604 <_malloc_r+0x2c>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d005      	beq.n	8004680 <_malloc_r+0xa8>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f82e 	bl	80046d8 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d0cf      	beq.n	8004620 <_malloc_r+0x48>
 8004680:	6025      	str	r5, [r4, #0]
 8004682:	e7db      	b.n	800463c <_malloc_r+0x64>
 8004684:	20000090 	.word	0x20000090
 8004688:	20000094 	.word	0x20000094

0800468c <_realloc_r>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	4607      	mov	r7, r0
 8004690:	4614      	mov	r4, r2
 8004692:	460e      	mov	r6, r1
 8004694:	b921      	cbnz	r1, 80046a0 <_realloc_r+0x14>
 8004696:	4611      	mov	r1, r2
 8004698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800469c:	f7ff bf9c 	b.w	80045d8 <_malloc_r>
 80046a0:	b922      	cbnz	r2, 80046ac <_realloc_r+0x20>
 80046a2:	f7ff ff4b 	bl	800453c <_free_r>
 80046a6:	4625      	mov	r5, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ac:	f000 f826 	bl	80046fc <_malloc_usable_size_r>
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d20f      	bcs.n	80046d4 <_realloc_r+0x48>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4638      	mov	r0, r7
 80046b8:	f7ff ff8e 	bl	80045d8 <_malloc_r>
 80046bc:	4605      	mov	r5, r0
 80046be:	2800      	cmp	r0, #0
 80046c0:	d0f2      	beq.n	80046a8 <_realloc_r+0x1c>
 80046c2:	4631      	mov	r1, r6
 80046c4:	4622      	mov	r2, r4
 80046c6:	f7ff ff15 	bl	80044f4 <memcpy>
 80046ca:	4631      	mov	r1, r6
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7ff ff35 	bl	800453c <_free_r>
 80046d2:	e7e9      	b.n	80046a8 <_realloc_r+0x1c>
 80046d4:	4635      	mov	r5, r6
 80046d6:	e7e7      	b.n	80046a8 <_realloc_r+0x1c>

080046d8 <_sbrk_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4c06      	ldr	r4, [pc, #24]	; (80046f4 <_sbrk_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4605      	mov	r5, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	f7ff fa3a 	bl	8003b5c <_sbrk>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_sbrk_r+0x1a>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_sbrk_r+0x1a>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200001d4 	.word	0x200001d4

080046f8 <__malloc_lock>:
 80046f8:	4770      	bx	lr

080046fa <__malloc_unlock>:
 80046fa:	4770      	bx	lr

080046fc <_malloc_usable_size_r>:
 80046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004700:	1f18      	subs	r0, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfbc      	itt	lt
 8004706:	580b      	ldrlt	r3, [r1, r0]
 8004708:	18c0      	addlt	r0, r0, r3
 800470a:	4770      	bx	lr

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
