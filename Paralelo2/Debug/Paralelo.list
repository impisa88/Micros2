
Paralelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003288  08003288  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003288  08003288  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003288  08003288  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08003300  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003300  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b59a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001748  00000000  00000000  0002b63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f8  00000000  00000000  0002cd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  0002d380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf0b  00000000  00000000  0002d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000681a  00000000  00000000  000497db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bd0c  00000000  00000000  0004fff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebd01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a08  00000000  00000000  000ebd7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031fc 	.word	0x080031fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080031fc 	.word	0x080031fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f949 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f002 fa42 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f961 	bl	8000582 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f929 	bl	800052e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000098 	.word	0x20000098

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <NVIC_GetPriorityGrouping+0x18>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	f003 0307 	and.w	r3, r3, #7
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 021f 	and.w	r2, r3, #31
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <NVIC_EnableIRQ+0x30>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	095b      	lsrs	r3, r3, #5
 80003fc:	2001      	movs	r0, #1
 80003fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100

08000418 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	da0b      	bge.n	8000444 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	490c      	ldr	r1, [pc, #48]	; (8000464 <NVIC_SetPriority+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	3b04      	subs	r3, #4
 800043a:	0112      	lsls	r2, r2, #4
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	440b      	add	r3, r1
 8000440:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000442:	e009      	b.n	8000458 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4907      	ldr	r1, [pc, #28]	; (8000468 <NVIC_SetPriority+0x50>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000e100 	.word	0xe000e100

0800046c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	f1c3 0307 	rsb	r3, r3, #7
 8000486:	2b04      	cmp	r3, #4
 8000488:	bf28      	it	cs
 800048a:	2304      	movcs	r3, #4
 800048c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3304      	adds	r3, #4
 8000492:	2b06      	cmp	r3, #6
 8000494:	d902      	bls.n	800049c <NVIC_EncodePriority+0x30>
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3b03      	subs	r3, #3
 800049a:	e000      	b.n	800049e <NVIC_EncodePriority+0x32>
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	f04f 32ff 	mov.w	r2, #4294967295
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	401a      	ands	r2, r3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43d9      	mvns	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c4:	4313      	orrs	r3, r2
         );
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3b01      	subs	r3, #1
 80004e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004e4:	d301      	bcc.n	80004ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00f      	b.n	800050a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <SysTick_Config+0x40>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f2:	210f      	movs	r1, #15
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f7ff ff8e 	bl	8000418 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <SysTick_Config+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <SysTick_Config+0x40>)
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	e000e010 	.word	0xe000e010

08000518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ff2d 	bl	8000380 <NVIC_SetPriorityGrouping>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000540:	f7ff ff42 	bl	80003c8 <NVIC_GetPriorityGrouping>
 8000544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	6978      	ldr	r0, [r7, #20]
 800054c:	f7ff ff8e 	bl	800046c <NVIC_EncodePriority>
 8000550:	4602      	mov	r2, r0
 8000552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff5d 	bl	8000418 <NVIC_SetPriority>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff35 	bl	80003e4 <NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffa2 	bl	80004d4 <SysTick_Config>
 8000590:	4603      	mov	r3, r0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b2:	e14e      	b.n	8000852 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2101      	movs	r1, #1
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8140 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d003      	beq.n	80005dc <HAL_GPIO_Init+0x40>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b12      	cmp	r3, #18
 80005da:	d123      	bne.n	8000624 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	08da      	lsrs	r2, r3, #3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3208      	adds	r2, #8
 80005e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	220f      	movs	r2, #15
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	08da      	lsrs	r2, r3, #3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3208      	adds	r2, #8
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 0203 	and.w	r2, r3, #3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066c:	2b11      	cmp	r3, #17
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b12      	cmp	r3, #18
 8000676:	d130      	bne.n	80006da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2203      	movs	r2, #3
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ae:	2201      	movs	r2, #1
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	091b      	lsrs	r3, r3, #4
 80006c4:	f003 0201 	and.w	r2, r3, #1
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	2203      	movs	r2, #3
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 809a 	beq.w	800084c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <HAL_GPIO_Init+0x2d4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000730:	4a50      	ldr	r2, [pc, #320]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3302      	adds	r3, #2
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	220f      	movs	r2, #15
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800075a:	d013      	beq.n	8000784 <HAL_GPIO_Init+0x1e8>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <HAL_GPIO_Init+0x2dc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d00d      	beq.n	8000780 <HAL_GPIO_Init+0x1e4>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a45      	ldr	r2, [pc, #276]	; (800087c <HAL_GPIO_Init+0x2e0>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d007      	beq.n	800077c <HAL_GPIO_Init+0x1e0>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a44      	ldr	r2, [pc, #272]	; (8000880 <HAL_GPIO_Init+0x2e4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d101      	bne.n	8000778 <HAL_GPIO_Init+0x1dc>
 8000774:	2303      	movs	r3, #3
 8000776:	e006      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000778:	2305      	movs	r3, #5
 800077a:	e004      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 800077c:	2302      	movs	r3, #2
 800077e:	e002      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <HAL_GPIO_Init+0x1ea>
 8000784:	2300      	movs	r3, #0
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	f002 0203 	and.w	r2, r2, #3
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	4093      	lsls	r3, r2
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000796:	4937      	ldr	r1, [pc, #220]	; (8000874 <HAL_GPIO_Init+0x2d8>)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3302      	adds	r3, #2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007c8:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4013      	ands	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_GPIO_Init+0x2e8>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	f47f aea9 	bne.w	80005b4 <HAL_GPIO_Init+0x18>
  }
}
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800
 8000880:	48000c00 	.word	0x48000c00
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	4013      	ands	r3, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c8:	787b      	ldrb	r3, [r7, #1]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008ce:	887a      	ldrh	r2, [r7, #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008d4:	e002      	b.n	80008dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008d6:	887a      	ldrh	r2, [r7, #2]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008f4:	695a      	ldr	r2, [r3, #20]
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f806 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010400 	.word	0x40010400

08000918 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000936:	af00      	add	r7, sp, #0
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	f000 beda 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	f000 816e 	beq.w	8000c36 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800095a:	4bb5      	ldr	r3, [pc, #724]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	2b04      	cmp	r3, #4
 8000964:	d00c      	beq.n	8000980 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000966:	4bb2      	ldr	r3, [pc, #712]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 030c 	and.w	r3, r3, #12
 800096e:	2b08      	cmp	r3, #8
 8000970:	d15a      	bne.n	8000a28 <HAL_RCC_OscConfig+0xf8>
 8000972:	4baf      	ldr	r3, [pc, #700]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097e:	d153      	bne.n	8000a28 <HAL_RCC_OscConfig+0xf8>
 8000980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000984:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000988:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800098c:	fa93 f3a3 	rbit	r3, r3
 8000990:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000994:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d102      	bne.n	80009b2 <HAL_RCC_OscConfig+0x82>
 80009ac:	4ba0      	ldr	r3, [pc, #640]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	e015      	b.n	80009de <HAL_RCC_OscConfig+0xae>
 80009b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80009be:	fa93 f3a3 	rbit	r3, r3
 80009c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80009c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80009ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80009d2:	fa93 f3a3 	rbit	r3, r3
 80009d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80009da:	4b95      	ldr	r3, [pc, #596]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009e2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80009e6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80009ea:	fa92 f2a2 	rbit	r2, r2
 80009ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80009f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	b252      	sxtb	r2, r2
 80009fc:	f042 0220 	orr.w	r2, r2, #32
 8000a00:	b252      	sxtb	r2, r2
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	f002 021f 	and.w	r2, r2, #31
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 810f 	beq.w	8000c34 <HAL_RCC_OscConfig+0x304>
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f040 8109 	bne.w	8000c34 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f000 be6b 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a32:	d106      	bne.n	8000a42 <HAL_RCC_OscConfig+0x112>
 8000a34:	4b7e      	ldr	r3, [pc, #504]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a7d      	ldr	r2, [pc, #500]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e030      	b.n	8000aa4 <HAL_RCC_OscConfig+0x174>
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <HAL_RCC_OscConfig+0x136>
 8000a4c:	4b78      	ldr	r3, [pc, #480]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a77      	ldr	r2, [pc, #476]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b75      	ldr	r3, [pc, #468]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a74      	ldr	r2, [pc, #464]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e01e      	b.n	8000aa4 <HAL_RCC_OscConfig+0x174>
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a70:	d10c      	bne.n	8000a8c <HAL_RCC_OscConfig+0x15c>
 8000a72:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a6e      	ldr	r2, [pc, #440]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a6b      	ldr	r2, [pc, #428]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e00b      	b.n	8000aa4 <HAL_RCC_OscConfig+0x174>
 8000a8c:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a67      	ldr	r2, [pc, #412]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b65      	ldr	r3, [pc, #404]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a64      	ldr	r2, [pc, #400]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000aa4:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f023 020f 	bic.w	r2, r3, #15
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	495f      	ldr	r1, [pc, #380]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d05a      	beq.n	8000b78 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fc2f 	bl	8000324 <HAL_GetTick>
 8000ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	e00a      	b.n	8000ae2 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000acc:	f7ff fc2a 	bl	8000324 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b64      	cmp	r3, #100	; 0x64
 8000ada:	d902      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	f000 be0e 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
 8000ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000af6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afa:	fab3 f383 	clz	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <HAL_RCC_OscConfig+0x1e4>
 8000b0e:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	e015      	b.n	8000b40 <HAL_RCC_OscConfig+0x210>
 8000b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b18:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000b20:	fa93 f3a3 	rbit	r3, r3
 8000b24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000b30:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b34:	fa93 f3a3 	rbit	r3, r3
 8000b38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b44:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000b48:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000b4c:	fa92 f2a2 	rbit	r2, r2
 8000b50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000b54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b252      	sxtb	r2, r2
 8000b5e:	f042 0220 	orr.w	r2, r2, #32
 8000b62:	b252      	sxtb	r2, r2
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	f002 021f 	and.w	r2, r2, #31
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0aa      	beq.n	8000acc <HAL_RCC_OscConfig+0x19c>
 8000b76:	e05e      	b.n	8000c36 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fbd4 	bl	8000324 <HAL_GetTick>
 8000b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b80:	e00a      	b.n	8000b98 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b82:	f7ff fbcf 	bl	8000324 <HAL_GetTick>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d902      	bls.n	8000b98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f000 bdb3 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
 8000b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ba4:	fa93 f3a3 	rbit	r3, r3
 8000ba8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000bac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb0:	fab3 f383 	clz	r3, r3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <HAL_RCC_OscConfig+0x29a>
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	e015      	b.n	8000bf6 <HAL_RCC_OscConfig+0x2c6>
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000be6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000bea:	fa93 f3a3 	rbit	r3, r3
 8000bee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_RCC_OscConfig+0x300>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bfa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000bfe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000c02:	fa92 f2a2 	rbit	r2, r2
 8000c06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000c0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b252      	sxtb	r2, r2
 8000c14:	f042 0220 	orr.w	r2, r2, #32
 8000c18:	b252      	sxtb	r2, r2
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	f002 021f 	and.w	r2, r2, #31
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1aa      	bne.n	8000b82 <HAL_RCC_OscConfig+0x252>
 8000c2c:	e003      	b.n	8000c36 <HAL_RCC_OscConfig+0x306>
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8170 	beq.w	8000f26 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c46:	4bd0      	ldr	r3, [pc, #832]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c52:	4bcd      	ldr	r3, [pc, #820]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d16d      	bne.n	8000d3a <HAL_RCC_OscConfig+0x40a>
 8000c5e:	4bca      	ldr	r3, [pc, #808]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d167      	bne.n	8000d3a <HAL_RCC_OscConfig+0x40a>
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c80:	fab3 f383 	clz	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <HAL_RCC_OscConfig+0x36a>
 8000c94:	4bbc      	ldr	r3, [pc, #752]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	e013      	b.n	8000cc2 <HAL_RCC_OscConfig+0x392>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ca4:	fa93 f3a3 	rbit	r3, r3
 8000ca8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000cb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000cbe:	4bb2      	ldr	r3, [pc, #712]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000cc8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ccc:	fa92 f2a2 	rbit	r2, r2
 8000cd0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000cd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	b252      	sxtb	r2, r2
 8000cde:	f042 0220 	orr.w	r2, r2, #32
 8000ce2:	b252      	sxtb	r2, r2
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	f002 021f 	and.w	r2, r2, #31
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <HAL_RCC_OscConfig+0x3d6>
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d002      	beq.n	8000d06 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f000 bcfc 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4ba0      	ldr	r3, [pc, #640]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6959      	ldr	r1, [r3, #20]
 8000d14:	23f8      	movs	r3, #248	; 0xf8
 8000d16:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000d26:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	4995      	ldr	r1, [pc, #596]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d38:	e0f5      	b.n	8000f26 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8085 	beq.w	8000e50 <HAL_RCC_OscConfig+0x520>
 8000d46:	2301      	movs	r3, #1
 8000d48:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000d58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fad8 	bl	8000324 <HAL_GetTick>
 8000d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	e00a      	b.n	8000d90 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fad3 	bl	8000324 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d902      	bls.n	8000d90 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f000 bcb7 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000da2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	095b      	lsrs	r3, r3, #5
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d102      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x490>
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	e013      	b.n	8000de8 <HAL_RCC_OscConfig+0x4b8>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000dd8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2202      	movs	r2, #2
 8000dea:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000dee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000df2:	fa92 f2a2 	rbit	r2, r2
 8000df6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000dfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	b252      	sxtb	r2, r2
 8000e04:	f042 0220 	orr.w	r2, r2, #32
 8000e08:	b252      	sxtb	r2, r2
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	f002 021f 	and.w	r2, r2, #31
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0ae      	beq.n	8000d7a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6959      	ldr	r1, [r3, #20]
 8000e2a:	23f8      	movs	r3, #248	; 0xf8
 8000e2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000e3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	494f      	ldr	r1, [pc, #316]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
 8000e4e:	e06a      	b.n	8000f26 <HAL_RCC_OscConfig+0x5f6>
 8000e50:	2301      	movs	r3, #1
 8000e52:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000e62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	461a      	mov	r2, r3
 8000e76:	2300      	movs	r3, #0
 8000e78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fa53 	bl	8000324 <HAL_GetTick>
 8000e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	e00a      	b.n	8000e9a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fa4e 	bl	8000324 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d902      	bls.n	8000e9a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	f000 bc32 	b.w	80016fe <HAL_RCC_OscConfig+0xdce>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000eac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <HAL_RCC_OscConfig+0x59a>
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	e013      	b.n	8000ef2 <HAL_RCC_OscConfig+0x5c2>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ee2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_RCC_OscConfig+0x658>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000ef8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000efc:	fa92 f2a2 	rbit	r2, r2
 8000f00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000f04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f08:	fab2 f282 	clz	r2, r2
 8000f0c:	b252      	sxtb	r2, r2
 8000f0e:	f042 0220 	orr.w	r2, r2, #32
 8000f12:	b252      	sxtb	r2, r2
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1ae      	bne.n	8000e84 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80d8 	beq.w	80010e6 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d067      	beq.n	8001010 <HAL_RCC_OscConfig+0x6e0>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_RCC_OscConfig+0x65c>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	461a      	mov	r2, r3
 8000f64:	2301      	movs	r3, #1
 8000f66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff f9dc 	bl	8000324 <HAL_GetTick>
 8000f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f70:	e00e      	b.n	8000f90 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff f9d7 	bl	8000324 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d906      	bls.n	8000f90 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e3bb      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	10908120 	.word	0x10908120
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fac:	fa93 f2a3 	rbit	r2, r3
 8000fb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fba:	2202      	movs	r2, #2
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	fa93 f2a3 	rbit	r2, r3
 8000fc8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	4ba5      	ldr	r3, [pc, #660]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8000fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	6019      	str	r1, [r3, #0]
 8000fda:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	fa93 f1a3 	rbit	r1, r3
 8000fe4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fe8:	6019      	str	r1, [r3, #0]
  return(result);
 8000fea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0b1      	beq.n	8000f72 <HAL_RCC_OscConfig+0x642>
 800100e:	e06a      	b.n	80010e6 <HAL_RCC_OscConfig+0x7b6>
 8001010:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	fa93 f2a3 	rbit	r2, r3
 8001022:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001026:	601a      	str	r2, [r3, #0]
  return(result);
 8001028:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800102c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_RCC_OscConfig+0x938>)
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	461a      	mov	r2, r3
 800103c:	2300      	movs	r3, #0
 800103e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff f970 	bl	8000324 <HAL_GetTick>
 8001044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	e009      	b.n	800105e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff f96b 	bl	8000324 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e34f      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 800105e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001062:	2202      	movs	r2, #2
 8001064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	fa93 f2a3 	rbit	r2, r3
 8001070:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800107a:	2202      	movs	r2, #2
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	fa93 f2a3 	rbit	r2, r3
 8001088:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001092:	2202      	movs	r2, #2
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	fa93 f2a3 	rbit	r2, r3
 80010a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80010a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80010a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010ae:	2102      	movs	r1, #2
 80010b0:	6019      	str	r1, [r3, #0]
 80010b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	fa93 f1a3 	rbit	r1, r3
 80010bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010c0:	6019      	str	r1, [r3, #0]
  return(result);
 80010c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1b1      	bne.n	800104a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8159 	beq.w	80013a8 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	4b56      	ldr	r3, [pc, #344]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	4a55      	ldr	r2, [pc, #340]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	61d3      	str	r3, [r2, #28]
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <HAL_RCC_OscConfig+0x93c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11a      	bne.n	8001170 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <HAL_RCC_OscConfig+0x93c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a4b      	ldr	r2, [pc, #300]	; (800126c <HAL_RCC_OscConfig+0x93c>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff f8ed 	bl	8000324 <HAL_GetTick>
 800114a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	e009      	b.n	8001164 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001150:	f7ff f8e8 	bl	8000324 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e2cc      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_OscConfig+0x93c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ef      	beq.n	8001150 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x858>
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	e02f      	b.n	80011e8 <HAL_RCC_OscConfig+0x8b8>
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x87c>
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a33      	ldr	r2, [pc, #204]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0x8b8>
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x8a0>
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6213      	str	r3, [r2, #32]
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0x8b8>
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06b      	beq.n	80012ca <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff f897 	bl	8000324 <HAL_GetTick>
 80011f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff f892 	bl	8000324 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e274      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 8001214:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	fa93 f2a3 	rbit	r2, r3
 8001226:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fa93 f2a3 	rbit	r2, r3
 800123e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001242:	601a      	str	r2, [r3, #0]
  return(result);
 8001244:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001248:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d108      	bne.n	8001270 <HAL_RCC_OscConfig+0x940>
 800125e:	4b01      	ldr	r3, [pc, #4]	; (8001264 <HAL_RCC_OscConfig+0x934>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x95c>
 8001264:	40021000 	.word	0x40021000
 8001268:	10908120 	.word	0x10908120
 800126c:	40007000 	.word	0x40007000
 8001270:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001274:	2202      	movs	r2, #2
 8001276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	fa93 f2a3 	rbit	r2, r3
 8001282:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4bbb      	ldr	r3, [pc, #748]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001290:	2102      	movs	r1, #2
 8001292:	6011      	str	r1, [r2, #0]
 8001294:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	fa92 f1a2 	rbit	r1, r2
 800129e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012a2:	6011      	str	r1, [r2, #0]
  return(result);
 80012a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b252      	sxtb	r2, r2
 80012b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012b4:	b252      	sxtb	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f002 021f 	and.w	r2, r2, #31
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d099      	beq.n	80011fc <HAL_RCC_OscConfig+0x8cc>
 80012c8:	e064      	b.n	8001394 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff f82b 	bl	8000324 <HAL_GetTick>
 80012ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff f826 	bl	8000324 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e208      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 80012ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	fa93 f2a3 	rbit	r2, r3
 80012fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800131a:	601a      	str	r2, [r3, #0]
  return(result);
 800131c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001320:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0xa0c>
 8001336:	4b90      	ldr	r3, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	e00d      	b.n	8001358 <HAL_RCC_OscConfig+0xa28>
 800133c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f2a3 	rbit	r2, r3
 800134e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800135c:	2102      	movs	r1, #2
 800135e:	6011      	str	r1, [r2, #0]
 8001360:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	fa92 f1a2 	rbit	r1, r2
 800136a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800136e:	6011      	str	r1, [r2, #0]
  return(result);
 8001370:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	fab2 f282 	clz	r2, r2
 800137a:	b252      	sxtb	r2, r2
 800137c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001380:	b252      	sxtb	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f002 021f 	and.w	r2, r2, #31
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d19f      	bne.n	80012d4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001394:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 80013a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 81a4 	beq.w	80016fc <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	f000 819b 	beq.w	80016f8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	f040 8113 	bne.w	80015f4 <HAL_RCC_OscConfig+0xcc4>
 80013ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013e6:	601a      	str	r2, [r3, #0]
  return(result);
 80013e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7fe ff8f 	bl	8000324 <HAL_GetTick>
 8001406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	e009      	b.n	8001420 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7fe ff8a 	bl	8000324 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e16e      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 8001420:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001438:	601a      	str	r2, [r3, #0]
  return(result);
 800143a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800143e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0xb2a>
 8001454:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	e01b      	b.n	8001492 <HAL_RCC_OscConfig+0xb62>
 800145a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800145e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001496:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800149a:	6011      	str	r1, [r2, #0]
 800149c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	fa92 f1a2 	rbit	r1, r2
 80014a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014aa:	6011      	str	r1, [r2, #0]
  return(result);
 80014ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	fab2 f282 	clz	r2, r2
 80014b6:	b252      	sxtb	r2, r2
 80014b8:	f042 0220 	orr.w	r2, r2, #32
 80014bc:	b252      	sxtb	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f002 021f 	and.w	r2, r2, #31
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d19d      	bne.n	800140c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	4924      	ldr	r1, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
 80014ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001504:	601a      	str	r2, [r3, #0]
  return(result);
 8001506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800150a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	461a      	mov	r2, r3
 800151c:	2301      	movs	r3, #1
 800151e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7fe ff00 	bl	8000324 <HAL_GetTick>
 8001524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	e009      	b.n	800153e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7fe fefb 	bl	8000324 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0df      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 800153e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001556:	601a      	str	r2, [r3, #0]
  return(result);
 8001558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800155c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d104      	bne.n	800157c <HAL_RCC_OscConfig+0xc4c>
 8001572:	4b01      	ldr	r3, [pc, #4]	; (8001578 <HAL_RCC_OscConfig+0xc48>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xc84>
 8001578:	40021000 	.word	0x40021000
 800157c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800159a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0xdd8>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	fa92 f1a2 	rbit	r1, r2
 80015c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015cc:	6011      	str	r1, [r2, #0]
  return(result);
 80015ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	b252      	sxtb	r2, r2
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	b252      	sxtb	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f002 021f 	and.w	r2, r2, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d09b      	beq.n	800152a <HAL_RCC_OscConfig+0xbfa>
 80015f2:	e083      	b.n	80016fc <HAL_RCC_OscConfig+0xdcc>
 80015f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160c:	601a      	str	r2, [r3, #0]
  return(result);
 800160e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001612:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800161c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7fe fe7c 	bl	8000324 <HAL_GetTick>
 800162c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e009      	b.n	8001646 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7fe fe77 	bl	8000324 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e05b      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
 8001646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	601a      	str	r2, [r3, #0]
  return(result);
 8001660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0xd50>
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_RCC_OscConfig+0xdd8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e01b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd88>
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_RCC_OscConfig+0xdd8>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f107 0214 	add.w	r2, r7, #20
 80016bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016c0:	6011      	str	r1, [r2, #0]
 80016c2:	f107 0214 	add.w	r2, r7, #20
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	fa92 f1a2 	rbit	r1, r2
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	6011      	str	r1, [r2, #0]
  return(result);
 80016d2:	f107 0210 	add.w	r2, r7, #16
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b252      	sxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b252      	sxtb	r2, r2
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f002 021f 	and.w	r2, r2, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d19d      	bne.n	8001632 <HAL_RCC_OscConfig+0xd02>
 80016f6:	e001      	b.n	80016fc <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09e      	sub	sp, #120	; 0x78
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e164      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	498d      	ldr	r1, [pc, #564]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e14c      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b84      	ldr	r3, [pc, #528]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4981      	ldr	r1, [pc, #516]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80df 	beq.w	800193e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d13d      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
 8001788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xa6>
 80017ac:	4b71      	ldr	r3, [pc, #452]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e00f      	b.n	80017d2 <HAL_RCC_ClockConfig+0xc6>
 80017b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	667b      	str	r3, [r7, #100]	; 0x64
 80017c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c4:	663b      	str	r3, [r7, #96]	; 0x60
 80017c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80017d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017da:	fa92 f2a2 	rbit	r2, r2
 80017de:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80017e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b252      	sxtb	r2, r2
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	b252      	sxtb	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d17d      	bne.n	80018fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0f4      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d13d      	bne.n	8001888 <HAL_RCC_ClockConfig+0x17c>
 800180c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001810:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800181a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d102      	bne.n	8001836 <HAL_RCC_ClockConfig+0x12a>
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e00f      	b.n	8001856 <HAL_RCC_ClockConfig+0x14a>
 8001836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
 8001844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001848:	643b      	str	r3, [r7, #64]	; 0x40
 800184a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	63ba      	str	r2, [r7, #56]	; 0x38
 800185c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800185e:	fa92 f2a2 	rbit	r2, r2
 8001862:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b252      	sxtb	r2, r2
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	b252      	sxtb	r2, r2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d13b      	bne.n	80018fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b2      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
 8001888:	2302      	movs	r3, #2
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x1a4>
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e00d      	b.n	80018cc <HAL_RCC_ClockConfig+0x1c0>
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2202      	movs	r2, #2
 80018ce:	61ba      	str	r2, [r7, #24]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	617a      	str	r2, [r7, #20]
  return(result);
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	b252      	sxtb	r2, r2
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	b252      	sxtb	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f002 021f 	and.w	r2, r2, #31
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e078      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 0203 	bic.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	491a      	ldr	r1, [pc, #104]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190e:	f7fe fd09 	bl	8000324 <HAL_GetTick>
 8001912:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001914:	e00a      	b.n	800192c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	f7fe fd05 	bl	8000324 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e060      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_RCC_ClockConfig+0x268>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 020c 	and.w	r2, r3, #12
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	429a      	cmp	r2, r3
 800193c:	d1eb      	bne.n	8001916 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d215      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0207 	bic.w	r2, r3, #7
 8001954:	4906      	ldr	r1, [pc, #24]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_RCC_ClockConfig+0x264>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d006      	beq.n	8001978 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e03f      	b.n	80019ee <HAL_RCC_ClockConfig+0x2e2>
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_ClockConfig+0x2ec>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4919      	ldr	r1, [pc, #100]	; (80019f8 <HAL_RCC_ClockConfig+0x2ec>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_RCC_ClockConfig+0x2ec>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4911      	ldr	r1, [pc, #68]	; (80019f8 <HAL_RCC_ClockConfig+0x2ec>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019b6:	f000 f859 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80019ba:	4601      	mov	r1, r0
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_RCC_ClockConfig+0x2ec>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c4:	23f0      	movs	r3, #240	; 0xf0
 80019c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_RCC_ClockConfig+0x2f0>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	fa21 f303 	lsr.w	r3, r1, r3
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_RCC_ClockConfig+0x2f4>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7fe fc58 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3778      	adds	r7, #120	; 0x78
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	0800323c 	.word	0x0800323c
 8001a00:	20000008 	.word	0x20000008

08001a04 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_MCOConfig+0x64>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_MCOConfig+0x64>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6153      	str	r3, [r2, #20]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_MCOConfig+0x64>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f7fe fda8 	bl	800059c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_MCOConfig+0x64>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_MCOConfig+0x64>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	; 0x2c
 8001a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x30>
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8001a9a:	e03c      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a9e:	623b      	str	r3, [r7, #32]
      break;
 8001aa0:	e03c      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001aac:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	607b      	str	r3, [r7, #4]
  return(result);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	230f      	movs	r3, #15
 8001ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	e004      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	623b      	str	r3, [r7, #32]
      break;
 8001b14:	e002      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b18:	623b      	str	r3, [r7, #32]
      break;
 8001b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	372c      	adds	r7, #44	; 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	0800321c 	.word	0x0800321c
 8001b38:	0800322c 	.word	0x0800322c
 8001b3c:	003d0900 	.word	0x003d0900

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b5e:	f7ff ffef 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b62:	4601      	mov	r1, r0
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b70:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	603b      	str	r3, [r7, #0]
  return(result);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	0800324c 	.word	0x0800324c

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ba2:	f7ff ffcd 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001bb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bb4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	603b      	str	r3, [r7, #0]
  return(result);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	0800324c 	.word	0x0800324c

08001be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e043      	b.n	8001c7a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fda8 	bl	800275c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8b9 	bl	8001d9c <UART_SetConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e022      	b.n	8001c7a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fa13 	bl	8002068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c60:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa9a 	bl	80021ac <UART_CheckIdleState>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b088      	sub	sp, #32
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d177      	bne.n	8001d92 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_UART_Transmit+0x2c>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e070      	b.n	8001d94 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_UART_Transmit+0x3e>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e069      	b.n	8001d94 <HAL_UART_Transmit+0x112>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2221      	movs	r2, #33	; 0x21
 8001cd2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001cd6:	f7fe fb25 	bl	8000324 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001cec:	e034      	b.n	8001d58 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fa97 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e03c      	b.n	8001d94 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d22:	d111      	bne.n	8001d48 <HAL_UART_Transmit+0xc6>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3302      	adds	r3, #2
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	e007      	b.n	8001d58 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b292      	uxth	r2, r2
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1c4      	bne.n	8001cee <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fa65 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e00a      	b.n	8001d94 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001da8:	2310      	movs	r3, #16
 8001daa:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b9f      	ldr	r3, [pc, #636]	; (8002054 <UART_SetConfig+0x2b8>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a8e      	ldr	r2, [pc, #568]	; (8002058 <UART_SetConfig+0x2bc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d121      	bne.n	8001e68 <UART_SetConfig+0xcc>
 8001e24:	4b8d      	ldr	r3, [pc, #564]	; (800205c <UART_SetConfig+0x2c0>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d817      	bhi.n	8001e60 <UART_SetConfig+0xc4>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <UART_SetConfig+0x9c>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e5b 	.word	0x08001e5b
 8001e44:	08001e4f 	.word	0x08001e4f
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	e01e      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	75fb      	strb	r3, [r7, #23]
 8001e52:	e01b      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e54:	2304      	movs	r3, #4
 8001e56:	75fb      	strb	r3, [r7, #23]
 8001e58:	e018      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	75fb      	strb	r3, [r7, #23]
 8001e5e:	e015      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e60:	2310      	movs	r3, #16
 8001e62:	75fb      	strb	r3, [r7, #23]
 8001e64:	bf00      	nop
 8001e66:	e011      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <UART_SetConfig+0x2c4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d102      	bne.n	8001e78 <UART_SetConfig+0xdc>
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
 8001e76:	e009      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a79      	ldr	r2, [pc, #484]	; (8002064 <UART_SetConfig+0x2c8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d102      	bne.n	8001e88 <UART_SetConfig+0xec>
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
 8001e86:	e001      	b.n	8001e8c <UART_SetConfig+0xf0>
 8001e88:	2310      	movs	r3, #16
 8001e8a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e94:	d16f      	bne.n	8001f76 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d857      	bhi.n	8001f4c <UART_SetConfig+0x1b0>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <UART_SetConfig+0x108>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001ec9 	.word	0x08001ec9
 8001ea8:	08001ee5 	.word	0x08001ee5
 8001eac:	08001f01 	.word	0x08001f01
 8001eb0:	08001f4d 	.word	0x08001f4d
 8001eb4:	08001f1b 	.word	0x08001f1b
 8001eb8:	08001f4d 	.word	0x08001f4d
 8001ebc:	08001f4d 	.word	0x08001f4d
 8001ec0:	08001f4d 	.word	0x08001f4d
 8001ec4:	08001f37 	.word	0x08001f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ec8:	f7ff fe46 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	005a      	lsls	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	82bb      	strh	r3, [r7, #20]
        break;
 8001ee2:	e036      	b.n	8001f52 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ee4:	f7ff fe5a 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	005a      	lsls	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	441a      	add	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	82bb      	strh	r3, [r7, #20]
        break;
 8001efe:	e028      	b.n	8001f52 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f0a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6852      	ldr	r2, [r2, #4]
 8001f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f16:	82bb      	strh	r3, [r7, #20]
        break;
 8001f18:	e01b      	b.n	8001f52 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f1a:	f7ff fda7 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	005a      	lsls	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	82bb      	strh	r3, [r7, #20]
        break;
 8001f34:	e00d      	b.n	8001f52 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	82bb      	strh	r3, [r7, #20]
        break;
 8001f4a:	e002      	b.n	8001f52 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	74fb      	strb	r3, [r7, #19]
        break;
 8001f50:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f52:	8abb      	ldrh	r3, [r7, #20]
 8001f54:	f023 030f 	bic.w	r3, r3, #15
 8001f58:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f5a:	8abb      	ldrh	r3, [r7, #20]
 8001f5c:	105b      	asrs	r3, r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	897a      	ldrh	r2, [r7, #10]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	e069      	b.n	800204a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d863      	bhi.n	8002044 <UART_SetConfig+0x2a8>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <UART_SetConfig+0x1e8>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001fa9 	.word	0x08001fa9
 8001f88:	08001fc9 	.word	0x08001fc9
 8001f8c:	08001fe9 	.word	0x08001fe9
 8001f90:	08002045 	.word	0x08002045
 8001f94:	08002009 	.word	0x08002009
 8001f98:	08002045 	.word	0x08002045
 8001f9c:	08002045 	.word	0x08002045
 8001fa0:	08002045 	.word	0x08002045
 8001fa4:	08002029 	.word	0x08002029
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fa8:	f7ff fdd6 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	441a      	add	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60da      	str	r2, [r3, #12]
        break;
 8001fc6:	e040      	b.n	800204a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fc8:	f7ff fde8 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	441a      	add	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60da      	str	r2, [r3, #12]
        break;
 8001fe6:	e030      	b.n	800204a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001ff2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6852      	ldr	r2, [r2, #4]
 8001ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60da      	str	r2, [r3, #12]
        break;
 8002006:	e020      	b.n	800204a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002008:	f7ff fd30 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60da      	str	r2, [r3, #12]
        break;
 8002026:	e010      	b.n	800204a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60da      	str	r2, [r3, #12]
        break;
 8002042:	e002      	b.n	800204a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	74fb      	strb	r3, [r7, #19]
        break;
 8002048:	bf00      	nop
    }
  }

  return ret;
 800204a:	7cfb      	ldrb	r3, [r7, #19]

}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	efff69f3 	.word	0xefff69f3
 8002058:	40013800 	.word	0x40013800
 800205c:	40021000 	.word	0x40021000
 8002060:	40004400 	.word	0x40004400
 8002064:	40004800 	.word	0x40004800

08002068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01a      	beq.n	800217e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002166:	d10a      	bne.n	800217e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
  }
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80021be:	f7fe f8b1 	bl	8000324 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d10e      	bne.n	80021f0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f82c 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e022      	b.n	8002236 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d10e      	bne.n	800221c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f816 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e00c      	b.n	8002236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224e:	e02c      	b.n	80022aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d028      	beq.n	80022aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <UART_WaitOnFlagUntilTimeout+0x30>
 800225e:	f7fe f861 	bl	8000324 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	429a      	cmp	r2, r3
 800226c:	d21d      	bcs.n	80022aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800227c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e00f      	b.n	80022ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d0c3      	beq.n	8002250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022da:	f7fd ffc9 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022de:	f000 f8d1 	bl	8002484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e2:	f000 f949 	bl	8002578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022e6:	f000 f917 	bl	8002518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char Add = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]

  HAL_GPIO_WritePin(GPIOB, A_Pin, (Add & 0x01));
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	2101      	movs	r1, #1
 80022fa:	485d      	ldr	r0, [pc, #372]	; (8002470 <main+0x19c>)
 80022fc:	f7fe fadc 	bl	80008b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, B_Pin, ((Add & 0x02)>>1));
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	105b      	asrs	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	2102      	movs	r1, #2
 8002310:	4857      	ldr	r0, [pc, #348]	; (8002470 <main+0x19c>)
 8002312:	f7fe fad1 	bl	80008b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, C_Pin, ((Add & 0x04)>>2));
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	109b      	asrs	r3, r3, #2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	2104      	movs	r1, #4
 8002326:	4852      	ldr	r0, [pc, #328]	; (8002470 <main+0x19c>)
 8002328:	f7fe fac6 	bl	80008b8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(ALE_GPIO_Port, ALE_Pin,SET);
 800232c:	2201      	movs	r2, #1
 800232e:	2120      	movs	r1, #32
 8002330:	484f      	ldr	r0, [pc, #316]	; (8002470 <main+0x19c>)
 8002332:	f7fe fac1 	bl	80008b8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(START_GPIO_Port, START_Pin,SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2110      	movs	r1, #16
 800233a:	484d      	ldr	r0, [pc, #308]	; (8002470 <main+0x19c>)
 800233c:	f7fe fabc 	bl	80008b8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ALE_GPIO_Port, ALE_Pin,RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2120      	movs	r1, #32
 8002344:	484a      	ldr	r0, [pc, #296]	; (8002470 <main+0x19c>)
 8002346:	f7fe fab7 	bl	80008b8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(START_GPIO_Port, START_Pin,RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2110      	movs	r1, #16
 800234e:	4848      	ldr	r0, [pc, #288]	; (8002470 <main+0x19c>)
 8002350:	f7fe fab2 	bl	80008b8 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8002354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002358:	f7fd fff0 	bl	800033c <HAL_Delay>

	if (HAL_GPIO_ReadPin(EOC_GPIO_Port, EOC_Pin) != '0'){
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4844      	ldr	r0, [pc, #272]	; (8002474 <main+0x1a0>)
 8002362:	f7fe fa91 	bl	8000888 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d06d      	beq.n	8002448 <main+0x174>

		char bitDado7 = HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);;  // Read state
 800236c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002374:	f7fe fa88 	bl	8000888 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	75bb      	strb	r3, [r7, #22]
		char bitDado6 = HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);;  // Read state
 800237c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f7fe fa80 	bl	8000888 <HAL_GPIO_ReadPin>
 8002388:	4603      	mov	r3, r0
 800238a:	757b      	strb	r3, [r7, #21]
		char bitDado5 = HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);;  // Read state
 800238c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002394:	f7fe fa78 	bl	8000888 <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
 800239a:	753b      	strb	r3, [r7, #20]
		char bitDado4 = HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);;  // Read state
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a4:	f7fe fa70 	bl	8000888 <HAL_GPIO_ReadPin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
		char bitDado3 = HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);;  // Read state
 80023ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b0:	4830      	ldr	r0, [pc, #192]	; (8002474 <main+0x1a0>)
 80023b2:	f7fe fa69 	bl	8000888 <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74bb      	strb	r3, [r7, #18]
		char bitDado2 = HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);;  // Read state
 80023ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023be:	482d      	ldr	r0, [pc, #180]	; (8002474 <main+0x1a0>)
 80023c0:	f7fe fa62 	bl	8000888 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	747b      	strb	r3, [r7, #17]
		char bitDado1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);;  // Read state
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	482a      	ldr	r0, [pc, #168]	; (8002474 <main+0x1a0>)
 80023cc:	f7fe fa5c 	bl	8000888 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	743b      	strb	r3, [r7, #16]
		char bitDado0 = HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);;  // Read state
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	4827      	ldr	r0, [pc, #156]	; (8002474 <main+0x1a0>)
 80023d8:	f7fe fa56 	bl	8000888 <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]


		ValorLido = bitDado0|(bitDado1<<1)|(bitDado2<<2)|(bitDado3<<3)|(bitDado4<<4)|(bitDado5<<5)|(bitDado6<<6)|(bitDado7<<7);
 80023e0:	7c3b      	ldrb	r3, [r7, #16]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b25a      	sxtb	r2, r3
 80023ee:	7c7b      	ldrb	r3, [r7, #17]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b25a      	sxtb	r2, r3
 80023f8:	7cbb      	ldrb	r3, [r7, #18]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	b25a      	sxtb	r2, r3
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b25a      	sxtb	r2, r3
 800240c:	7d3b      	ldrb	r3, [r7, #20]
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	b25b      	sxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b25a      	sxtb	r2, r3
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	b25b      	sxtb	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b25a      	sxtb	r2, r3
 8002420:	7dbb      	ldrb	r3, [r7, #22]
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	b25b      	sxtb	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b25b      	sxtb	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <main+0x1a4>)
 800242e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin,SET);
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <main+0x1a0>)
 8002438:	f7fe fa3e 	bl	80008b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin,RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002442:	480c      	ldr	r0, [pc, #48]	; (8002474 <main+0x1a0>)
 8002444:	f7fe fa38 	bl	80008b8 <HAL_GPIO_WritePin>
	}

	sprintf(Buffer,"%d\n\r", ValorLido);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <main+0x1a4>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	490a      	ldr	r1, [pc, #40]	; (800247c <main+0x1a8>)
 8002452:	4618      	mov	r0, r3
 8002454:	f000 facc 	bl	80029f0 <siprintf>

	HAL_UART_Transmit(&huart2, Buffer, 10, 1000);
 8002458:	1d39      	adds	r1, r7, #4
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	220a      	movs	r2, #10
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <main+0x1ac>)
 8002462:	f7ff fc0e 	bl	8001c82 <HAL_UART_Transmit>


	HAL_Delay(1000);
 8002466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800246a:	f7fd ff67 	bl	800033c <HAL_Delay>
	HAL_GPIO_WritePin(ALE_GPIO_Port, ALE_Pin,SET);
 800246e:	e75d      	b.n	800232c <main+0x58>
 8002470:	48000400 	.word	0x48000400
 8002474:	48000800 	.word	0x48000800
 8002478:	2000009c 	.word	0x2000009c
 800247c:	08003214 	.word	0x08003214
 8002480:	200000a0 	.word	0x200000a0

08002484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b090      	sub	sp, #64	; 0x40
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	2228      	movs	r2, #40	; 0x28
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 faa4 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024a6:	230a      	movs	r3, #10
 80024a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024ae:	2310      	movs	r3, #16
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024b2:	2301      	movs	r3, #1
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b6:	2302      	movs	r3, #2
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ba:	2300      	movs	r3, #0
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024be:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fa31 	bl	8000930 <HAL_RCC_OscConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80024d4:	f000 f916 	bl	8002704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d8:	230f      	movs	r3, #15
 80024da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f90a 	bl	800170c <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80024fe:	f000 f901 	bl	8002704 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_LSI, RCC_MCODIV_1);
 8002502:	2200      	movs	r2, #0
 8002504:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002508:	2000      	movs	r0, #0
 800250a:	f7ff fa7b 	bl	8001a04 <HAL_RCC_MCOConfig>
}
 800250e:	bf00      	nop
 8002510:	3740      	adds	r7, #64	; 0x40
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_USART2_UART_Init+0x58>)
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <MX_USART2_UART_Init+0x5c>)
 8002520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002524:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USART2_UART_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USART2_UART_Init+0x58>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USART2_UART_Init+0x58>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USART2_UART_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USART2_UART_Init+0x58>)
 800255c:	f7ff fb40 	bl	8001be0 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002566:	f000 f8cd 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200000a0 	.word	0x200000a0
 8002574:	40004400 	.word	0x40004400

08002578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <MX_GPIO_Init+0x17c>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <MX_GPIO_Init+0x17c>)
 8002594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002598:	6153      	str	r3, [r2, #20]
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <MX_GPIO_Init+0x17c>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a6:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b0:	6153      	str	r3, [r2, #20]
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	6153      	str	r3, [r2, #20]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4a46      	ldr	r2, [pc, #280]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6153      	str	r3, [r2, #20]
 80025e2:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <MX_GPIO_Init+0x17c>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2120      	movs	r1, #32
 80025f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f6:	f7fe f95f 	bl	80008b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|START_Pin 
 80025fa:	2200      	movs	r2, #0
 80025fc:	2137      	movs	r1, #55	; 0x37
 80025fe:	483e      	ldr	r0, [pc, #248]	; (80026f8 <MX_GPIO_Init+0x180>)
 8002600:	f7fe f95a 	bl	80008b8 <HAL_GPIO_WritePin>
                          |ALE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260a:	483c      	ldr	r0, [pc, #240]	; (80026fc <MX_GPIO_Init+0x184>)
 800260c:	f7fe f954 	bl	80008b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <MX_GPIO_Init+0x188>)
 8002618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	4835      	ldr	r0, [pc, #212]	; (80026fc <MX_GPIO_Init+0x184>)
 8002626:	f7fd ffb9 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800262a:	2320      	movs	r3, #32
 800262c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002644:	f7fd ffaa 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin START_Pin 
                           ALE_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|START_Pin 
 8002648:	2337      	movs	r3, #55	; 0x37
 800264a:	617b      	str	r3, [r7, #20]
                          |ALE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	4826      	ldr	r0, [pc, #152]	; (80026f8 <MX_GPIO_Init+0x180>)
 8002660:	f7fd ff9c 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           EOC_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8002664:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 8002668:	617b      	str	r3, [r7, #20]
                          |EOC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4820      	ldr	r0, [pc, #128]	; (80026fc <MX_GPIO_Init+0x184>)
 800267a:	f7fd ff8f 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269e:	f7fd ff7d 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin|D4_Pin;
 80026a2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80026a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f7fd ff6f 	bl	800059c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80026be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	4809      	ldr	r0, [pc, #36]	; (80026fc <MX_GPIO_Init+0x184>)
 80026d8:	f7fd ff60 	bl	800059c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2028      	movs	r0, #40	; 0x28
 80026e2:	f7fd ff24 	bl	800052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026e6:	2028      	movs	r0, #40	; 0x28
 80026e8:	f7fd ff3d 	bl	8000566 <HAL_NVIC_EnableIRQ>

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48000400 	.word	0x48000400
 80026fc:	48000800 	.word	0x48000800
 8002700:	10210000 	.word	0x10210000

08002704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_MspInit+0x44>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_MspInit+0x44>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6193      	str	r3, [r2, #24]
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_MspInit+0x44>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_MspInit+0x44>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_MspInit+0x44>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_MspInit+0x44>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800274a:	2007      	movs	r0, #7
 800274c:	f7fd fee4 	bl	8000518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_UART_MspInit+0x7c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d128      	bne.n	80027d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_UART_MspInit+0x80>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_UART_MspInit+0x80>)
 8002784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x80>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_UART_MspInit+0x80>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_UART_MspInit+0x80>)
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	6153      	str	r3, [r2, #20]
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_UART_MspInit+0x80>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ae:	230c      	movs	r3, #12
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027be:	2307      	movs	r3, #7
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f7fd fee6 	bl	800059c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40004400 	.word	0x40004400
 80027dc:	40021000 	.word	0x40021000

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f7fd fd62 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002840:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002844:	f7fe f850 	bl	80008e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <_sbrk+0x50>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x16>
		heap_end = &end;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <_sbrk+0x50>)
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <_sbrk+0x54>)
 8002860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <_sbrk+0x50>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <_sbrk+0x50>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	466a      	mov	r2, sp
 8002872:	4293      	cmp	r3, r2
 8002874:	d907      	bls.n	8002886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002876:	f000 f889 	bl	800298c <__errno>
 800287a:	4602      	mov	r2, r0
 800287c:	230c      	movs	r3, #12
 800287e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	e006      	b.n	8002894 <_sbrk+0x48>
	}

	heap_end += incr;
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <_sbrk+0x50>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a03      	ldr	r2, [pc, #12]	; (800289c <_sbrk+0x50>)
 8002890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000008c 	.word	0x2000008c
 80028a0:	20000118 	.word	0x20000118

080028a4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <SystemInit+0x84>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <SystemInit+0x84>)
 80028b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <SystemInit+0x88>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <SystemInit+0x88>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <SystemInit+0x88>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4918      	ldr	r1, [pc, #96]	; (800292c <SystemInit+0x88>)
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <SystemInit+0x8c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <SystemInit+0x88>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <SystemInit+0x88>)
 80028d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <SystemInit+0x88>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <SystemInit+0x88>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <SystemInit+0x88>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <SystemInit+0x88>)
 80028f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028f6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <SystemInit+0x88>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	4a0b      	ldr	r2, [pc, #44]	; (800292c <SystemInit+0x88>)
 80028fe:	f023 030f 	bic.w	r3, r3, #15
 8002902:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <SystemInit+0x88>)
 8002906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002908:	4908      	ldr	r1, [pc, #32]	; (800292c <SystemInit+0x88>)
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <SystemInit+0x90>)
 800290c:	4013      	ands	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <SystemInit+0x88>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SystemInit+0x84>)
 8002918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291c:	609a      	str	r2, [r3, #8]
#endif
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	40021000 	.word	0x40021000
 8002930:	f87fc00c 	.word	0xf87fc00c
 8002934:	ff00fccc 	.word	0xff00fccc

08002938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002970 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800293c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800293e:	e003      	b.n	8002948 <LoopCopyDataInit>

08002940 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002942:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002944:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002946:	3104      	adds	r1, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <LoopForever+0xa>)
	ldr	r3, =_edata
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <LoopForever+0xe>)
	adds	r2, r0, r1
 800294c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800294e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002950:	d3f6      	bcc.n	8002940 <CopyDataInit>
	ldr	r2, =_sbss
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002954:	e002      	b.n	800295c <LoopFillZerobss>

08002956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002956:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002958:	f842 3b04 	str.w	r3, [r2], #4

0800295c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <LoopForever+0x16>)
	cmp	r2, r3
 800295e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002960:	d3f9      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002962:	f7ff ff9f 	bl	80028a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f000 f817 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800296a:	f7ff fcb3 	bl	80022d4 <main>

0800296e <LoopForever>:

LoopForever:
    b LoopForever
 800296e:	e7fe      	b.n	800296e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002970:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002974:	08003290 	.word	0x08003290
	ldr	r0, =_sdata
 8002978:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800297c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002980:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002984:	20000114 	.word	0x20000114

08002988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>
	...

0800298c <__errno>:
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <__errno+0x8>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	4e0d      	ldr	r6, [pc, #52]	; (80029d0 <__libc_init_array+0x38>)
 800299c:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 800299e:	1ba4      	subs	r4, r4, r6
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	2500      	movs	r5, #0
 80029a4:	42a5      	cmp	r5, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	4e0b      	ldr	r6, [pc, #44]	; (80029d8 <__libc_init_array+0x40>)
 80029aa:	4c0c      	ldr	r4, [pc, #48]	; (80029dc <__libc_init_array+0x44>)
 80029ac:	f000 fc26 	bl	80031fc <_init>
 80029b0:	1ba4      	subs	r4, r4, r6
 80029b2:	10a4      	asrs	r4, r4, #2
 80029b4:	2500      	movs	r5, #0
 80029b6:	42a5      	cmp	r5, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c0:	4798      	blx	r3
 80029c2:	3501      	adds	r5, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ca:	4798      	blx	r3
 80029cc:	3501      	adds	r5, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	08003288 	.word	0x08003288
 80029d4:	08003288 	.word	0x08003288
 80029d8:	08003288 	.word	0x08003288
 80029dc:	0800328c 	.word	0x0800328c

080029e0 <memset>:
 80029e0:	4402      	add	r2, r0
 80029e2:	4603      	mov	r3, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <siprintf>:
 80029f0:	b40e      	push	{r1, r2, r3}
 80029f2:	b500      	push	{lr}
 80029f4:	b09c      	sub	sp, #112	; 0x70
 80029f6:	ab1d      	add	r3, sp, #116	; 0x74
 80029f8:	9002      	str	r0, [sp, #8]
 80029fa:	9006      	str	r0, [sp, #24]
 80029fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a00:	4809      	ldr	r0, [pc, #36]	; (8002a28 <siprintf+0x38>)
 8002a02:	9107      	str	r1, [sp, #28]
 8002a04:	9104      	str	r1, [sp, #16]
 8002a06:	4909      	ldr	r1, [pc, #36]	; (8002a2c <siprintf+0x3c>)
 8002a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a0c:	9105      	str	r1, [sp, #20]
 8002a0e:	6800      	ldr	r0, [r0, #0]
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	a902      	add	r1, sp, #8
 8002a14:	f000 f866 	bl	8002ae4 <_svfiprintf_r>
 8002a18:	9b02      	ldr	r3, [sp, #8]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	b01c      	add	sp, #112	; 0x70
 8002a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a24:	b003      	add	sp, #12
 8002a26:	4770      	bx	lr
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	ffff0208 	.word	0xffff0208

08002a30 <__ssputs_r>:
 8002a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a34:	688e      	ldr	r6, [r1, #8]
 8002a36:	429e      	cmp	r6, r3
 8002a38:	4682      	mov	sl, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	4690      	mov	r8, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	d837      	bhi.n	8002ab2 <__ssputs_r+0x82>
 8002a42:	898a      	ldrh	r2, [r1, #12]
 8002a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a48:	d031      	beq.n	8002aae <__ssputs_r+0x7e>
 8002a4a:	6825      	ldr	r5, [r4, #0]
 8002a4c:	6909      	ldr	r1, [r1, #16]
 8002a4e:	1a6f      	subs	r7, r5, r1
 8002a50:	6965      	ldr	r5, [r4, #20]
 8002a52:	2302      	movs	r3, #2
 8002a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a58:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a5c:	f109 0301 	add.w	r3, r9, #1
 8002a60:	443b      	add	r3, r7
 8002a62:	429d      	cmp	r5, r3
 8002a64:	bf38      	it	cc
 8002a66:	461d      	movcc	r5, r3
 8002a68:	0553      	lsls	r3, r2, #21
 8002a6a:	d530      	bpl.n	8002ace <__ssputs_r+0x9e>
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f000 fb2b 	bl	80030c8 <_malloc_r>
 8002a72:	4606      	mov	r6, r0
 8002a74:	b950      	cbnz	r0, 8002a8c <__ssputs_r+0x5c>
 8002a76:	230c      	movs	r3, #12
 8002a78:	f8ca 3000 	str.w	r3, [sl]
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a82:	81a3      	strh	r3, [r4, #12]
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a8c:	463a      	mov	r2, r7
 8002a8e:	6921      	ldr	r1, [r4, #16]
 8002a90:	f000 faa8 	bl	8002fe4 <memcpy>
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	81a3      	strh	r3, [r4, #12]
 8002aa0:	6126      	str	r6, [r4, #16]
 8002aa2:	6165      	str	r5, [r4, #20]
 8002aa4:	443e      	add	r6, r7
 8002aa6:	1bed      	subs	r5, r5, r7
 8002aa8:	6026      	str	r6, [r4, #0]
 8002aaa:	60a5      	str	r5, [r4, #8]
 8002aac:	464e      	mov	r6, r9
 8002aae:	454e      	cmp	r6, r9
 8002ab0:	d900      	bls.n	8002ab4 <__ssputs_r+0x84>
 8002ab2:	464e      	mov	r6, r9
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	6820      	ldr	r0, [r4, #0]
 8002aba:	f000 fa9e 	bl	8002ffa <memmove>
 8002abe:	68a3      	ldr	r3, [r4, #8]
 8002ac0:	1b9b      	subs	r3, r3, r6
 8002ac2:	60a3      	str	r3, [r4, #8]
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	441e      	add	r6, r3
 8002ac8:	6026      	str	r6, [r4, #0]
 8002aca:	2000      	movs	r0, #0
 8002acc:	e7dc      	b.n	8002a88 <__ssputs_r+0x58>
 8002ace:	462a      	mov	r2, r5
 8002ad0:	f000 fb54 	bl	800317c <_realloc_r>
 8002ad4:	4606      	mov	r6, r0
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d1e2      	bne.n	8002aa0 <__ssputs_r+0x70>
 8002ada:	6921      	ldr	r1, [r4, #16]
 8002adc:	4650      	mov	r0, sl
 8002ade:	f000 faa5 	bl	800302c <_free_r>
 8002ae2:	e7c8      	b.n	8002a76 <__ssputs_r+0x46>

08002ae4 <_svfiprintf_r>:
 8002ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae8:	461d      	mov	r5, r3
 8002aea:	898b      	ldrh	r3, [r1, #12]
 8002aec:	061f      	lsls	r7, r3, #24
 8002aee:	b09d      	sub	sp, #116	; 0x74
 8002af0:	4680      	mov	r8, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	4616      	mov	r6, r2
 8002af6:	d50f      	bpl.n	8002b18 <_svfiprintf_r+0x34>
 8002af8:	690b      	ldr	r3, [r1, #16]
 8002afa:	b96b      	cbnz	r3, 8002b18 <_svfiprintf_r+0x34>
 8002afc:	2140      	movs	r1, #64	; 0x40
 8002afe:	f000 fae3 	bl	80030c8 <_malloc_r>
 8002b02:	6020      	str	r0, [r4, #0]
 8002b04:	6120      	str	r0, [r4, #16]
 8002b06:	b928      	cbnz	r0, 8002b14 <_svfiprintf_r+0x30>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	f8c8 3000 	str.w	r3, [r8]
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	e0c8      	b.n	8002ca6 <_svfiprintf_r+0x1c2>
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	6163      	str	r3, [r4, #20]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b22:	2330      	movs	r3, #48	; 0x30
 8002b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b28:	9503      	str	r5, [sp, #12]
 8002b2a:	f04f 0b01 	mov.w	fp, #1
 8002b2e:	4637      	mov	r7, r6
 8002b30:	463d      	mov	r5, r7
 8002b32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b36:	b10b      	cbz	r3, 8002b3c <_svfiprintf_r+0x58>
 8002b38:	2b25      	cmp	r3, #37	; 0x25
 8002b3a:	d13e      	bne.n	8002bba <_svfiprintf_r+0xd6>
 8002b3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b40:	d00b      	beq.n	8002b5a <_svfiprintf_r+0x76>
 8002b42:	4653      	mov	r3, sl
 8002b44:	4632      	mov	r2, r6
 8002b46:	4621      	mov	r1, r4
 8002b48:	4640      	mov	r0, r8
 8002b4a:	f7ff ff71 	bl	8002a30 <__ssputs_r>
 8002b4e:	3001      	adds	r0, #1
 8002b50:	f000 80a4 	beq.w	8002c9c <_svfiprintf_r+0x1b8>
 8002b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b56:	4453      	add	r3, sl
 8002b58:	9309      	str	r3, [sp, #36]	; 0x24
 8002b5a:	783b      	ldrb	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 809d 	beq.w	8002c9c <_svfiprintf_r+0x1b8>
 8002b62:	2300      	movs	r3, #0
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	9307      	str	r3, [sp, #28]
 8002b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b74:	931a      	str	r3, [sp, #104]	; 0x68
 8002b76:	462f      	mov	r7, r5
 8002b78:	2205      	movs	r2, #5
 8002b7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b7e:	4850      	ldr	r0, [pc, #320]	; (8002cc0 <_svfiprintf_r+0x1dc>)
 8002b80:	f7fd fb26 	bl	80001d0 <memchr>
 8002b84:	9b04      	ldr	r3, [sp, #16]
 8002b86:	b9d0      	cbnz	r0, 8002bbe <_svfiprintf_r+0xda>
 8002b88:	06d9      	lsls	r1, r3, #27
 8002b8a:	bf44      	itt	mi
 8002b8c:	2220      	movmi	r2, #32
 8002b8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b92:	071a      	lsls	r2, r3, #28
 8002b94:	bf44      	itt	mi
 8002b96:	222b      	movmi	r2, #43	; 0x2b
 8002b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b9c:	782a      	ldrb	r2, [r5, #0]
 8002b9e:	2a2a      	cmp	r2, #42	; 0x2a
 8002ba0:	d015      	beq.n	8002bce <_svfiprintf_r+0xea>
 8002ba2:	9a07      	ldr	r2, [sp, #28]
 8002ba4:	462f      	mov	r7, r5
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	250a      	movs	r5, #10
 8002baa:	4639      	mov	r1, r7
 8002bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bb0:	3b30      	subs	r3, #48	; 0x30
 8002bb2:	2b09      	cmp	r3, #9
 8002bb4:	d94d      	bls.n	8002c52 <_svfiprintf_r+0x16e>
 8002bb6:	b1b8      	cbz	r0, 8002be8 <_svfiprintf_r+0x104>
 8002bb8:	e00f      	b.n	8002bda <_svfiprintf_r+0xf6>
 8002bba:	462f      	mov	r7, r5
 8002bbc:	e7b8      	b.n	8002b30 <_svfiprintf_r+0x4c>
 8002bbe:	4a40      	ldr	r2, [pc, #256]	; (8002cc0 <_svfiprintf_r+0x1dc>)
 8002bc0:	1a80      	subs	r0, r0, r2
 8002bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8002bc6:	4318      	orrs	r0, r3
 8002bc8:	9004      	str	r0, [sp, #16]
 8002bca:	463d      	mov	r5, r7
 8002bcc:	e7d3      	b.n	8002b76 <_svfiprintf_r+0x92>
 8002bce:	9a03      	ldr	r2, [sp, #12]
 8002bd0:	1d11      	adds	r1, r2, #4
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	9103      	str	r1, [sp, #12]
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	db01      	blt.n	8002bde <_svfiprintf_r+0xfa>
 8002bda:	9207      	str	r2, [sp, #28]
 8002bdc:	e004      	b.n	8002be8 <_svfiprintf_r+0x104>
 8002bde:	4252      	negs	r2, r2
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	9207      	str	r2, [sp, #28]
 8002be6:	9304      	str	r3, [sp, #16]
 8002be8:	783b      	ldrb	r3, [r7, #0]
 8002bea:	2b2e      	cmp	r3, #46	; 0x2e
 8002bec:	d10c      	bne.n	8002c08 <_svfiprintf_r+0x124>
 8002bee:	787b      	ldrb	r3, [r7, #1]
 8002bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8002bf2:	d133      	bne.n	8002c5c <_svfiprintf_r+0x178>
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	9203      	str	r2, [sp, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bfb8      	it	lt
 8002c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c04:	3702      	adds	r7, #2
 8002c06:	9305      	str	r3, [sp, #20]
 8002c08:	4d2e      	ldr	r5, [pc, #184]	; (8002cc4 <_svfiprintf_r+0x1e0>)
 8002c0a:	7839      	ldrb	r1, [r7, #0]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f7fd fade 	bl	80001d0 <memchr>
 8002c14:	b138      	cbz	r0, 8002c26 <_svfiprintf_r+0x142>
 8002c16:	2340      	movs	r3, #64	; 0x40
 8002c18:	1b40      	subs	r0, r0, r5
 8002c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c1e:	9b04      	ldr	r3, [sp, #16]
 8002c20:	4303      	orrs	r3, r0
 8002c22:	3701      	adds	r7, #1
 8002c24:	9304      	str	r3, [sp, #16]
 8002c26:	7839      	ldrb	r1, [r7, #0]
 8002c28:	4827      	ldr	r0, [pc, #156]	; (8002cc8 <_svfiprintf_r+0x1e4>)
 8002c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c2e:	2206      	movs	r2, #6
 8002c30:	1c7e      	adds	r6, r7, #1
 8002c32:	f7fd facd 	bl	80001d0 <memchr>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d038      	beq.n	8002cac <_svfiprintf_r+0x1c8>
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <_svfiprintf_r+0x1e8>)
 8002c3c:	bb13      	cbnz	r3, 8002c84 <_svfiprintf_r+0x1a0>
 8002c3e:	9b03      	ldr	r3, [sp, #12]
 8002c40:	3307      	adds	r3, #7
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	3308      	adds	r3, #8
 8002c48:	9303      	str	r3, [sp, #12]
 8002c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c4c:	444b      	add	r3, r9
 8002c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c50:	e76d      	b.n	8002b2e <_svfiprintf_r+0x4a>
 8002c52:	fb05 3202 	mla	r2, r5, r2, r3
 8002c56:	2001      	movs	r0, #1
 8002c58:	460f      	mov	r7, r1
 8002c5a:	e7a6      	b.n	8002baa <_svfiprintf_r+0xc6>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	3701      	adds	r7, #1
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	4619      	mov	r1, r3
 8002c64:	250a      	movs	r5, #10
 8002c66:	4638      	mov	r0, r7
 8002c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c6c:	3a30      	subs	r2, #48	; 0x30
 8002c6e:	2a09      	cmp	r2, #9
 8002c70:	d903      	bls.n	8002c7a <_svfiprintf_r+0x196>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0c8      	beq.n	8002c08 <_svfiprintf_r+0x124>
 8002c76:	9105      	str	r1, [sp, #20]
 8002c78:	e7c6      	b.n	8002c08 <_svfiprintf_r+0x124>
 8002c7a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4607      	mov	r7, r0
 8002c82:	e7f0      	b.n	8002c66 <_svfiprintf_r+0x182>
 8002c84:	ab03      	add	r3, sp, #12
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4622      	mov	r2, r4
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <_svfiprintf_r+0x1ec>)
 8002c8c:	a904      	add	r1, sp, #16
 8002c8e:	4640      	mov	r0, r8
 8002c90:	f3af 8000 	nop.w
 8002c94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c98:	4681      	mov	r9, r0
 8002c9a:	d1d6      	bne.n	8002c4a <_svfiprintf_r+0x166>
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	065b      	lsls	r3, r3, #25
 8002ca0:	f53f af35 	bmi.w	8002b0e <_svfiprintf_r+0x2a>
 8002ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ca6:	b01d      	add	sp, #116	; 0x74
 8002ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cac:	ab03      	add	r3, sp, #12
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_svfiprintf_r+0x1ec>)
 8002cb4:	a904      	add	r1, sp, #16
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	f000 f882 	bl	8002dc0 <_printf_i>
 8002cbc:	e7ea      	b.n	8002c94 <_svfiprintf_r+0x1b0>
 8002cbe:	bf00      	nop
 8002cc0:	08003254 	.word	0x08003254
 8002cc4:	0800325a 	.word	0x0800325a
 8002cc8:	0800325e 	.word	0x0800325e
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	08002a31 	.word	0x08002a31

08002cd4 <_printf_common>:
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	4691      	mov	r9, r2
 8002cda:	461f      	mov	r7, r3
 8002cdc:	688a      	ldr	r2, [r1, #8]
 8002cde:	690b      	ldr	r3, [r1, #16]
 8002ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bfb8      	it	lt
 8002ce8:	4613      	movlt	r3, r2
 8002cea:	f8c9 3000 	str.w	r3, [r9]
 8002cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	b112      	cbz	r2, 8002cfe <_printf_common+0x2a>
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8c9 3000 	str.w	r3, [r9]
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	0699      	lsls	r1, r3, #26
 8002d02:	bf42      	ittt	mi
 8002d04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d08:	3302      	addmi	r3, #2
 8002d0a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d0e:	6825      	ldr	r5, [r4, #0]
 8002d10:	f015 0506 	ands.w	r5, r5, #6
 8002d14:	d107      	bne.n	8002d26 <_printf_common+0x52>
 8002d16:	f104 0a19 	add.w	sl, r4, #25
 8002d1a:	68e3      	ldr	r3, [r4, #12]
 8002d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	42ab      	cmp	r3, r5
 8002d24:	dc28      	bgt.n	8002d78 <_printf_common+0xa4>
 8002d26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	3300      	adds	r3, #0
 8002d2e:	bf18      	it	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	0692      	lsls	r2, r2, #26
 8002d34:	d42d      	bmi.n	8002d92 <_printf_common+0xbe>
 8002d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	47c0      	blx	r8
 8002d40:	3001      	adds	r0, #1
 8002d42:	d020      	beq.n	8002d86 <_printf_common+0xb2>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	68e5      	ldr	r5, [r4, #12]
 8002d48:	f8d9 2000 	ldr.w	r2, [r9]
 8002d4c:	f003 0306 	and.w	r3, r3, #6
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	bf08      	it	eq
 8002d54:	1aad      	subeq	r5, r5, r2
 8002d56:	68a3      	ldr	r3, [r4, #8]
 8002d58:	6922      	ldr	r2, [r4, #16]
 8002d5a:	bf0c      	ite	eq
 8002d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d60:	2500      	movne	r5, #0
 8002d62:	4293      	cmp	r3, r2
 8002d64:	bfc4      	itt	gt
 8002d66:	1a9b      	subgt	r3, r3, r2
 8002d68:	18ed      	addgt	r5, r5, r3
 8002d6a:	f04f 0900 	mov.w	r9, #0
 8002d6e:	341a      	adds	r4, #26
 8002d70:	454d      	cmp	r5, r9
 8002d72:	d11a      	bne.n	8002daa <_printf_common+0xd6>
 8002d74:	2000      	movs	r0, #0
 8002d76:	e008      	b.n	8002d8a <_printf_common+0xb6>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4652      	mov	r2, sl
 8002d7c:	4639      	mov	r1, r7
 8002d7e:	4630      	mov	r0, r6
 8002d80:	47c0      	blx	r8
 8002d82:	3001      	adds	r0, #1
 8002d84:	d103      	bne.n	8002d8e <_printf_common+0xba>
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8e:	3501      	adds	r5, #1
 8002d90:	e7c3      	b.n	8002d1a <_printf_common+0x46>
 8002d92:	18e1      	adds	r1, r4, r3
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	2030      	movs	r0, #48	; 0x30
 8002d98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d9c:	4422      	add	r2, r4
 8002d9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002da2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002da6:	3302      	adds	r3, #2
 8002da8:	e7c5      	b.n	8002d36 <_printf_common+0x62>
 8002daa:	2301      	movs	r3, #1
 8002dac:	4622      	mov	r2, r4
 8002dae:	4639      	mov	r1, r7
 8002db0:	4630      	mov	r0, r6
 8002db2:	47c0      	blx	r8
 8002db4:	3001      	adds	r0, #1
 8002db6:	d0e6      	beq.n	8002d86 <_printf_common+0xb2>
 8002db8:	f109 0901 	add.w	r9, r9, #1
 8002dbc:	e7d8      	b.n	8002d70 <_printf_common+0x9c>
	...

08002dc0 <_printf_i>:
 8002dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002dc8:	460c      	mov	r4, r1
 8002dca:	7e09      	ldrb	r1, [r1, #24]
 8002dcc:	b085      	sub	sp, #20
 8002dce:	296e      	cmp	r1, #110	; 0x6e
 8002dd0:	4617      	mov	r7, r2
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dd8:	f000 80b3 	beq.w	8002f42 <_printf_i+0x182>
 8002ddc:	d822      	bhi.n	8002e24 <_printf_i+0x64>
 8002dde:	2963      	cmp	r1, #99	; 0x63
 8002de0:	d036      	beq.n	8002e50 <_printf_i+0x90>
 8002de2:	d80a      	bhi.n	8002dfa <_printf_i+0x3a>
 8002de4:	2900      	cmp	r1, #0
 8002de6:	f000 80b9 	beq.w	8002f5c <_printf_i+0x19c>
 8002dea:	2958      	cmp	r1, #88	; 0x58
 8002dec:	f000 8083 	beq.w	8002ef6 <_printf_i+0x136>
 8002df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002df8:	e032      	b.n	8002e60 <_printf_i+0xa0>
 8002dfa:	2964      	cmp	r1, #100	; 0x64
 8002dfc:	d001      	beq.n	8002e02 <_printf_i+0x42>
 8002dfe:	2969      	cmp	r1, #105	; 0x69
 8002e00:	d1f6      	bne.n	8002df0 <_printf_i+0x30>
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	0605      	lsls	r5, r0, #24
 8002e08:	f103 0104 	add.w	r1, r3, #4
 8002e0c:	d52a      	bpl.n	8002e64 <_printf_i+0xa4>
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da03      	bge.n	8002e1e <_printf_i+0x5e>
 8002e16:	222d      	movs	r2, #45	; 0x2d
 8002e18:	425b      	negs	r3, r3
 8002e1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e1e:	486f      	ldr	r0, [pc, #444]	; (8002fdc <_printf_i+0x21c>)
 8002e20:	220a      	movs	r2, #10
 8002e22:	e039      	b.n	8002e98 <_printf_i+0xd8>
 8002e24:	2973      	cmp	r1, #115	; 0x73
 8002e26:	f000 809d 	beq.w	8002f64 <_printf_i+0x1a4>
 8002e2a:	d808      	bhi.n	8002e3e <_printf_i+0x7e>
 8002e2c:	296f      	cmp	r1, #111	; 0x6f
 8002e2e:	d020      	beq.n	8002e72 <_printf_i+0xb2>
 8002e30:	2970      	cmp	r1, #112	; 0x70
 8002e32:	d1dd      	bne.n	8002df0 <_printf_i+0x30>
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	e003      	b.n	8002e46 <_printf_i+0x86>
 8002e3e:	2975      	cmp	r1, #117	; 0x75
 8002e40:	d017      	beq.n	8002e72 <_printf_i+0xb2>
 8002e42:	2978      	cmp	r1, #120	; 0x78
 8002e44:	d1d4      	bne.n	8002df0 <_printf_i+0x30>
 8002e46:	2378      	movs	r3, #120	; 0x78
 8002e48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e4c:	4864      	ldr	r0, [pc, #400]	; (8002fe0 <_printf_i+0x220>)
 8002e4e:	e055      	b.n	8002efc <_printf_i+0x13c>
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	1d19      	adds	r1, r3, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6011      	str	r1, [r2, #0]
 8002e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e60:	2301      	movs	r3, #1
 8002e62:	e08c      	b.n	8002f7e <_printf_i+0x1be>
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6011      	str	r1, [r2, #0]
 8002e68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e6c:	bf18      	it	ne
 8002e6e:	b21b      	sxthne	r3, r3
 8002e70:	e7cf      	b.n	8002e12 <_printf_i+0x52>
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	6825      	ldr	r5, [r4, #0]
 8002e76:	1d18      	adds	r0, r3, #4
 8002e78:	6010      	str	r0, [r2, #0]
 8002e7a:	0628      	lsls	r0, r5, #24
 8002e7c:	d501      	bpl.n	8002e82 <_printf_i+0xc2>
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e002      	b.n	8002e88 <_printf_i+0xc8>
 8002e82:	0668      	lsls	r0, r5, #25
 8002e84:	d5fb      	bpl.n	8002e7e <_printf_i+0xbe>
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	4854      	ldr	r0, [pc, #336]	; (8002fdc <_printf_i+0x21c>)
 8002e8a:	296f      	cmp	r1, #111	; 0x6f
 8002e8c:	bf14      	ite	ne
 8002e8e:	220a      	movne	r2, #10
 8002e90:	2208      	moveq	r2, #8
 8002e92:	2100      	movs	r1, #0
 8002e94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e98:	6865      	ldr	r5, [r4, #4]
 8002e9a:	60a5      	str	r5, [r4, #8]
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	f2c0 8095 	blt.w	8002fcc <_printf_i+0x20c>
 8002ea2:	6821      	ldr	r1, [r4, #0]
 8002ea4:	f021 0104 	bic.w	r1, r1, #4
 8002ea8:	6021      	str	r1, [r4, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d13d      	bne.n	8002f2a <_printf_i+0x16a>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	f040 808e 	bne.w	8002fd0 <_printf_i+0x210>
 8002eb4:	4665      	mov	r5, ip
 8002eb6:	2a08      	cmp	r2, #8
 8002eb8:	d10b      	bne.n	8002ed2 <_printf_i+0x112>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d508      	bpl.n	8002ed2 <_printf_i+0x112>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	bfde      	ittt	le
 8002ec8:	2330      	movle	r3, #48	; 0x30
 8002eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ed2:	ebac 0305 	sub.w	r3, ip, r5
 8002ed6:	6123      	str	r3, [r4, #16]
 8002ed8:	f8cd 8000 	str.w	r8, [sp]
 8002edc:	463b      	mov	r3, r7
 8002ede:	aa03      	add	r2, sp, #12
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff fef6 	bl	8002cd4 <_printf_common>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d14d      	bne.n	8002f88 <_printf_i+0x1c8>
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	b005      	add	sp, #20
 8002ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <_printf_i+0x21c>)
 8002ef8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002efc:	6813      	ldr	r3, [r2, #0]
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	1d1d      	adds	r5, r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6015      	str	r5, [r2, #0]
 8002f06:	060a      	lsls	r2, r1, #24
 8002f08:	d50b      	bpl.n	8002f22 <_printf_i+0x162>
 8002f0a:	07ca      	lsls	r2, r1, #31
 8002f0c:	bf44      	itt	mi
 8002f0e:	f041 0120 	orrmi.w	r1, r1, #32
 8002f12:	6021      	strmi	r1, [r4, #0]
 8002f14:	b91b      	cbnz	r3, 8002f1e <_printf_i+0x15e>
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	f022 0220 	bic.w	r2, r2, #32
 8002f1c:	6022      	str	r2, [r4, #0]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	e7b7      	b.n	8002e92 <_printf_i+0xd2>
 8002f22:	064d      	lsls	r5, r1, #25
 8002f24:	bf48      	it	mi
 8002f26:	b29b      	uxthmi	r3, r3
 8002f28:	e7ef      	b.n	8002f0a <_printf_i+0x14a>
 8002f2a:	4665      	mov	r5, ip
 8002f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f30:	fb02 3311 	mls	r3, r2, r1, r3
 8002f34:	5cc3      	ldrb	r3, [r0, r3]
 8002f36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d1f5      	bne.n	8002f2c <_printf_i+0x16c>
 8002f40:	e7b9      	b.n	8002eb6 <_printf_i+0xf6>
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	6825      	ldr	r5, [r4, #0]
 8002f46:	6961      	ldr	r1, [r4, #20]
 8002f48:	1d18      	adds	r0, r3, #4
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	0628      	lsls	r0, r5, #24
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	d501      	bpl.n	8002f56 <_printf_i+0x196>
 8002f52:	6019      	str	r1, [r3, #0]
 8002f54:	e002      	b.n	8002f5c <_printf_i+0x19c>
 8002f56:	066a      	lsls	r2, r5, #25
 8002f58:	d5fb      	bpl.n	8002f52 <_printf_i+0x192>
 8002f5a:	8019      	strh	r1, [r3, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6123      	str	r3, [r4, #16]
 8002f60:	4665      	mov	r5, ip
 8002f62:	e7b9      	b.n	8002ed8 <_printf_i+0x118>
 8002f64:	6813      	ldr	r3, [r2, #0]
 8002f66:	1d19      	adds	r1, r3, #4
 8002f68:	6011      	str	r1, [r2, #0]
 8002f6a:	681d      	ldr	r5, [r3, #0]
 8002f6c:	6862      	ldr	r2, [r4, #4]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4628      	mov	r0, r5
 8002f72:	f7fd f92d 	bl	80001d0 <memchr>
 8002f76:	b108      	cbz	r0, 8002f7c <_printf_i+0x1bc>
 8002f78:	1b40      	subs	r0, r0, r5
 8002f7a:	6060      	str	r0, [r4, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	6123      	str	r3, [r4, #16]
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f86:	e7a7      	b.n	8002ed8 <_printf_i+0x118>
 8002f88:	6923      	ldr	r3, [r4, #16]
 8002f8a:	462a      	mov	r2, r5
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	47c0      	blx	r8
 8002f92:	3001      	adds	r0, #1
 8002f94:	d0aa      	beq.n	8002eec <_printf_i+0x12c>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	079b      	lsls	r3, r3, #30
 8002f9a:	d413      	bmi.n	8002fc4 <_printf_i+0x204>
 8002f9c:	68e0      	ldr	r0, [r4, #12]
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	bfb8      	it	lt
 8002fa4:	4618      	movlt	r0, r3
 8002fa6:	e7a3      	b.n	8002ef0 <_printf_i+0x130>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	464a      	mov	r2, r9
 8002fac:	4639      	mov	r1, r7
 8002fae:	4630      	mov	r0, r6
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d09a      	beq.n	8002eec <_printf_i+0x12c>
 8002fb6:	3501      	adds	r5, #1
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	9a03      	ldr	r2, [sp, #12]
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	42ab      	cmp	r3, r5
 8002fc0:	dcf2      	bgt.n	8002fa8 <_printf_i+0x1e8>
 8002fc2:	e7eb      	b.n	8002f9c <_printf_i+0x1dc>
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	f104 0919 	add.w	r9, r4, #25
 8002fca:	e7f5      	b.n	8002fb8 <_printf_i+0x1f8>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ac      	bne.n	8002f2a <_printf_i+0x16a>
 8002fd0:	7803      	ldrb	r3, [r0, #0]
 8002fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fda:	e76c      	b.n	8002eb6 <_printf_i+0xf6>
 8002fdc:	08003265 	.word	0x08003265
 8002fe0:	08003276 	.word	0x08003276

08002fe4 <memcpy>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	1e43      	subs	r3, r0, #1
 8002fe8:	440a      	add	r2, r1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	d100      	bne.n	8002ff0 <memcpy+0xc>
 8002fee:	bd10      	pop	{r4, pc}
 8002ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff8:	e7f7      	b.n	8002fea <memcpy+0x6>

08002ffa <memmove>:
 8002ffa:	4288      	cmp	r0, r1
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	eb01 0302 	add.w	r3, r1, r2
 8003002:	d807      	bhi.n	8003014 <memmove+0x1a>
 8003004:	1e42      	subs	r2, r0, #1
 8003006:	4299      	cmp	r1, r3
 8003008:	d00a      	beq.n	8003020 <memmove+0x26>
 800300a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800300e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003012:	e7f8      	b.n	8003006 <memmove+0xc>
 8003014:	4283      	cmp	r3, r0
 8003016:	d9f5      	bls.n	8003004 <memmove+0xa>
 8003018:	1881      	adds	r1, r0, r2
 800301a:	1ad2      	subs	r2, r2, r3
 800301c:	42d3      	cmn	r3, r2
 800301e:	d100      	bne.n	8003022 <memmove+0x28>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003026:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800302a:	e7f7      	b.n	800301c <memmove+0x22>

0800302c <_free_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	4605      	mov	r5, r0
 8003030:	2900      	cmp	r1, #0
 8003032:	d045      	beq.n	80030c0 <_free_r+0x94>
 8003034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003038:	1f0c      	subs	r4, r1, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	bfb8      	it	lt
 800303e:	18e4      	addlt	r4, r4, r3
 8003040:	f000 f8d2 	bl	80031e8 <__malloc_lock>
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <_free_r+0x98>)
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	4610      	mov	r0, r2
 800304a:	b933      	cbnz	r3, 800305a <_free_r+0x2e>
 800304c:	6063      	str	r3, [r4, #4]
 800304e:	6014      	str	r4, [r2, #0]
 8003050:	4628      	mov	r0, r5
 8003052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003056:	f000 b8c8 	b.w	80031ea <__malloc_unlock>
 800305a:	42a3      	cmp	r3, r4
 800305c:	d90c      	bls.n	8003078 <_free_r+0x4c>
 800305e:	6821      	ldr	r1, [r4, #0]
 8003060:	1862      	adds	r2, r4, r1
 8003062:	4293      	cmp	r3, r2
 8003064:	bf04      	itt	eq
 8003066:	681a      	ldreq	r2, [r3, #0]
 8003068:	685b      	ldreq	r3, [r3, #4]
 800306a:	6063      	str	r3, [r4, #4]
 800306c:	bf04      	itt	eq
 800306e:	1852      	addeq	r2, r2, r1
 8003070:	6022      	streq	r2, [r4, #0]
 8003072:	6004      	str	r4, [r0, #0]
 8003074:	e7ec      	b.n	8003050 <_free_r+0x24>
 8003076:	4613      	mov	r3, r2
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	b10a      	cbz	r2, 8003080 <_free_r+0x54>
 800307c:	42a2      	cmp	r2, r4
 800307e:	d9fa      	bls.n	8003076 <_free_r+0x4a>
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	1858      	adds	r0, r3, r1
 8003084:	42a0      	cmp	r0, r4
 8003086:	d10b      	bne.n	80030a0 <_free_r+0x74>
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	4401      	add	r1, r0
 800308c:	1858      	adds	r0, r3, r1
 800308e:	4282      	cmp	r2, r0
 8003090:	6019      	str	r1, [r3, #0]
 8003092:	d1dd      	bne.n	8003050 <_free_r+0x24>
 8003094:	6810      	ldr	r0, [r2, #0]
 8003096:	6852      	ldr	r2, [r2, #4]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	4401      	add	r1, r0
 800309c:	6019      	str	r1, [r3, #0]
 800309e:	e7d7      	b.n	8003050 <_free_r+0x24>
 80030a0:	d902      	bls.n	80030a8 <_free_r+0x7c>
 80030a2:	230c      	movs	r3, #12
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	e7d3      	b.n	8003050 <_free_r+0x24>
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	1821      	adds	r1, r4, r0
 80030ac:	428a      	cmp	r2, r1
 80030ae:	bf04      	itt	eq
 80030b0:	6811      	ldreq	r1, [r2, #0]
 80030b2:	6852      	ldreq	r2, [r2, #4]
 80030b4:	6062      	str	r2, [r4, #4]
 80030b6:	bf04      	itt	eq
 80030b8:	1809      	addeq	r1, r1, r0
 80030ba:	6021      	streq	r1, [r4, #0]
 80030bc:	605c      	str	r4, [r3, #4]
 80030be:	e7c7      	b.n	8003050 <_free_r+0x24>
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	20000090 	.word	0x20000090

080030c8 <_malloc_r>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	1ccd      	adds	r5, r1, #3
 80030cc:	f025 0503 	bic.w	r5, r5, #3
 80030d0:	3508      	adds	r5, #8
 80030d2:	2d0c      	cmp	r5, #12
 80030d4:	bf38      	it	cc
 80030d6:	250c      	movcc	r5, #12
 80030d8:	2d00      	cmp	r5, #0
 80030da:	4606      	mov	r6, r0
 80030dc:	db01      	blt.n	80030e2 <_malloc_r+0x1a>
 80030de:	42a9      	cmp	r1, r5
 80030e0:	d903      	bls.n	80030ea <_malloc_r+0x22>
 80030e2:	230c      	movs	r3, #12
 80030e4:	6033      	str	r3, [r6, #0]
 80030e6:	2000      	movs	r0, #0
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	f000 f87d 	bl	80031e8 <__malloc_lock>
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <_malloc_r+0xac>)
 80030f0:	6814      	ldr	r4, [r2, #0]
 80030f2:	4621      	mov	r1, r4
 80030f4:	b991      	cbnz	r1, 800311c <_malloc_r+0x54>
 80030f6:	4c20      	ldr	r4, [pc, #128]	; (8003178 <_malloc_r+0xb0>)
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	b91b      	cbnz	r3, 8003104 <_malloc_r+0x3c>
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 f863 	bl	80031c8 <_sbrk_r>
 8003102:	6020      	str	r0, [r4, #0]
 8003104:	4629      	mov	r1, r5
 8003106:	4630      	mov	r0, r6
 8003108:	f000 f85e 	bl	80031c8 <_sbrk_r>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d124      	bne.n	800315a <_malloc_r+0x92>
 8003110:	230c      	movs	r3, #12
 8003112:	6033      	str	r3, [r6, #0]
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f868 	bl	80031ea <__malloc_unlock>
 800311a:	e7e4      	b.n	80030e6 <_malloc_r+0x1e>
 800311c:	680b      	ldr	r3, [r1, #0]
 800311e:	1b5b      	subs	r3, r3, r5
 8003120:	d418      	bmi.n	8003154 <_malloc_r+0x8c>
 8003122:	2b0b      	cmp	r3, #11
 8003124:	d90f      	bls.n	8003146 <_malloc_r+0x7e>
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	50cd      	str	r5, [r1, r3]
 800312a:	18cc      	adds	r4, r1, r3
 800312c:	4630      	mov	r0, r6
 800312e:	f000 f85c 	bl	80031ea <__malloc_unlock>
 8003132:	f104 000b 	add.w	r0, r4, #11
 8003136:	1d23      	adds	r3, r4, #4
 8003138:	f020 0007 	bic.w	r0, r0, #7
 800313c:	1ac3      	subs	r3, r0, r3
 800313e:	d0d3      	beq.n	80030e8 <_malloc_r+0x20>
 8003140:	425a      	negs	r2, r3
 8003142:	50e2      	str	r2, [r4, r3]
 8003144:	e7d0      	b.n	80030e8 <_malloc_r+0x20>
 8003146:	428c      	cmp	r4, r1
 8003148:	684b      	ldr	r3, [r1, #4]
 800314a:	bf16      	itet	ne
 800314c:	6063      	strne	r3, [r4, #4]
 800314e:	6013      	streq	r3, [r2, #0]
 8003150:	460c      	movne	r4, r1
 8003152:	e7eb      	b.n	800312c <_malloc_r+0x64>
 8003154:	460c      	mov	r4, r1
 8003156:	6849      	ldr	r1, [r1, #4]
 8003158:	e7cc      	b.n	80030f4 <_malloc_r+0x2c>
 800315a:	1cc4      	adds	r4, r0, #3
 800315c:	f024 0403 	bic.w	r4, r4, #3
 8003160:	42a0      	cmp	r0, r4
 8003162:	d005      	beq.n	8003170 <_malloc_r+0xa8>
 8003164:	1a21      	subs	r1, r4, r0
 8003166:	4630      	mov	r0, r6
 8003168:	f000 f82e 	bl	80031c8 <_sbrk_r>
 800316c:	3001      	adds	r0, #1
 800316e:	d0cf      	beq.n	8003110 <_malloc_r+0x48>
 8003170:	6025      	str	r5, [r4, #0]
 8003172:	e7db      	b.n	800312c <_malloc_r+0x64>
 8003174:	20000090 	.word	0x20000090
 8003178:	20000094 	.word	0x20000094

0800317c <_realloc_r>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	4607      	mov	r7, r0
 8003180:	4614      	mov	r4, r2
 8003182:	460e      	mov	r6, r1
 8003184:	b921      	cbnz	r1, 8003190 <_realloc_r+0x14>
 8003186:	4611      	mov	r1, r2
 8003188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800318c:	f7ff bf9c 	b.w	80030c8 <_malloc_r>
 8003190:	b922      	cbnz	r2, 800319c <_realloc_r+0x20>
 8003192:	f7ff ff4b 	bl	800302c <_free_r>
 8003196:	4625      	mov	r5, r4
 8003198:	4628      	mov	r0, r5
 800319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800319c:	f000 f826 	bl	80031ec <_malloc_usable_size_r>
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	d20f      	bcs.n	80031c4 <_realloc_r+0x48>
 80031a4:	4621      	mov	r1, r4
 80031a6:	4638      	mov	r0, r7
 80031a8:	f7ff ff8e 	bl	80030c8 <_malloc_r>
 80031ac:	4605      	mov	r5, r0
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d0f2      	beq.n	8003198 <_realloc_r+0x1c>
 80031b2:	4631      	mov	r1, r6
 80031b4:	4622      	mov	r2, r4
 80031b6:	f7ff ff15 	bl	8002fe4 <memcpy>
 80031ba:	4631      	mov	r1, r6
 80031bc:	4638      	mov	r0, r7
 80031be:	f7ff ff35 	bl	800302c <_free_r>
 80031c2:	e7e9      	b.n	8003198 <_realloc_r+0x1c>
 80031c4:	4635      	mov	r5, r6
 80031c6:	e7e7      	b.n	8003198 <_realloc_r+0x1c>

080031c8 <_sbrk_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4c06      	ldr	r4, [pc, #24]	; (80031e4 <_sbrk_r+0x1c>)
 80031cc:	2300      	movs	r3, #0
 80031ce:	4605      	mov	r5, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	f7ff fb3a 	bl	800284c <_sbrk>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_sbrk_r+0x1a>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_sbrk_r+0x1a>
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000110 	.word	0x20000110

080031e8 <__malloc_lock>:
 80031e8:	4770      	bx	lr

080031ea <__malloc_unlock>:
 80031ea:	4770      	bx	lr

080031ec <_malloc_usable_size_r>:
 80031ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f0:	1f18      	subs	r0, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfbc      	itt	lt
 80031f6:	580b      	ldrlt	r3, [r1, r0]
 80031f8:	18c0      	addlt	r0, r0, r3
 80031fa:	4770      	bx	lr

080031fc <_init>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr

08003208 <_fini>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr
