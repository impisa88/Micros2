
exer1_relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe4  08002fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  0800305c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800305c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b37b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001727  00000000  00000000  0002b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  0002cb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001be81  00000000  00000000  0002d680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067ef  00000000  00000000  00049501  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bb2d  00000000  00000000  0004fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb81d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ec  00000000  00000000  000eb898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f4c 	.word	0x08002f4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002f4c 	.word	0x08002f4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f92f 	bl	80004e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f002 f8f2 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f939 	bl	8000532 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f000 f90f 	bl	80004fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000098 	.word	0x20000098

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <NVIC_SetPriorityGrouping+0x44>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <NVIC_GetPriorityGrouping+0x18>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	f003 0307 	and.w	r3, r3, #7
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	da0b      	bge.n	8000410 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	490c      	ldr	r1, [pc, #48]	; (8000430 <NVIC_SetPriority+0x4c>)
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 030f 	and.w	r3, r3, #15
 8000404:	3b04      	subs	r3, #4
 8000406:	0112      	lsls	r2, r2, #4
 8000408:	b2d2      	uxtb	r2, r2
 800040a:	440b      	add	r3, r1
 800040c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800040e:	e009      	b.n	8000424 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <NVIC_SetPriority+0x50>)
 8000416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041a:	0112      	lsls	r2, r2, #4
 800041c:	b2d2      	uxtb	r2, r2
 800041e:	440b      	add	r3, r1
 8000420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	e000ed00 	.word	0xe000ed00
 8000434:	e000e100 	.word	0xe000e100

08000438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000438:	b480      	push	{r7}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f003 0307 	and.w	r3, r3, #7
 800044a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	f1c3 0307 	rsb	r3, r3, #7
 8000452:	2b04      	cmp	r3, #4
 8000454:	bf28      	it	cs
 8000456:	2304      	movcs	r3, #4
 8000458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3304      	adds	r3, #4
 800045e:	2b06      	cmp	r3, #6
 8000460:	d902      	bls.n	8000468 <NVIC_EncodePriority+0x30>
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	3b03      	subs	r3, #3
 8000466:	e000      	b.n	800046a <NVIC_EncodePriority+0x32>
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	f04f 32ff 	mov.w	r2, #4294967295
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	43da      	mvns	r2, r3
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	401a      	ands	r2, r3
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000480:	f04f 31ff 	mov.w	r1, #4294967295
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	43d9      	mvns	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000490:	4313      	orrs	r3, r2
         );
}
 8000492:	4618      	mov	r0, r3
 8000494:	3724      	adds	r7, #36	; 0x24
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004b0:	d301      	bcc.n	80004b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004b2:	2301      	movs	r3, #1
 80004b4:	e00f      	b.n	80004d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <SysTick_Config+0x40>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004be:	210f      	movs	r1, #15
 80004c0:	f04f 30ff 	mov.w	r0, #4294967295
 80004c4:	f7ff ff8e 	bl	80003e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SysTick_Config+0x40>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SysTick_Config+0x40>)
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	e000e010 	.word	0xe000e010

080004e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ff47 	bl	8000380 <NVIC_SetPriorityGrouping>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800050c:	f7ff ff5c 	bl	80003c8 <NVIC_GetPriorityGrouping>
 8000510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	68b9      	ldr	r1, [r7, #8]
 8000516:	6978      	ldr	r0, [r7, #20]
 8000518:	f7ff ff8e 	bl	8000438 <NVIC_EncodePriority>
 800051c:	4602      	mov	r2, r0
 800051e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff5d 	bl	80003e4 <NVIC_SetPriority>
}
 800052a:	bf00      	nop
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ffb0 	bl	80004a0 <SysTick_Config>
 8000540:	4603      	mov	r3, r0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000562:	e14e      	b.n	8000802 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	2101      	movs	r1, #1
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	f000 8140 	beq.w	80007fc <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d003      	beq.n	800058c <HAL_GPIO_Init+0x40>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b12      	cmp	r3, #18
 800058a:	d123      	bne.n	80005d4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	08da      	lsrs	r2, r3, #3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3208      	adds	r2, #8
 8000594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000598:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	220f      	movs	r2, #15
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	691a      	ldr	r2, [r3, #16]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	08da      	lsrs	r2, r3, #3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3208      	adds	r2, #8
 80005ce:	6939      	ldr	r1, [r7, #16]
 80005d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	2203      	movs	r2, #3
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f003 0203 	and.w	r2, r3, #3
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	4313      	orrs	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <HAL_GPIO_Init+0xdc>
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d007      	beq.n	8000628 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800061c:	2b11      	cmp	r3, #17
 800061e:	d003      	beq.n	8000628 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b12      	cmp	r3, #18
 8000626:	d130      	bne.n	800068a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	2203      	movs	r2, #3
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68da      	ldr	r2, [r3, #12]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4313      	orrs	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800065e:	2201      	movs	r2, #1
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4013      	ands	r3, r2
 800066c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	f003 0201 	and.w	r2, r3, #1
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	4313      	orrs	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2203      	movs	r2, #3
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4013      	ands	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 809a 	beq.w	80007fc <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c8:	4b55      	ldr	r3, [pc, #340]	; (8000820 <HAL_GPIO_Init+0x2d4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a54      	ldr	r2, [pc, #336]	; (8000820 <HAL_GPIO_Init+0x2d4>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b52      	ldr	r3, [pc, #328]	; (8000820 <HAL_GPIO_Init+0x2d4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006e0:	4a50      	ldr	r2, [pc, #320]	; (8000824 <HAL_GPIO_Init+0x2d8>)
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	3302      	adds	r3, #2
 80006e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	f003 0303 	and.w	r3, r3, #3
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	220f      	movs	r2, #15
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800070a:	d013      	beq.n	8000734 <HAL_GPIO_Init+0x1e8>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a46      	ldr	r2, [pc, #280]	; (8000828 <HAL_GPIO_Init+0x2dc>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d00d      	beq.n	8000730 <HAL_GPIO_Init+0x1e4>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a45      	ldr	r2, [pc, #276]	; (800082c <HAL_GPIO_Init+0x2e0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d007      	beq.n	800072c <HAL_GPIO_Init+0x1e0>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a44      	ldr	r2, [pc, #272]	; (8000830 <HAL_GPIO_Init+0x2e4>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d101      	bne.n	8000728 <HAL_GPIO_Init+0x1dc>
 8000724:	2303      	movs	r3, #3
 8000726:	e006      	b.n	8000736 <HAL_GPIO_Init+0x1ea>
 8000728:	2305      	movs	r3, #5
 800072a:	e004      	b.n	8000736 <HAL_GPIO_Init+0x1ea>
 800072c:	2302      	movs	r3, #2
 800072e:	e002      	b.n	8000736 <HAL_GPIO_Init+0x1ea>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <HAL_GPIO_Init+0x1ea>
 8000734:	2300      	movs	r3, #0
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	f002 0203 	and.w	r2, r2, #3
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	4093      	lsls	r3, r2
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	4313      	orrs	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000746:	4937      	ldr	r1, [pc, #220]	; (8000824 <HAL_GPIO_Init+0x2d8>)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	3302      	adds	r3, #2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	43db      	mvns	r3, r3
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4313      	orrs	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000778:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	43db      	mvns	r3, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4313      	orrs	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	43db      	mvns	r3, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_GPIO_Init+0x2e8>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	fa22 f303 	lsr.w	r3, r2, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	f47f aea9 	bne.w	8000564 <HAL_GPIO_Init+0x18>
  }
}
 8000812:	bf00      	nop
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800
 8000830:	48000c00 	.word	0x48000c00
 8000834:	40010400 	.word	0x40010400

08000838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
 8000844:	4613      	mov	r3, r2
 8000846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000848:	787b      	ldrb	r3, [r7, #1]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800084e:	887a      	ldrh	r2, [r7, #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000854:	e002      	b.n	800085c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000856:	887a      	ldrh	r2, [r7, #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	405a      	eors	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	615a      	str	r2, [r3, #20]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000892:	af00      	add	r7, sp, #0
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	f000 beda 	b.w	800165a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f000 816e 	beq.w	8000b92 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008b6:	4bb5      	ldr	r3, [pc, #724]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d00c      	beq.n	80008dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008c2:	4bb2      	ldr	r3, [pc, #712]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d15a      	bne.n	8000984 <HAL_RCC_OscConfig+0xf8>
 80008ce:	4baf      	ldr	r3, [pc, #700]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008da:	d153      	bne.n	8000984 <HAL_RCC_OscConfig+0xf8>
 80008dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008e8:	fa93 f3a3 	rbit	r3, r3
 80008ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f4:	fab3 f383 	clz	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b01      	cmp	r3, #1
 8000906:	d102      	bne.n	800090e <HAL_RCC_OscConfig+0x82>
 8000908:	4ba0      	ldr	r3, [pc, #640]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	e015      	b.n	800093a <HAL_RCC_OscConfig+0xae>
 800090e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000912:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000916:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000926:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800092a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800092e:	fa93 f3a3 	rbit	r3, r3
 8000932:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800093e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000942:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000946:	fa92 f2a2 	rbit	r2, r2
 800094a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800094e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000952:	fab2 f282 	clz	r2, r2
 8000956:	b252      	sxtb	r2, r2
 8000958:	f042 0220 	orr.w	r2, r2, #32
 800095c:	b252      	sxtb	r2, r2
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	f002 021f 	and.w	r2, r2, #31
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	4013      	ands	r3, r2
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 810f 	beq.w	8000b90 <HAL_RCC_OscConfig+0x304>
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f040 8109 	bne.w	8000b90 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	f000 be6b 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800098e:	d106      	bne.n	800099e <HAL_RCC_OscConfig+0x112>
 8000990:	4b7e      	ldr	r3, [pc, #504]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a7d      	ldr	r2, [pc, #500]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e030      	b.n	8000a00 <HAL_RCC_OscConfig+0x174>
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10c      	bne.n	80009c2 <HAL_RCC_OscConfig+0x136>
 80009a8:	4b78      	ldr	r3, [pc, #480]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a77      	ldr	r2, [pc, #476]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b75      	ldr	r3, [pc, #468]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a74      	ldr	r2, [pc, #464]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e01e      	b.n	8000a00 <HAL_RCC_OscConfig+0x174>
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009cc:	d10c      	bne.n	80009e8 <HAL_RCC_OscConfig+0x15c>
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a6e      	ldr	r2, [pc, #440]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a6b      	ldr	r2, [pc, #428]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e00b      	b.n	8000a00 <HAL_RCC_OscConfig+0x174>
 80009e8:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a67      	ldr	r2, [pc, #412]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 80009fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	f023 020f 	bic.w	r2, r3, #15
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	495f      	ldr	r1, [pc, #380]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d05a      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fc81 	bl	8000324 <HAL_GetTick>
 8000a22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a26:	e00a      	b.n	8000a3e <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a28:	f7ff fc7c 	bl	8000324 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d902      	bls.n	8000a3e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	f000 be0e 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
 8000a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a42:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a46:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a4a:	fa93 f3a3 	rbit	r3, r3
 8000a4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	095b      	lsrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d102      	bne.n	8000a70 <HAL_RCC_OscConfig+0x1e4>
 8000a6a:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	e015      	b.n	8000a9c <HAL_RCC_OscConfig+0x210>
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a7c:	fa93 f3a3 	rbit	r3, r3
 8000a80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a8c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a90:	fa93 f3a3 	rbit	r3, r3
 8000a94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a98:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000aa4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000aa8:	fa92 f2a2 	rbit	r2, r2
 8000aac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000ab0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ab4:	fab2 f282 	clz	r2, r2
 8000ab8:	b252      	sxtb	r2, r2
 8000aba:	f042 0220 	orr.w	r2, r2, #32
 8000abe:	b252      	sxtb	r2, r2
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	f002 021f 	and.w	r2, r2, #31
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0aa      	beq.n	8000a28 <HAL_RCC_OscConfig+0x19c>
 8000ad2:	e05e      	b.n	8000b92 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fc26 	bl	8000324 <HAL_GetTick>
 8000ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000adc:	e00a      	b.n	8000af4 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ade:	f7ff fc21 	bl	8000324 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d902      	bls.n	8000af4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f000 bdb3 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
 8000af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b00:	fa93 f3a3 	rbit	r3, r3
 8000b04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d102      	bne.n	8000b26 <HAL_RCC_OscConfig+0x29a>
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	e015      	b.n	8000b52 <HAL_RCC_OscConfig+0x2c6>
 8000b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_RCC_OscConfig+0x300>)
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b56:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b5e:	fa92 f2a2 	rbit	r2, r2
 8000b62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b6a:	fab2 f282 	clz	r2, r2
 8000b6e:	b252      	sxtb	r2, r2
 8000b70:	f042 0220 	orr.w	r2, r2, #32
 8000b74:	b252      	sxtb	r2, r2
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	f002 021f 	and.w	r2, r2, #31
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1aa      	bne.n	8000ade <HAL_RCC_OscConfig+0x252>
 8000b88:	e003      	b.n	8000b92 <HAL_RCC_OscConfig+0x306>
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 8170 	beq.w	8000e82 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ba2:	4bd0      	ldr	r3, [pc, #832]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bae:	4bcd      	ldr	r3, [pc, #820]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d16d      	bne.n	8000c96 <HAL_RCC_OscConfig+0x40a>
 8000bba:	4bca      	ldr	r3, [pc, #808]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d167      	bne.n	8000c96 <HAL_RCC_OscConfig+0x40a>
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000bd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bdc:	fab3 f383 	clz	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d102      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x36a>
 8000bf0:	4bbc      	ldr	r3, [pc, #752]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	e013      	b.n	8000c1e <HAL_RCC_OscConfig+0x392>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c00:	fa93 f3a3 	rbit	r3, r3
 8000c04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c0e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c1a:	4bb2      	ldr	r3, [pc, #712]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	2202      	movs	r2, #2
 8000c20:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c24:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c28:	fa92 f2a2 	rbit	r2, r2
 8000c2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	b252      	sxtb	r2, r2
 8000c3a:	f042 0220 	orr.w	r2, r2, #32
 8000c3e:	b252      	sxtb	r2, r2
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	f002 021f 	and.w	r2, r2, #31
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <HAL_RCC_OscConfig+0x3d6>
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d002      	beq.n	8000c62 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f000 bcfc 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4ba0      	ldr	r3, [pc, #640]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6959      	ldr	r1, [r3, #20]
 8000c70:	23f8      	movs	r3, #248	; 0xf8
 8000c72:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c76:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c7a:	fa93 f3a3 	rbit	r3, r3
 8000c7e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c86:	fab3 f383 	clz	r3, r3
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	4995      	ldr	r1, [pc, #596]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c94:	e0f5      	b.n	8000e82 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 8085 	beq.w	8000dac <HAL_RCC_OscConfig+0x520>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cac:	fa93 f3a3 	rbit	r3, r3
 8000cb0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000cb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	fab3 f383 	clz	r3, r3
 8000cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2301      	movs	r3, #1
 8000cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fb2a 	bl	8000324 <HAL_GetTick>
 8000cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	e00a      	b.n	8000cec <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fb25 	bl	8000324 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d902      	bls.n	8000cec <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f000 bcb7 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000cfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d02:	fab3 f383 	clz	r3, r3
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	095b      	lsrs	r3, r3, #5
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d102      	bne.n	8000d1c <HAL_RCC_OscConfig+0x490>
 8000d16:	4b73      	ldr	r3, [pc, #460]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	e013      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b8>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d34:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d40:	4b68      	ldr	r3, [pc, #416]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	2202      	movs	r2, #2
 8000d46:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d4a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d4e:	fa92 f2a2 	rbit	r2, r2
 8000d52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b252      	sxtb	r2, r2
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	b252      	sxtb	r2, r2
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f002 021f 	and.w	r2, r2, #31
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0ae      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6959      	ldr	r1, [r3, #20]
 8000d86:	23f8      	movs	r3, #248	; 0xf8
 8000d88:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d98:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	494f      	ldr	r1, [pc, #316]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	e06a      	b.n	8000e82 <HAL_RCC_OscConfig+0x5f6>
 8000dac:	2301      	movs	r3, #1
 8000dae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd6:	f7ff faa5 	bl	8000324 <HAL_GetTick>
 8000dda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	e00a      	b.n	8000df6 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff faa0 	bl	8000324 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d902      	bls.n	8000df6 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f000 bc32 	b.w	800165a <HAL_RCC_OscConfig+0xdce>
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_OscConfig+0x59a>
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	e013      	b.n	8000e4e <HAL_RCC_OscConfig+0x5c2>
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_RCC_OscConfig+0x658>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e54:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e58:	fa92 f2a2 	rbit	r2, r2
 8000e5c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	b252      	sxtb	r2, r2
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	b252      	sxtb	r2, r2
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	f002 021f 	and.w	r2, r2, #31
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1ae      	bne.n	8000de0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80d8 	beq.w	8001042 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d067      	beq.n	8000f6c <HAL_RCC_OscConfig+0x6e0>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_RCC_OscConfig+0x65c>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fa2e 	bl	8000324 <HAL_GetTick>
 8000ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ecc:	e00e      	b.n	8000eec <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fa29 	bl	8000324 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d906      	bls.n	8000eec <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e3bb      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	10908120 	.word	0x10908120
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f08:	fa93 f2a3 	rbit	r2, r3
 8000f0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f16:	2202      	movs	r2, #2
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	fa93 f2a3 	rbit	r2, r3
 8000f24:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	4ba5      	ldr	r3, [pc, #660]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8000f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f2e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f32:	2102      	movs	r1, #2
 8000f34:	6019      	str	r1, [r3, #0]
 8000f36:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	fa93 f1a3 	rbit	r1, r3
 8000f40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f44:	6019      	str	r1, [r3, #0]
  return(result);
 8000f46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0b1      	beq.n	8000ece <HAL_RCC_OscConfig+0x642>
 8000f6a:	e06a      	b.n	8001042 <HAL_RCC_OscConfig+0x7b6>
 8000f6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	fa93 f2a3 	rbit	r2, r3
 8000f7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f82:	601a      	str	r2, [r3, #0]
  return(result);
 8000f84:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <HAL_RCC_OscConfig+0x938>)
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff f9c2 	bl	8000324 <HAL_GetTick>
 8000fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	e009      	b.n	8000fba <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa6:	f7ff f9bd 	bl	8000324 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e34f      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 8000fba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	fa93 f2a3 	rbit	r2, r3
 8000fcc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	fa93 f2a3 	rbit	r2, r3
 8000fe4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fee:	2202      	movs	r2, #2
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	fa93 f2a3 	rbit	r2, r3
 8000ffc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001000:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800100a:	2102      	movs	r1, #2
 800100c:	6019      	str	r1, [r3, #0]
 800100e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	fa93 f1a3 	rbit	r1, r3
 8001018:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800101c:	6019      	str	r1, [r3, #0]
  return(result);
 800101e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b25b      	sxtb	r3, r3
 800102a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800102e:	b25b      	sxtb	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1b1      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8159 	beq.w	8001304 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d112      	bne.n	800108a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	61d3      	str	r3, [r2, #28]
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001084:	2301      	movs	r3, #1
 8001086:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x93c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11a      	bne.n	80010cc <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001096:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_RCC_OscConfig+0x93c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_RCC_OscConfig+0x93c>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a2:	f7ff f93f 	bl	8000324 <HAL_GetTick>
 80010a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010aa:	e009      	b.n	80010c0 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ac:	f7ff f93a 	bl	8000324 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b64      	cmp	r3, #100	; 0x64
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e2cc      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_OscConfig+0x93c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0ef      	beq.n	80010ac <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x858>
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	e02f      	b.n	8001144 <HAL_RCC_OscConfig+0x8b8>
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x87c>
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	6213      	str	r3, [r2, #32]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0x8b8>
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x8a0>
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0x8b8>
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06b      	beq.n	8001226 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff f8e9 	bl	8000324 <HAL_GetTick>
 8001152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff f8e4 	bl	8000324 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	; 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e274      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 8001170:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	fa93 f2a3 	rbit	r2, r3
 8001182:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	fa93 f2a3 	rbit	r2, r3
 800119a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800119e:	601a      	str	r2, [r3, #0]
  return(result);
 80011a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d108      	bne.n	80011cc <HAL_RCC_OscConfig+0x940>
 80011ba:	4b01      	ldr	r3, [pc, #4]	; (80011c0 <HAL_RCC_OscConfig+0x934>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	e013      	b.n	80011e8 <HAL_RCC_OscConfig+0x95c>
 80011c0:	40021000 	.word	0x40021000
 80011c4:	10908120 	.word	0x10908120
 80011c8:	40007000 	.word	0x40007000
 80011cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011d0:	2202      	movs	r2, #2
 80011d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fa93 f2a3 	rbit	r2, r3
 80011de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	4bbb      	ldr	r3, [pc, #748]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011ec:	2102      	movs	r1, #2
 80011ee:	6011      	str	r1, [r2, #0]
 80011f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	fa92 f1a2 	rbit	r1, r2
 80011fa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011fe:	6011      	str	r1, [r2, #0]
  return(result);
 8001200:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	fab2 f282 	clz	r2, r2
 800120a:	b252      	sxtb	r2, r2
 800120c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001210:	b252      	sxtb	r2, r2
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f002 021f 	and.w	r2, r2, #31
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d099      	beq.n	8001158 <HAL_RCC_OscConfig+0x8cc>
 8001224:	e064      	b.n	80012f0 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff f87d 	bl	8000324 <HAL_GetTick>
 800122a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001230:	f7ff f878 	bl	8000324 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e208      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 8001248:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800124c:	2202      	movs	r2, #2
 800124e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fa93 f2a3 	rbit	r2, r3
 800125a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2202      	movs	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	fa93 f2a3 	rbit	r2, r3
 8001272:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001276:	601a      	str	r2, [r3, #0]
  return(result);
 8001278:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800127c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0xa0c>
 8001292:	4b90      	ldr	r3, [pc, #576]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	e00d      	b.n	80012b4 <HAL_RCC_OscConfig+0xa28>
 8001298:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800129c:	2202      	movs	r2, #2
 800129e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fa93 f2a3 	rbit	r2, r3
 80012aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012b8:	2102      	movs	r1, #2
 80012ba:	6011      	str	r1, [r2, #0]
 80012bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	fa92 f1a2 	rbit	r1, r2
 80012c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ca:	6011      	str	r1, [r2, #0]
  return(result);
 80012cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	fab2 f282 	clz	r2, r2
 80012d6:	b252      	sxtb	r2, r2
 80012d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012dc:	b252      	sxtb	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f002 021f 	and.w	r2, r2, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d19f      	bne.n	8001230 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80012fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001302:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 81a4 	beq.w	8001658 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001310:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	f000 819b 	beq.w	8001654 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b02      	cmp	r3, #2
 8001326:	f040 8113 	bne.w	8001550 <HAL_RCC_OscConfig+0xcc4>
 800132a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800132e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fa93 f2a3 	rbit	r2, r3
 800133e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001342:	601a      	str	r2, [r3, #0]
  return(result);
 8001344:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001348:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2300      	movs	r3, #0
 800135c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7fe ffe1 	bl	8000324 <HAL_GetTick>
 8001362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	e009      	b.n	800137c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001368:	f7fe ffdc 	bl	8000324 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e16e      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 800137c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001394:	601a      	str	r2, [r3, #0]
  return(result);
 8001396:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800139a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0xb2a>
 80013b0:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	e01b      	b.n	80013ee <HAL_RCC_OscConfig+0xb62>
 80013b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	fa93 f2a3 	rbit	r2, r3
 80013ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013f6:	6011      	str	r1, [r2, #0]
 80013f8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	fa92 f1a2 	rbit	r1, r2
 8001402:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001406:	6011      	str	r1, [r2, #0]
  return(result);
 8001408:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	b252      	sxtb	r2, r2
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	b252      	sxtb	r2, r2
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f002 021f 	and.w	r2, r2, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d19d      	bne.n	8001368 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	430b      	orrs	r3, r1
 8001442:	4924      	ldr	r1, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800144c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001460:	601a      	str	r2, [r3, #0]
  return(result);
 8001462:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001466:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001470:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	461a      	mov	r2, r3
 8001478:	2301      	movs	r3, #1
 800147a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7fe ff52 	bl	8000324 <HAL_GetTick>
 8001480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	e009      	b.n	800149a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7fe ff4d 	bl	8000324 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0df      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 800149a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800149e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b2:	601a      	str	r2, [r3, #0]
  return(result);
 80014b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d104      	bne.n	80014d8 <HAL_RCC_OscConfig+0xc4c>
 80014ce:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <HAL_RCC_OscConfig+0xc48>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xc84>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f2a3 	rbit	r2, r3
 8001506:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_RCC_OscConfig+0xdd8>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001518:	6011      	str	r1, [r2, #0]
 800151a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	fa92 f1a2 	rbit	r1, r2
 8001524:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001528:	6011      	str	r1, [r2, #0]
  return(result);
 800152a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	fab2 f282 	clz	r2, r2
 8001534:	b252      	sxtb	r2, r2
 8001536:	f042 0220 	orr.w	r2, r2, #32
 800153a:	b252      	sxtb	r2, r2
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d09b      	beq.n	8001486 <HAL_RCC_OscConfig+0xbfa>
 800154e:	e083      	b.n	8001658 <HAL_RCC_OscConfig+0xdcc>
 8001550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001568:	601a      	str	r2, [r3, #0]
  return(result);
 800156a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	461a      	mov	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7fe fece 	bl	8000324 <HAL_GetTick>
 8001588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	e009      	b.n	80015a2 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7fe fec9 	bl	8000324 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e05b      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
 80015a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	601a      	str	r2, [r3, #0]
  return(result);
 80015bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	095b      	lsrs	r3, r3, #5
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0xd50>
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_RCC_OscConfig+0xdd8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	e01b      	b.n	8001614 <HAL_RCC_OscConfig+0xd88>
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f2a3 	rbit	r2, r3
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_RCC_OscConfig+0xdd8>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f107 0214 	add.w	r2, r7, #20
 8001618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800161c:	6011      	str	r1, [r2, #0]
 800161e:	f107 0214 	add.w	r2, r7, #20
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	fa92 f1a2 	rbit	r1, r2
 8001628:	f107 0210 	add.w	r2, r7, #16
 800162c:	6011      	str	r1, [r2, #0]
  return(result);
 800162e:	f107 0210 	add.w	r2, r7, #16
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	fab2 f282 	clz	r2, r2
 8001638:	b252      	sxtb	r2, r2
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	b252      	sxtb	r2, r2
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d19d      	bne.n	800158e <HAL_RCC_OscConfig+0xd02>
 8001652:	e001      	b.n	8001658 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09e      	sub	sp, #120	; 0x78
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e164      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b92      	ldr	r3, [pc, #584]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b8f      	ldr	r3, [pc, #572]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0207 	bic.w	r2, r3, #7
 8001696:	498d      	ldr	r1, [pc, #564]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e14c      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4981      	ldr	r1, [pc, #516]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80df 	beq.w	800189a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d13d      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d102      	bne.n	800170e <HAL_RCC_ClockConfig+0xa6>
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	e00f      	b.n	800172e <HAL_RCC_ClockConfig+0xc6>
 800170e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001712:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	667b      	str	r3, [r7, #100]	; 0x64
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	663b      	str	r3, [r7, #96]	; 0x60
 8001722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001732:	65ba      	str	r2, [r7, #88]	; 0x58
 8001734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800173c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b252      	sxtb	r2, r2
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	b252      	sxtb	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d17d      	bne.n	8001858 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0f4      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d13d      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x17c>
 8001768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <HAL_RCC_ClockConfig+0x12a>
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	e00f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x14a>
 8001792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
 80017a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
 80017a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80017b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017ba:	fa92 f2a2 	rbit	r2, r2
 80017be:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	b252      	sxtb	r2, r2
 80017c8:	f042 0220 	orr.w	r2, r2, #32
 80017cc:	b252      	sxtb	r2, r2
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f002 021f 	and.w	r2, r2, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d13b      	bne.n	8001858 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b2      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
 80017e4:	2302      	movs	r3, #2
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <HAL_RCC_ClockConfig+0x1a4>
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	e00d      	b.n	8001828 <HAL_RCC_ClockConfig+0x1c0>
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	2302      	movs	r3, #2
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2202      	movs	r2, #2
 800182a:	61ba      	str	r2, [r7, #24]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	fa92 f2a2 	rbit	r2, r2
 8001832:	617a      	str	r2, [r7, #20]
  return(result);
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b252      	sxtb	r2, r2
 800183c:	f042 0220 	orr.w	r2, r2, #32
 8001840:	b252      	sxtb	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f002 021f 	and.w	r2, r2, #31
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e078      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 0203 	bic.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	491a      	ldr	r1, [pc, #104]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186a:	f7fe fd5b 	bl	8000324 <HAL_GetTick>
 800186e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001870:	e00a      	b.n	8001888 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001872:	f7fe fd57 	bl	8000324 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e060      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 020c 	and.w	r2, r3, #12
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	429a      	cmp	r2, r3
 8001898:	d1eb      	bne.n	8001872 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d215      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0207 	bic.w	r2, r3, #7
 80018b0:	4906      	ldr	r1, [pc, #24]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d006      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e03f      	b.n	800194a <HAL_RCC_ClockConfig+0x2e2>
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_RCC_ClockConfig+0x2ec>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4919      	ldr	r1, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x2ec>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_RCC_ClockConfig+0x2ec>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4911      	ldr	r1, [pc, #68]	; (8001954 <HAL_RCC_ClockConfig+0x2ec>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001912:	f000 f825 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001916:	4601      	mov	r1, r0
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x2ec>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001920:	23f0      	movs	r3, #240	; 0xf0
 8001922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	60fb      	str	r3, [r7, #12]
  return(result);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_RCC_ClockConfig+0x2f0>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	fa21 f303 	lsr.w	r3, r1, r3
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_RCC_ClockConfig+0x2f4>)
 8001940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001942:	2000      	movs	r0, #0
 8001944:	f7fe fcaa 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3778      	adds	r7, #120	; 0x78
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	08002f98 	.word	0x08002f98
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	; 0x2c
 8001964:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x30>
 800198a:	2b08      	cmp	r3, #8
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x36>
 800198e:	e03c      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001992:	623b      	str	r3, [r7, #32]
      break;
 8001994:	e03c      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800199c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019a0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	607b      	str	r3, [r7, #4]
  return(result);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f003 020f 	and.w	r2, r3, #15
 80019c2:	230f      	movs	r3, #15
 80019c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xcc>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e004      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	623b      	str	r3, [r7, #32]
      break;
 8001a08:	e002      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a0c:	623b      	str	r3, [r7, #32]
      break;
 8001a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a10:	6a3b      	ldr	r3, [r7, #32]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	372c      	adds	r7, #44	; 0x2c
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	08002f78 	.word	0x08002f78
 8001a2c:	08002f88 	.word	0x08002f88
 8001a30:	003d0900 	.word	0x003d0900

08001a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a52:	f7ff ffef 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a56:	4601      	mov	r1, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a64:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	603b      	str	r3, [r7, #0]
  return(result);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08002fa8 	.word	0x08002fa8

08001a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a96:	f7ff ffcd 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001aa4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aa8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	603b      	str	r3, [r7, #0]
  return(result);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08002fa8 	.word	0x08002fa8

08001ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e043      	b.n	8001b6e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fcde 	bl	80024bc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8b9 	bl	8001c90 <UART_SetConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e022      	b.n	8001b6e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fa13 	bl	8001f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b54:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa9a 	bl	80020a0 <UART_CheckIdleState>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b088      	sub	sp, #32
 8001b7a:	af02      	add	r7, sp, #8
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d177      	bne.n	8001c86 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_UART_Transmit+0x2c>
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e070      	b.n	8001c88 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_UART_Transmit+0x3e>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e069      	b.n	8001c88 <HAL_UART_Transmit+0x112>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2221      	movs	r2, #33	; 0x21
 8001bc6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001bca:	f7fe fbab 	bl	8000324 <HAL_GetTick>
 8001bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001be0:	e034      	b.n	8001c4c <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fa97 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e03c      	b.n	8001c88 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c16:	d111      	bne.n	8001c3c <HAL_UART_Transmit+0xc6>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c30:	b292      	uxth	r2, r2
 8001c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	3302      	adds	r3, #2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	e007      	b.n	8001c4c <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1c4      	bne.n	8001be2 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fa65 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e00a      	b.n	8001c88 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b9f      	ldr	r3, [pc, #636]	; (8001f48 <UART_SetConfig+0x2b8>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a8e      	ldr	r2, [pc, #568]	; (8001f4c <UART_SetConfig+0x2bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d121      	bne.n	8001d5c <UART_SetConfig+0xcc>
 8001d18:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <UART_SetConfig+0x2c0>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d817      	bhi.n	8001d54 <UART_SetConfig+0xc4>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <UART_SetConfig+0x9c>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d4f 	.word	0x08001d4f
 8001d38:	08001d43 	.word	0x08001d43
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
 8001d40:	e01e      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d42:	2302      	movs	r3, #2
 8001d44:	75fb      	strb	r3, [r7, #23]
 8001d46:	e01b      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	75fb      	strb	r3, [r7, #23]
 8001d4c:	e018      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	75fb      	strb	r3, [r7, #23]
 8001d52:	e015      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d54:	2310      	movs	r3, #16
 8001d56:	75fb      	strb	r3, [r7, #23]
 8001d58:	bf00      	nop
 8001d5a:	e011      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7c      	ldr	r2, [pc, #496]	; (8001f54 <UART_SetConfig+0x2c4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d102      	bne.n	8001d6c <UART_SetConfig+0xdc>
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
 8001d6a:	e009      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a79      	ldr	r2, [pc, #484]	; (8001f58 <UART_SetConfig+0x2c8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d102      	bne.n	8001d7c <UART_SetConfig+0xec>
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
 8001d7a:	e001      	b.n	8001d80 <UART_SetConfig+0xf0>
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d16f      	bne.n	8001e6a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d857      	bhi.n	8001e40 <UART_SetConfig+0x1b0>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <UART_SetConfig+0x108>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001dbd 	.word	0x08001dbd
 8001d9c:	08001dd9 	.word	0x08001dd9
 8001da0:	08001df5 	.word	0x08001df5
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e0f 	.word	0x08001e0f
 8001dac:	08001e41 	.word	0x08001e41
 8001db0:	08001e41 	.word	0x08001e41
 8001db4:	08001e41 	.word	0x08001e41
 8001db8:	08001e2b 	.word	0x08001e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dbc:	f7ff fe46 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	005a      	lsls	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	441a      	add	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	82bb      	strh	r3, [r7, #20]
        break;
 8001dd6:	e036      	b.n	8001e46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dd8:	f7ff fe5a 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	005a      	lsls	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	441a      	add	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	82bb      	strh	r3, [r7, #20]
        break;
 8001df2:	e028      	b.n	8001e46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001dfe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6852      	ldr	r2, [r2, #4]
 8001e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e0a:	82bb      	strh	r3, [r7, #20]
        break;
 8001e0c:	e01b      	b.n	8001e46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e0e:	f7ff fda7 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	005a      	lsls	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	441a      	add	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	82bb      	strh	r3, [r7, #20]
        break;
 8001e28:	e00d      	b.n	8001e46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	82bb      	strh	r3, [r7, #20]
        break;
 8001e3e:	e002      	b.n	8001e46 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	74fb      	strb	r3, [r7, #19]
        break;
 8001e44:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001e46:	8abb      	ldrh	r3, [r7, #20]
 8001e48:	f023 030f 	bic.w	r3, r3, #15
 8001e4c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e4e:	8abb      	ldrh	r3, [r7, #20]
 8001e50:	105b      	asrs	r3, r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	897a      	ldrh	r2, [r7, #10]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	e069      	b.n	8001f3e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d863      	bhi.n	8001f38 <UART_SetConfig+0x2a8>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <UART_SetConfig+0x1e8>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e9d 	.word	0x08001e9d
 8001e7c:	08001ebd 	.word	0x08001ebd
 8001e80:	08001edd 	.word	0x08001edd
 8001e84:	08001f39 	.word	0x08001f39
 8001e88:	08001efd 	.word	0x08001efd
 8001e8c:	08001f39 	.word	0x08001f39
 8001e90:	08001f39 	.word	0x08001f39
 8001e94:	08001f39 	.word	0x08001f39
 8001e98:	08001f1d 	.word	0x08001f1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e9c:	f7ff fdd6 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60da      	str	r2, [r3, #12]
        break;
 8001eba:	e040      	b.n	8001f3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ebc:	f7ff fde8 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	441a      	add	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60da      	str	r2, [r3, #12]
        break;
 8001eda:	e030      	b.n	8001f3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001ee6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60da      	str	r2, [r3, #12]
        break;
 8001efa:	e020      	b.n	8001f3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001efc:	f7ff fd30 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60da      	str	r2, [r3, #12]
        break;
 8001f1a:	e010      	b.n	8001f3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60da      	str	r2, [r3, #12]
        break;
 8001f36:	e002      	b.n	8001f3e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	74fb      	strb	r3, [r7, #19]
        break;
 8001f3c:	bf00      	nop
    }
  }

  return ret;
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]

}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	efff69f3 	.word	0xefff69f3
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40004800 	.word	0x40004800

08001f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01a      	beq.n	8002072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800205a:	d10a      	bne.n	8002072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  }
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80020b2:	f7fe f937 	bl	8000324 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d10e      	bne.n	80020e4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f82c 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e022      	b.n	800212a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d10e      	bne.n	8002110 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f816 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e00c      	b.n	800212a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002142:	e02c      	b.n	800219e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d028      	beq.n	800219e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <UART_WaitOnFlagUntilTimeout+0x30>
 8002152:	f7fe f8e7 	bl	8000324 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	429a      	cmp	r2, r3
 8002160:	d21d      	bcs.n	800219e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002170:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e00f      	b.n	80021be <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d0c3      	beq.n	8002144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09e      	sub	sp, #120	; 0x78
 80021cc:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ce:	f7fe f84f 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d2:	f000 f845 	bl	8002260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d6:	f000 f8b5 	bl	8002344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021da:	f000 f883 	bl	80022e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int hora = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  int minuto = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	66bb      	str	r3, [r7, #104]	; 0x68
  int segundo = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	667b      	str	r3, [r7, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (segundo == 60){
 80021ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ec:	2b3c      	cmp	r3, #60	; 0x3c
 80021ee:	d117      	bne.n	8002220 <main+0x58>
	  minuto++;
 80021f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f2:	3301      	adds	r3, #1
 80021f4:	66bb      	str	r3, [r7, #104]	; 0x68
	  segundo = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	667b      	str	r3, [r7, #100]	; 0x64
	  	  if (minuto == 60){
 80021fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fc:	2b3c      	cmp	r3, #60	; 0x3c
 80021fe:	d10f      	bne.n	8002220 <main+0x58>
	  		  hora++;
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	3301      	adds	r3, #1
 8002204:	66fb      	str	r3, [r7, #108]	; 0x6c
	  		  segundo = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	; 0x64
	  		  minuto = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	66bb      	str	r3, [r7, #104]	; 0x68
	  		  if(hora == 24){
 800220e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002210:	2b18      	cmp	r3, #24
 8002212:	d105      	bne.n	8002220 <main+0x58>
				  hora = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	66fb      	str	r3, [r7, #108]	; 0x6c
				  minuto = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	66bb      	str	r3, [r7, #104]	; 0x68
				  segundo = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
	  		  }
	  	  }
	  }
	  segundo++;
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	3301      	adds	r3, #1
 8002224:	667b      	str	r3, [r7, #100]	; 0x64

	  sprintf(Buffer,"Relogio: %d:%d:%d\r\n",hora,minuto,segundo);
 8002226:	4638      	mov	r0, r7
 8002228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <main+0x90>)
 8002232:	f000 fa85 	bl	8002740 <siprintf>

	  HAL_UART_Transmit(&huart2,(char*)Buffer, 50, 100)!= HAL_OK;
 8002236:	4639      	mov	r1, r7
 8002238:	2364      	movs	r3, #100	; 0x64
 800223a:	2232      	movs	r2, #50	; 0x32
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <main+0x94>)
 800223e:	f7ff fc9a 	bl	8001b76 <HAL_UART_Transmit>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002242:	2120      	movs	r1, #32
 8002244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002248:	f7fe fb0e 	bl	8000868 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 800224c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002250:	f7fe f874 	bl	800033c <HAL_Delay>
    if (segundo == 60){
 8002254:	e7c9      	b.n	80021ea <main+0x22>
 8002256:	bf00      	nop
 8002258:	08002f64 	.word	0x08002f64
 800225c:	2000009c 	.word	0x2000009c

08002260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b090      	sub	sp, #64	; 0x40
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	2228      	movs	r2, #40	; 0x28
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fa5e 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002286:	2301      	movs	r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800228a:	2310      	movs	r3, #16
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228e:	2302      	movs	r3, #2
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002292:	2300      	movs	r3, #0
 8002294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002296:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe faf3 	bl	800088c <HAL_RCC_OscConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80022ac:	f000 f8da 	bl	8002464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b0:	230f      	movs	r3, #15
 80022b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b4:	2302      	movs	r3, #2
 80022b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9cc 	bl	8001668 <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80022d6:	f000 f8c5 	bl	8002464 <Error_Handler>
  }
}
 80022da:	bf00      	nop
 80022dc:	3740      	adds	r7, #64	; 0x40
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_USART2_UART_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART2_UART_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002328:	f7ff fbd4 	bl	8001ad4 <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002332:	f000 f897 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000009c 	.word	0x2000009c
 8002340:	40004400 	.word	0x40004400

08002344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <MX_GPIO_Init+0x110>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <MX_GPIO_Init+0x110>)
 8002360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002364:	6153      	str	r3, [r2, #20]
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <MX_GPIO_Init+0x110>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <MX_GPIO_Init+0x110>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a37      	ldr	r2, [pc, #220]	; (8002454 <MX_GPIO_Init+0x110>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6153      	str	r3, [r2, #20]
 800237e:	4b35      	ldr	r3, [pc, #212]	; (8002454 <MX_GPIO_Init+0x110>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <MX_GPIO_Init+0x110>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <MX_GPIO_Init+0x110>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	6153      	str	r3, [r2, #20]
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <MX_GPIO_Init+0x110>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <MX_GPIO_Init+0x110>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <MX_GPIO_Init+0x110>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6153      	str	r3, [r2, #20]
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <MX_GPIO_Init+0x110>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2120      	movs	r1, #32
 80023be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c2:	f7fe fa39 	bl	8000838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <MX_GPIO_Init+0x114>)
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4820      	ldr	r0, [pc, #128]	; (800245c <MX_GPIO_Init+0x118>)
 80023dc:	f7fe f8b6 	bl	800054c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023e0:	2320      	movs	r3, #32
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fa:	f7fe f8a7 	bl	800054c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnRight_Pin BtnUp_Pin */
  GPIO_InitStruct.Pin = BtnRight_Pin|BtnUp_Pin;
 80023fe:	f241 0310 	movw	r3, #4112	; 0x1010
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4812      	ldr	r0, [pc, #72]	; (800245c <MX_GPIO_Init+0x118>)
 8002414:	f7fe f89a 	bl	800054c <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnDown_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin;
 8002418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BtnDown_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f7fe f88c 	bl	800054c <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BtnLeft_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_GPIO_Init+0x11c>)
 8002448:	f7fe f880 	bl	800054c <HAL_GPIO_Init>

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	10210000 	.word	0x10210000
 800245c:	48000800 	.word	0x48000800
 8002460:	48000400 	.word	0x48000400

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_MspInit+0x44>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_MspInit+0x44>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6193      	str	r3, [r2, #24]
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_MspInit+0x44>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_MspInit+0x44>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_MspInit+0x44>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_MspInit+0x44>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024aa:	2007      	movs	r0, #7
 80024ac:	f7fe f81a 	bl	80004e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_UART_MspInit+0x7c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d128      	bne.n	8002530 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_UART_MspInit+0x80>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_UART_MspInit+0x80>)
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_UART_MspInit+0x80>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_UART_MspInit+0x80>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_UART_MspInit+0x80>)
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	6153      	str	r3, [r2, #20]
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_UART_MspInit+0x80>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800250e:	230c      	movs	r3, #12
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251e:	2307      	movs	r3, #7
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252c:	f7fe f80e 	bl	800054c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	; 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40004400 	.word	0x40004400
 800253c:	40021000 	.word	0x40021000

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002594:	f7fd feb2 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <_sbrk+0x50>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x16>
		heap_end = &end;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <_sbrk+0x50>)
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <_sbrk+0x54>)
 80025b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <_sbrk+0x50>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <_sbrk+0x50>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	466a      	mov	r2, sp
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d907      	bls.n	80025d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025c6:	f000 f889 	bl	80026dc <__errno>
 80025ca:	4602      	mov	r2, r0
 80025cc:	230c      	movs	r3, #12
 80025ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	e006      	b.n	80025e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <_sbrk+0x50>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a03      	ldr	r2, [pc, #12]	; (80025ec <_sbrk+0x50>)
 80025e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2000008c 	.word	0x2000008c
 80025f0:	20000110 	.word	0x20000110

080025f4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <SystemInit+0x84>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <SystemInit+0x84>)
 8002600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <SystemInit+0x88>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <SystemInit+0x88>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <SystemInit+0x88>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4918      	ldr	r1, [pc, #96]	; (800267c <SystemInit+0x88>)
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <SystemInit+0x8c>)
 800261c:	4013      	ands	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <SystemInit+0x88>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <SystemInit+0x88>)
 8002626:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <SystemInit+0x88>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <SystemInit+0x88>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <SystemInit+0x88>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <SystemInit+0x88>)
 8002642:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002646:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <SystemInit+0x88>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <SystemInit+0x88>)
 800264e:	f023 030f 	bic.w	r3, r3, #15
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <SystemInit+0x88>)
 8002656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002658:	4908      	ldr	r1, [pc, #32]	; (800267c <SystemInit+0x88>)
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <SystemInit+0x90>)
 800265c:	4013      	ands	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <SystemInit+0x88>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SystemInit+0x84>)
 8002668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800266c:	609a      	str	r2, [r3, #8]
#endif
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	40021000 	.word	0x40021000
 8002680:	f87fc00c 	.word	0xf87fc00c
 8002684:	ff00fccc 	.word	0xff00fccc

08002688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800268c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800268e:	e003      	b.n	8002698 <LoopCopyDataInit>

08002690 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002692:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002694:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002696:	3104      	adds	r1, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800269c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800269e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026a0:	d3f6      	bcc.n	8002690 <CopyDataInit>
	ldr	r2, =_sbss
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026a4:	e002      	b.n	80026ac <LoopFillZerobss>

080026a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026a8:	f842 3b04 	str.w	r3, [r2], #4

080026ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <LoopForever+0x16>)
	cmp	r2, r3
 80026ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026b0:	d3f9      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026b2:	f7ff ff9f 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f000 f817 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ba:	f7ff fd85 	bl	80021c8 <main>

080026be <LoopForever>:

LoopForever:
    b LoopForever
 80026be:	e7fe      	b.n	80026be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026c0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80026c4:	08002fec 	.word	0x08002fec
	ldr	r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026cc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80026d0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80026d4:	20000110 	.word	0x20000110

080026d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC1_2_IRQHandler>
	...

080026dc <__errno>:
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <__errno+0x8>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	4e0d      	ldr	r6, [pc, #52]	; (8002720 <__libc_init_array+0x38>)
 80026ec:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026ee:	1ba4      	subs	r4, r4, r6
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	2500      	movs	r5, #0
 80026f4:	42a5      	cmp	r5, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	4e0b      	ldr	r6, [pc, #44]	; (8002728 <__libc_init_array+0x40>)
 80026fa:	4c0c      	ldr	r4, [pc, #48]	; (800272c <__libc_init_array+0x44>)
 80026fc:	f000 fc26 	bl	8002f4c <_init>
 8002700:	1ba4      	subs	r4, r4, r6
 8002702:	10a4      	asrs	r4, r4, #2
 8002704:	2500      	movs	r5, #0
 8002706:	42a5      	cmp	r5, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002710:	4798      	blx	r3
 8002712:	3501      	adds	r5, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271a:	4798      	blx	r3
 800271c:	3501      	adds	r5, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	08002fe4 	.word	0x08002fe4
 8002724:	08002fe4 	.word	0x08002fe4
 8002728:	08002fe4 	.word	0x08002fe4
 800272c:	08002fe8 	.word	0x08002fe8

08002730 <memset>:
 8002730:	4402      	add	r2, r0
 8002732:	4603      	mov	r3, r0
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	f803 1b01 	strb.w	r1, [r3], #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <siprintf>:
 8002740:	b40e      	push	{r1, r2, r3}
 8002742:	b500      	push	{lr}
 8002744:	b09c      	sub	sp, #112	; 0x70
 8002746:	ab1d      	add	r3, sp, #116	; 0x74
 8002748:	9002      	str	r0, [sp, #8]
 800274a:	9006      	str	r0, [sp, #24]
 800274c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <siprintf+0x38>)
 8002752:	9107      	str	r1, [sp, #28]
 8002754:	9104      	str	r1, [sp, #16]
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <siprintf+0x3c>)
 8002758:	f853 2b04 	ldr.w	r2, [r3], #4
 800275c:	9105      	str	r1, [sp, #20]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	a902      	add	r1, sp, #8
 8002764:	f000 f866 	bl	8002834 <_svfiprintf_r>
 8002768:	9b02      	ldr	r3, [sp, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	b01c      	add	sp, #112	; 0x70
 8002770:	f85d eb04 	ldr.w	lr, [sp], #4
 8002774:	b003      	add	sp, #12
 8002776:	4770      	bx	lr
 8002778:	2000000c 	.word	0x2000000c
 800277c:	ffff0208 	.word	0xffff0208

08002780 <__ssputs_r>:
 8002780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	688e      	ldr	r6, [r1, #8]
 8002786:	429e      	cmp	r6, r3
 8002788:	4682      	mov	sl, r0
 800278a:	460c      	mov	r4, r1
 800278c:	4690      	mov	r8, r2
 800278e:	4699      	mov	r9, r3
 8002790:	d837      	bhi.n	8002802 <__ssputs_r+0x82>
 8002792:	898a      	ldrh	r2, [r1, #12]
 8002794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002798:	d031      	beq.n	80027fe <__ssputs_r+0x7e>
 800279a:	6825      	ldr	r5, [r4, #0]
 800279c:	6909      	ldr	r1, [r1, #16]
 800279e:	1a6f      	subs	r7, r5, r1
 80027a0:	6965      	ldr	r5, [r4, #20]
 80027a2:	2302      	movs	r3, #2
 80027a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80027ac:	f109 0301 	add.w	r3, r9, #1
 80027b0:	443b      	add	r3, r7
 80027b2:	429d      	cmp	r5, r3
 80027b4:	bf38      	it	cc
 80027b6:	461d      	movcc	r5, r3
 80027b8:	0553      	lsls	r3, r2, #21
 80027ba:	d530      	bpl.n	800281e <__ssputs_r+0x9e>
 80027bc:	4629      	mov	r1, r5
 80027be:	f000 fb2b 	bl	8002e18 <_malloc_r>
 80027c2:	4606      	mov	r6, r0
 80027c4:	b950      	cbnz	r0, 80027dc <__ssputs_r+0x5c>
 80027c6:	230c      	movs	r3, #12
 80027c8:	f8ca 3000 	str.w	r3, [sl]
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027dc:	463a      	mov	r2, r7
 80027de:	6921      	ldr	r1, [r4, #16]
 80027e0:	f000 faa8 	bl	8002d34 <memcpy>
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	6126      	str	r6, [r4, #16]
 80027f2:	6165      	str	r5, [r4, #20]
 80027f4:	443e      	add	r6, r7
 80027f6:	1bed      	subs	r5, r5, r7
 80027f8:	6026      	str	r6, [r4, #0]
 80027fa:	60a5      	str	r5, [r4, #8]
 80027fc:	464e      	mov	r6, r9
 80027fe:	454e      	cmp	r6, r9
 8002800:	d900      	bls.n	8002804 <__ssputs_r+0x84>
 8002802:	464e      	mov	r6, r9
 8002804:	4632      	mov	r2, r6
 8002806:	4641      	mov	r1, r8
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	f000 fa9e 	bl	8002d4a <memmove>
 800280e:	68a3      	ldr	r3, [r4, #8]
 8002810:	1b9b      	subs	r3, r3, r6
 8002812:	60a3      	str	r3, [r4, #8]
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	441e      	add	r6, r3
 8002818:	6026      	str	r6, [r4, #0]
 800281a:	2000      	movs	r0, #0
 800281c:	e7dc      	b.n	80027d8 <__ssputs_r+0x58>
 800281e:	462a      	mov	r2, r5
 8002820:	f000 fb54 	bl	8002ecc <_realloc_r>
 8002824:	4606      	mov	r6, r0
 8002826:	2800      	cmp	r0, #0
 8002828:	d1e2      	bne.n	80027f0 <__ssputs_r+0x70>
 800282a:	6921      	ldr	r1, [r4, #16]
 800282c:	4650      	mov	r0, sl
 800282e:	f000 faa5 	bl	8002d7c <_free_r>
 8002832:	e7c8      	b.n	80027c6 <__ssputs_r+0x46>

08002834 <_svfiprintf_r>:
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	461d      	mov	r5, r3
 800283a:	898b      	ldrh	r3, [r1, #12]
 800283c:	061f      	lsls	r7, r3, #24
 800283e:	b09d      	sub	sp, #116	; 0x74
 8002840:	4680      	mov	r8, r0
 8002842:	460c      	mov	r4, r1
 8002844:	4616      	mov	r6, r2
 8002846:	d50f      	bpl.n	8002868 <_svfiprintf_r+0x34>
 8002848:	690b      	ldr	r3, [r1, #16]
 800284a:	b96b      	cbnz	r3, 8002868 <_svfiprintf_r+0x34>
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	f000 fae3 	bl	8002e18 <_malloc_r>
 8002852:	6020      	str	r0, [r4, #0]
 8002854:	6120      	str	r0, [r4, #16]
 8002856:	b928      	cbnz	r0, 8002864 <_svfiprintf_r+0x30>
 8002858:	230c      	movs	r3, #12
 800285a:	f8c8 3000 	str.w	r3, [r8]
 800285e:	f04f 30ff 	mov.w	r0, #4294967295
 8002862:	e0c8      	b.n	80029f6 <_svfiprintf_r+0x1c2>
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	6163      	str	r3, [r4, #20]
 8002868:	2300      	movs	r3, #0
 800286a:	9309      	str	r3, [sp, #36]	; 0x24
 800286c:	2320      	movs	r3, #32
 800286e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002872:	2330      	movs	r3, #48	; 0x30
 8002874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002878:	9503      	str	r5, [sp, #12]
 800287a:	f04f 0b01 	mov.w	fp, #1
 800287e:	4637      	mov	r7, r6
 8002880:	463d      	mov	r5, r7
 8002882:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002886:	b10b      	cbz	r3, 800288c <_svfiprintf_r+0x58>
 8002888:	2b25      	cmp	r3, #37	; 0x25
 800288a:	d13e      	bne.n	800290a <_svfiprintf_r+0xd6>
 800288c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002890:	d00b      	beq.n	80028aa <_svfiprintf_r+0x76>
 8002892:	4653      	mov	r3, sl
 8002894:	4632      	mov	r2, r6
 8002896:	4621      	mov	r1, r4
 8002898:	4640      	mov	r0, r8
 800289a:	f7ff ff71 	bl	8002780 <__ssputs_r>
 800289e:	3001      	adds	r0, #1
 80028a0:	f000 80a4 	beq.w	80029ec <_svfiprintf_r+0x1b8>
 80028a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028a6:	4453      	add	r3, sl
 80028a8:	9309      	str	r3, [sp, #36]	; 0x24
 80028aa:	783b      	ldrb	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 809d 	beq.w	80029ec <_svfiprintf_r+0x1b8>
 80028b2:	2300      	movs	r3, #0
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	9307      	str	r3, [sp, #28]
 80028c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028c4:	931a      	str	r3, [sp, #104]	; 0x68
 80028c6:	462f      	mov	r7, r5
 80028c8:	2205      	movs	r2, #5
 80028ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028ce:	4850      	ldr	r0, [pc, #320]	; (8002a10 <_svfiprintf_r+0x1dc>)
 80028d0:	f7fd fc7e 	bl	80001d0 <memchr>
 80028d4:	9b04      	ldr	r3, [sp, #16]
 80028d6:	b9d0      	cbnz	r0, 800290e <_svfiprintf_r+0xda>
 80028d8:	06d9      	lsls	r1, r3, #27
 80028da:	bf44      	itt	mi
 80028dc:	2220      	movmi	r2, #32
 80028de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028e2:	071a      	lsls	r2, r3, #28
 80028e4:	bf44      	itt	mi
 80028e6:	222b      	movmi	r2, #43	; 0x2b
 80028e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028ec:	782a      	ldrb	r2, [r5, #0]
 80028ee:	2a2a      	cmp	r2, #42	; 0x2a
 80028f0:	d015      	beq.n	800291e <_svfiprintf_r+0xea>
 80028f2:	9a07      	ldr	r2, [sp, #28]
 80028f4:	462f      	mov	r7, r5
 80028f6:	2000      	movs	r0, #0
 80028f8:	250a      	movs	r5, #10
 80028fa:	4639      	mov	r1, r7
 80028fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002900:	3b30      	subs	r3, #48	; 0x30
 8002902:	2b09      	cmp	r3, #9
 8002904:	d94d      	bls.n	80029a2 <_svfiprintf_r+0x16e>
 8002906:	b1b8      	cbz	r0, 8002938 <_svfiprintf_r+0x104>
 8002908:	e00f      	b.n	800292a <_svfiprintf_r+0xf6>
 800290a:	462f      	mov	r7, r5
 800290c:	e7b8      	b.n	8002880 <_svfiprintf_r+0x4c>
 800290e:	4a40      	ldr	r2, [pc, #256]	; (8002a10 <_svfiprintf_r+0x1dc>)
 8002910:	1a80      	subs	r0, r0, r2
 8002912:	fa0b f000 	lsl.w	r0, fp, r0
 8002916:	4318      	orrs	r0, r3
 8002918:	9004      	str	r0, [sp, #16]
 800291a:	463d      	mov	r5, r7
 800291c:	e7d3      	b.n	80028c6 <_svfiprintf_r+0x92>
 800291e:	9a03      	ldr	r2, [sp, #12]
 8002920:	1d11      	adds	r1, r2, #4
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	9103      	str	r1, [sp, #12]
 8002926:	2a00      	cmp	r2, #0
 8002928:	db01      	blt.n	800292e <_svfiprintf_r+0xfa>
 800292a:	9207      	str	r2, [sp, #28]
 800292c:	e004      	b.n	8002938 <_svfiprintf_r+0x104>
 800292e:	4252      	negs	r2, r2
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	9207      	str	r2, [sp, #28]
 8002936:	9304      	str	r3, [sp, #16]
 8002938:	783b      	ldrb	r3, [r7, #0]
 800293a:	2b2e      	cmp	r3, #46	; 0x2e
 800293c:	d10c      	bne.n	8002958 <_svfiprintf_r+0x124>
 800293e:	787b      	ldrb	r3, [r7, #1]
 8002940:	2b2a      	cmp	r3, #42	; 0x2a
 8002942:	d133      	bne.n	80029ac <_svfiprintf_r+0x178>
 8002944:	9b03      	ldr	r3, [sp, #12]
 8002946:	1d1a      	adds	r2, r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	9203      	str	r2, [sp, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	bfb8      	it	lt
 8002950:	f04f 33ff 	movlt.w	r3, #4294967295
 8002954:	3702      	adds	r7, #2
 8002956:	9305      	str	r3, [sp, #20]
 8002958:	4d2e      	ldr	r5, [pc, #184]	; (8002a14 <_svfiprintf_r+0x1e0>)
 800295a:	7839      	ldrb	r1, [r7, #0]
 800295c:	2203      	movs	r2, #3
 800295e:	4628      	mov	r0, r5
 8002960:	f7fd fc36 	bl	80001d0 <memchr>
 8002964:	b138      	cbz	r0, 8002976 <_svfiprintf_r+0x142>
 8002966:	2340      	movs	r3, #64	; 0x40
 8002968:	1b40      	subs	r0, r0, r5
 800296a:	fa03 f000 	lsl.w	r0, r3, r0
 800296e:	9b04      	ldr	r3, [sp, #16]
 8002970:	4303      	orrs	r3, r0
 8002972:	3701      	adds	r7, #1
 8002974:	9304      	str	r3, [sp, #16]
 8002976:	7839      	ldrb	r1, [r7, #0]
 8002978:	4827      	ldr	r0, [pc, #156]	; (8002a18 <_svfiprintf_r+0x1e4>)
 800297a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800297e:	2206      	movs	r2, #6
 8002980:	1c7e      	adds	r6, r7, #1
 8002982:	f7fd fc25 	bl	80001d0 <memchr>
 8002986:	2800      	cmp	r0, #0
 8002988:	d038      	beq.n	80029fc <_svfiprintf_r+0x1c8>
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <_svfiprintf_r+0x1e8>)
 800298c:	bb13      	cbnz	r3, 80029d4 <_svfiprintf_r+0x1a0>
 800298e:	9b03      	ldr	r3, [sp, #12]
 8002990:	3307      	adds	r3, #7
 8002992:	f023 0307 	bic.w	r3, r3, #7
 8002996:	3308      	adds	r3, #8
 8002998:	9303      	str	r3, [sp, #12]
 800299a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800299c:	444b      	add	r3, r9
 800299e:	9309      	str	r3, [sp, #36]	; 0x24
 80029a0:	e76d      	b.n	800287e <_svfiprintf_r+0x4a>
 80029a2:	fb05 3202 	mla	r2, r5, r2, r3
 80029a6:	2001      	movs	r0, #1
 80029a8:	460f      	mov	r7, r1
 80029aa:	e7a6      	b.n	80028fa <_svfiprintf_r+0xc6>
 80029ac:	2300      	movs	r3, #0
 80029ae:	3701      	adds	r7, #1
 80029b0:	9305      	str	r3, [sp, #20]
 80029b2:	4619      	mov	r1, r3
 80029b4:	250a      	movs	r5, #10
 80029b6:	4638      	mov	r0, r7
 80029b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029bc:	3a30      	subs	r2, #48	; 0x30
 80029be:	2a09      	cmp	r2, #9
 80029c0:	d903      	bls.n	80029ca <_svfiprintf_r+0x196>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0c8      	beq.n	8002958 <_svfiprintf_r+0x124>
 80029c6:	9105      	str	r1, [sp, #20]
 80029c8:	e7c6      	b.n	8002958 <_svfiprintf_r+0x124>
 80029ca:	fb05 2101 	mla	r1, r5, r1, r2
 80029ce:	2301      	movs	r3, #1
 80029d0:	4607      	mov	r7, r0
 80029d2:	e7f0      	b.n	80029b6 <_svfiprintf_r+0x182>
 80029d4:	ab03      	add	r3, sp, #12
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4622      	mov	r2, r4
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_svfiprintf_r+0x1ec>)
 80029dc:	a904      	add	r1, sp, #16
 80029de:	4640      	mov	r0, r8
 80029e0:	f3af 8000 	nop.w
 80029e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029e8:	4681      	mov	r9, r0
 80029ea:	d1d6      	bne.n	800299a <_svfiprintf_r+0x166>
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	065b      	lsls	r3, r3, #25
 80029f0:	f53f af35 	bmi.w	800285e <_svfiprintf_r+0x2a>
 80029f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029f6:	b01d      	add	sp, #116	; 0x74
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fc:	ab03      	add	r3, sp, #12
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4622      	mov	r2, r4
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_svfiprintf_r+0x1ec>)
 8002a04:	a904      	add	r1, sp, #16
 8002a06:	4640      	mov	r0, r8
 8002a08:	f000 f882 	bl	8002b10 <_printf_i>
 8002a0c:	e7ea      	b.n	80029e4 <_svfiprintf_r+0x1b0>
 8002a0e:	bf00      	nop
 8002a10:	08002fb0 	.word	0x08002fb0
 8002a14:	08002fb6 	.word	0x08002fb6
 8002a18:	08002fba 	.word	0x08002fba
 8002a1c:	00000000 	.word	0x00000000
 8002a20:	08002781 	.word	0x08002781

08002a24 <_printf_common>:
 8002a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	4691      	mov	r9, r2
 8002a2a:	461f      	mov	r7, r3
 8002a2c:	688a      	ldr	r2, [r1, #8]
 8002a2e:	690b      	ldr	r3, [r1, #16]
 8002a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bfb8      	it	lt
 8002a38:	4613      	movlt	r3, r2
 8002a3a:	f8c9 3000 	str.w	r3, [r9]
 8002a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a42:	4606      	mov	r6, r0
 8002a44:	460c      	mov	r4, r1
 8002a46:	b112      	cbz	r2, 8002a4e <_printf_common+0x2a>
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f8c9 3000 	str.w	r3, [r9]
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	0699      	lsls	r1, r3, #26
 8002a52:	bf42      	ittt	mi
 8002a54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a58:	3302      	addmi	r3, #2
 8002a5a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a5e:	6825      	ldr	r5, [r4, #0]
 8002a60:	f015 0506 	ands.w	r5, r5, #6
 8002a64:	d107      	bne.n	8002a76 <_printf_common+0x52>
 8002a66:	f104 0a19 	add.w	sl, r4, #25
 8002a6a:	68e3      	ldr	r3, [r4, #12]
 8002a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	42ab      	cmp	r3, r5
 8002a74:	dc28      	bgt.n	8002ac8 <_printf_common+0xa4>
 8002a76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	3300      	adds	r3, #0
 8002a7e:	bf18      	it	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	0692      	lsls	r2, r2, #26
 8002a84:	d42d      	bmi.n	8002ae2 <_printf_common+0xbe>
 8002a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a8a:	4639      	mov	r1, r7
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	47c0      	blx	r8
 8002a90:	3001      	adds	r0, #1
 8002a92:	d020      	beq.n	8002ad6 <_printf_common+0xb2>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	68e5      	ldr	r5, [r4, #12]
 8002a98:	f8d9 2000 	ldr.w	r2, [r9]
 8002a9c:	f003 0306 	and.w	r3, r3, #6
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	bf08      	it	eq
 8002aa4:	1aad      	subeq	r5, r5, r2
 8002aa6:	68a3      	ldr	r3, [r4, #8]
 8002aa8:	6922      	ldr	r2, [r4, #16]
 8002aaa:	bf0c      	ite	eq
 8002aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab0:	2500      	movne	r5, #0
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	bfc4      	itt	gt
 8002ab6:	1a9b      	subgt	r3, r3, r2
 8002ab8:	18ed      	addgt	r5, r5, r3
 8002aba:	f04f 0900 	mov.w	r9, #0
 8002abe:	341a      	adds	r4, #26
 8002ac0:	454d      	cmp	r5, r9
 8002ac2:	d11a      	bne.n	8002afa <_printf_common+0xd6>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e008      	b.n	8002ada <_printf_common+0xb6>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4652      	mov	r2, sl
 8002acc:	4639      	mov	r1, r7
 8002ace:	4630      	mov	r0, r6
 8002ad0:	47c0      	blx	r8
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d103      	bne.n	8002ade <_printf_common+0xba>
 8002ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8002ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ade:	3501      	adds	r5, #1
 8002ae0:	e7c3      	b.n	8002a6a <_printf_common+0x46>
 8002ae2:	18e1      	adds	r1, r4, r3
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	2030      	movs	r0, #48	; 0x30
 8002ae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aec:	4422      	add	r2, r4
 8002aee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af6:	3302      	adds	r3, #2
 8002af8:	e7c5      	b.n	8002a86 <_printf_common+0x62>
 8002afa:	2301      	movs	r3, #1
 8002afc:	4622      	mov	r2, r4
 8002afe:	4639      	mov	r1, r7
 8002b00:	4630      	mov	r0, r6
 8002b02:	47c0      	blx	r8
 8002b04:	3001      	adds	r0, #1
 8002b06:	d0e6      	beq.n	8002ad6 <_printf_common+0xb2>
 8002b08:	f109 0901 	add.w	r9, r9, #1
 8002b0c:	e7d8      	b.n	8002ac0 <_printf_common+0x9c>
	...

08002b10 <_printf_i>:
 8002b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b18:	460c      	mov	r4, r1
 8002b1a:	7e09      	ldrb	r1, [r1, #24]
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	296e      	cmp	r1, #110	; 0x6e
 8002b20:	4617      	mov	r7, r2
 8002b22:	4606      	mov	r6, r0
 8002b24:	4698      	mov	r8, r3
 8002b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b28:	f000 80b3 	beq.w	8002c92 <_printf_i+0x182>
 8002b2c:	d822      	bhi.n	8002b74 <_printf_i+0x64>
 8002b2e:	2963      	cmp	r1, #99	; 0x63
 8002b30:	d036      	beq.n	8002ba0 <_printf_i+0x90>
 8002b32:	d80a      	bhi.n	8002b4a <_printf_i+0x3a>
 8002b34:	2900      	cmp	r1, #0
 8002b36:	f000 80b9 	beq.w	8002cac <_printf_i+0x19c>
 8002b3a:	2958      	cmp	r1, #88	; 0x58
 8002b3c:	f000 8083 	beq.w	8002c46 <_printf_i+0x136>
 8002b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b48:	e032      	b.n	8002bb0 <_printf_i+0xa0>
 8002b4a:	2964      	cmp	r1, #100	; 0x64
 8002b4c:	d001      	beq.n	8002b52 <_printf_i+0x42>
 8002b4e:	2969      	cmp	r1, #105	; 0x69
 8002b50:	d1f6      	bne.n	8002b40 <_printf_i+0x30>
 8002b52:	6820      	ldr	r0, [r4, #0]
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	0605      	lsls	r5, r0, #24
 8002b58:	f103 0104 	add.w	r1, r3, #4
 8002b5c:	d52a      	bpl.n	8002bb4 <_printf_i+0xa4>
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6011      	str	r1, [r2, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da03      	bge.n	8002b6e <_printf_i+0x5e>
 8002b66:	222d      	movs	r2, #45	; 0x2d
 8002b68:	425b      	negs	r3, r3
 8002b6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b6e:	486f      	ldr	r0, [pc, #444]	; (8002d2c <_printf_i+0x21c>)
 8002b70:	220a      	movs	r2, #10
 8002b72:	e039      	b.n	8002be8 <_printf_i+0xd8>
 8002b74:	2973      	cmp	r1, #115	; 0x73
 8002b76:	f000 809d 	beq.w	8002cb4 <_printf_i+0x1a4>
 8002b7a:	d808      	bhi.n	8002b8e <_printf_i+0x7e>
 8002b7c:	296f      	cmp	r1, #111	; 0x6f
 8002b7e:	d020      	beq.n	8002bc2 <_printf_i+0xb2>
 8002b80:	2970      	cmp	r1, #112	; 0x70
 8002b82:	d1dd      	bne.n	8002b40 <_printf_i+0x30>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	e003      	b.n	8002b96 <_printf_i+0x86>
 8002b8e:	2975      	cmp	r1, #117	; 0x75
 8002b90:	d017      	beq.n	8002bc2 <_printf_i+0xb2>
 8002b92:	2978      	cmp	r1, #120	; 0x78
 8002b94:	d1d4      	bne.n	8002b40 <_printf_i+0x30>
 8002b96:	2378      	movs	r3, #120	; 0x78
 8002b98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b9c:	4864      	ldr	r0, [pc, #400]	; (8002d30 <_printf_i+0x220>)
 8002b9e:	e055      	b.n	8002c4c <_printf_i+0x13c>
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	1d19      	adds	r1, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e08c      	b.n	8002cce <_printf_i+0x1be>
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6011      	str	r1, [r2, #0]
 8002bb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bbc:	bf18      	it	ne
 8002bbe:	b21b      	sxthne	r3, r3
 8002bc0:	e7cf      	b.n	8002b62 <_printf_i+0x52>
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	6825      	ldr	r5, [r4, #0]
 8002bc6:	1d18      	adds	r0, r3, #4
 8002bc8:	6010      	str	r0, [r2, #0]
 8002bca:	0628      	lsls	r0, r5, #24
 8002bcc:	d501      	bpl.n	8002bd2 <_printf_i+0xc2>
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e002      	b.n	8002bd8 <_printf_i+0xc8>
 8002bd2:	0668      	lsls	r0, r5, #25
 8002bd4:	d5fb      	bpl.n	8002bce <_printf_i+0xbe>
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	4854      	ldr	r0, [pc, #336]	; (8002d2c <_printf_i+0x21c>)
 8002bda:	296f      	cmp	r1, #111	; 0x6f
 8002bdc:	bf14      	ite	ne
 8002bde:	220a      	movne	r2, #10
 8002be0:	2208      	moveq	r2, #8
 8002be2:	2100      	movs	r1, #0
 8002be4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002be8:	6865      	ldr	r5, [r4, #4]
 8002bea:	60a5      	str	r5, [r4, #8]
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	f2c0 8095 	blt.w	8002d1c <_printf_i+0x20c>
 8002bf2:	6821      	ldr	r1, [r4, #0]
 8002bf4:	f021 0104 	bic.w	r1, r1, #4
 8002bf8:	6021      	str	r1, [r4, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13d      	bne.n	8002c7a <_printf_i+0x16a>
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	f040 808e 	bne.w	8002d20 <_printf_i+0x210>
 8002c04:	4665      	mov	r5, ip
 8002c06:	2a08      	cmp	r2, #8
 8002c08:	d10b      	bne.n	8002c22 <_printf_i+0x112>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	07db      	lsls	r3, r3, #31
 8002c0e:	d508      	bpl.n	8002c22 <_printf_i+0x112>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bfde      	ittt	le
 8002c18:	2330      	movle	r3, #48	; 0x30
 8002c1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c22:	ebac 0305 	sub.w	r3, ip, r5
 8002c26:	6123      	str	r3, [r4, #16]
 8002c28:	f8cd 8000 	str.w	r8, [sp]
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	aa03      	add	r2, sp, #12
 8002c30:	4621      	mov	r1, r4
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7ff fef6 	bl	8002a24 <_printf_common>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d14d      	bne.n	8002cd8 <_printf_i+0x1c8>
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	b005      	add	sp, #20
 8002c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c46:	4839      	ldr	r0, [pc, #228]	; (8002d2c <_printf_i+0x21c>)
 8002c48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	1d1d      	adds	r5, r3, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6015      	str	r5, [r2, #0]
 8002c56:	060a      	lsls	r2, r1, #24
 8002c58:	d50b      	bpl.n	8002c72 <_printf_i+0x162>
 8002c5a:	07ca      	lsls	r2, r1, #31
 8002c5c:	bf44      	itt	mi
 8002c5e:	f041 0120 	orrmi.w	r1, r1, #32
 8002c62:	6021      	strmi	r1, [r4, #0]
 8002c64:	b91b      	cbnz	r3, 8002c6e <_printf_i+0x15e>
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f022 0220 	bic.w	r2, r2, #32
 8002c6c:	6022      	str	r2, [r4, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	e7b7      	b.n	8002be2 <_printf_i+0xd2>
 8002c72:	064d      	lsls	r5, r1, #25
 8002c74:	bf48      	it	mi
 8002c76:	b29b      	uxthmi	r3, r3
 8002c78:	e7ef      	b.n	8002c5a <_printf_i+0x14a>
 8002c7a:	4665      	mov	r5, ip
 8002c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c80:	fb02 3311 	mls	r3, r2, r1, r3
 8002c84:	5cc3      	ldrb	r3, [r0, r3]
 8002c86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f5      	bne.n	8002c7c <_printf_i+0x16c>
 8002c90:	e7b9      	b.n	8002c06 <_printf_i+0xf6>
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	6961      	ldr	r1, [r4, #20]
 8002c98:	1d18      	adds	r0, r3, #4
 8002c9a:	6010      	str	r0, [r2, #0]
 8002c9c:	0628      	lsls	r0, r5, #24
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	d501      	bpl.n	8002ca6 <_printf_i+0x196>
 8002ca2:	6019      	str	r1, [r3, #0]
 8002ca4:	e002      	b.n	8002cac <_printf_i+0x19c>
 8002ca6:	066a      	lsls	r2, r5, #25
 8002ca8:	d5fb      	bpl.n	8002ca2 <_printf_i+0x192>
 8002caa:	8019      	strh	r1, [r3, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	4665      	mov	r5, ip
 8002cb2:	e7b9      	b.n	8002c28 <_printf_i+0x118>
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	1d19      	adds	r1, r3, #4
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	681d      	ldr	r5, [r3, #0]
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f7fd fa85 	bl	80001d0 <memchr>
 8002cc6:	b108      	cbz	r0, 8002ccc <_printf_i+0x1bc>
 8002cc8:	1b40      	subs	r0, r0, r5
 8002cca:	6060      	str	r0, [r4, #4]
 8002ccc:	6863      	ldr	r3, [r4, #4]
 8002cce:	6123      	str	r3, [r4, #16]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd6:	e7a7      	b.n	8002c28 <_printf_i+0x118>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	462a      	mov	r2, r5
 8002cdc:	4639      	mov	r1, r7
 8002cde:	4630      	mov	r0, r6
 8002ce0:	47c0      	blx	r8
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	d0aa      	beq.n	8002c3c <_printf_i+0x12c>
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	079b      	lsls	r3, r3, #30
 8002cea:	d413      	bmi.n	8002d14 <_printf_i+0x204>
 8002cec:	68e0      	ldr	r0, [r4, #12]
 8002cee:	9b03      	ldr	r3, [sp, #12]
 8002cf0:	4298      	cmp	r0, r3
 8002cf2:	bfb8      	it	lt
 8002cf4:	4618      	movlt	r0, r3
 8002cf6:	e7a3      	b.n	8002c40 <_printf_i+0x130>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	47c0      	blx	r8
 8002d02:	3001      	adds	r0, #1
 8002d04:	d09a      	beq.n	8002c3c <_printf_i+0x12c>
 8002d06:	3501      	adds	r5, #1
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	9a03      	ldr	r2, [sp, #12]
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	dcf2      	bgt.n	8002cf8 <_printf_i+0x1e8>
 8002d12:	e7eb      	b.n	8002cec <_printf_i+0x1dc>
 8002d14:	2500      	movs	r5, #0
 8002d16:	f104 0919 	add.w	r9, r4, #25
 8002d1a:	e7f5      	b.n	8002d08 <_printf_i+0x1f8>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ac      	bne.n	8002c7a <_printf_i+0x16a>
 8002d20:	7803      	ldrb	r3, [r0, #0]
 8002d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2a:	e76c      	b.n	8002c06 <_printf_i+0xf6>
 8002d2c:	08002fc1 	.word	0x08002fc1
 8002d30:	08002fd2 	.word	0x08002fd2

08002d34 <memcpy>:
 8002d34:	b510      	push	{r4, lr}
 8002d36:	1e43      	subs	r3, r0, #1
 8002d38:	440a      	add	r2, r1
 8002d3a:	4291      	cmp	r1, r2
 8002d3c:	d100      	bne.n	8002d40 <memcpy+0xc>
 8002d3e:	bd10      	pop	{r4, pc}
 8002d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d48:	e7f7      	b.n	8002d3a <memcpy+0x6>

08002d4a <memmove>:
 8002d4a:	4288      	cmp	r0, r1
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	eb01 0302 	add.w	r3, r1, r2
 8002d52:	d807      	bhi.n	8002d64 <memmove+0x1a>
 8002d54:	1e42      	subs	r2, r0, #1
 8002d56:	4299      	cmp	r1, r3
 8002d58:	d00a      	beq.n	8002d70 <memmove+0x26>
 8002d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d62:	e7f8      	b.n	8002d56 <memmove+0xc>
 8002d64:	4283      	cmp	r3, r0
 8002d66:	d9f5      	bls.n	8002d54 <memmove+0xa>
 8002d68:	1881      	adds	r1, r0, r2
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	42d3      	cmn	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <memmove+0x28>
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d7a:	e7f7      	b.n	8002d6c <memmove+0x22>

08002d7c <_free_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4605      	mov	r5, r0
 8002d80:	2900      	cmp	r1, #0
 8002d82:	d045      	beq.n	8002e10 <_free_r+0x94>
 8002d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d88:	1f0c      	subs	r4, r1, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfb8      	it	lt
 8002d8e:	18e4      	addlt	r4, r4, r3
 8002d90:	f000 f8d2 	bl	8002f38 <__malloc_lock>
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <_free_r+0x98>)
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	4610      	mov	r0, r2
 8002d9a:	b933      	cbnz	r3, 8002daa <_free_r+0x2e>
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	6014      	str	r4, [r2, #0]
 8002da0:	4628      	mov	r0, r5
 8002da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da6:	f000 b8c8 	b.w	8002f3a <__malloc_unlock>
 8002daa:	42a3      	cmp	r3, r4
 8002dac:	d90c      	bls.n	8002dc8 <_free_r+0x4c>
 8002dae:	6821      	ldr	r1, [r4, #0]
 8002db0:	1862      	adds	r2, r4, r1
 8002db2:	4293      	cmp	r3, r2
 8002db4:	bf04      	itt	eq
 8002db6:	681a      	ldreq	r2, [r3, #0]
 8002db8:	685b      	ldreq	r3, [r3, #4]
 8002dba:	6063      	str	r3, [r4, #4]
 8002dbc:	bf04      	itt	eq
 8002dbe:	1852      	addeq	r2, r2, r1
 8002dc0:	6022      	streq	r2, [r4, #0]
 8002dc2:	6004      	str	r4, [r0, #0]
 8002dc4:	e7ec      	b.n	8002da0 <_free_r+0x24>
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	b10a      	cbz	r2, 8002dd0 <_free_r+0x54>
 8002dcc:	42a2      	cmp	r2, r4
 8002dce:	d9fa      	bls.n	8002dc6 <_free_r+0x4a>
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	1858      	adds	r0, r3, r1
 8002dd4:	42a0      	cmp	r0, r4
 8002dd6:	d10b      	bne.n	8002df0 <_free_r+0x74>
 8002dd8:	6820      	ldr	r0, [r4, #0]
 8002dda:	4401      	add	r1, r0
 8002ddc:	1858      	adds	r0, r3, r1
 8002dde:	4282      	cmp	r2, r0
 8002de0:	6019      	str	r1, [r3, #0]
 8002de2:	d1dd      	bne.n	8002da0 <_free_r+0x24>
 8002de4:	6810      	ldr	r0, [r2, #0]
 8002de6:	6852      	ldr	r2, [r2, #4]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	4401      	add	r1, r0
 8002dec:	6019      	str	r1, [r3, #0]
 8002dee:	e7d7      	b.n	8002da0 <_free_r+0x24>
 8002df0:	d902      	bls.n	8002df8 <_free_r+0x7c>
 8002df2:	230c      	movs	r3, #12
 8002df4:	602b      	str	r3, [r5, #0]
 8002df6:	e7d3      	b.n	8002da0 <_free_r+0x24>
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	1821      	adds	r1, r4, r0
 8002dfc:	428a      	cmp	r2, r1
 8002dfe:	bf04      	itt	eq
 8002e00:	6811      	ldreq	r1, [r2, #0]
 8002e02:	6852      	ldreq	r2, [r2, #4]
 8002e04:	6062      	str	r2, [r4, #4]
 8002e06:	bf04      	itt	eq
 8002e08:	1809      	addeq	r1, r1, r0
 8002e0a:	6021      	streq	r1, [r4, #0]
 8002e0c:	605c      	str	r4, [r3, #4]
 8002e0e:	e7c7      	b.n	8002da0 <_free_r+0x24>
 8002e10:	bd38      	pop	{r3, r4, r5, pc}
 8002e12:	bf00      	nop
 8002e14:	20000090 	.word	0x20000090

08002e18 <_malloc_r>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	1ccd      	adds	r5, r1, #3
 8002e1c:	f025 0503 	bic.w	r5, r5, #3
 8002e20:	3508      	adds	r5, #8
 8002e22:	2d0c      	cmp	r5, #12
 8002e24:	bf38      	it	cc
 8002e26:	250c      	movcc	r5, #12
 8002e28:	2d00      	cmp	r5, #0
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	db01      	blt.n	8002e32 <_malloc_r+0x1a>
 8002e2e:	42a9      	cmp	r1, r5
 8002e30:	d903      	bls.n	8002e3a <_malloc_r+0x22>
 8002e32:	230c      	movs	r3, #12
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	f000 f87d 	bl	8002f38 <__malloc_lock>
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <_malloc_r+0xac>)
 8002e40:	6814      	ldr	r4, [r2, #0]
 8002e42:	4621      	mov	r1, r4
 8002e44:	b991      	cbnz	r1, 8002e6c <_malloc_r+0x54>
 8002e46:	4c20      	ldr	r4, [pc, #128]	; (8002ec8 <_malloc_r+0xb0>)
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	b91b      	cbnz	r3, 8002e54 <_malloc_r+0x3c>
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f000 f863 	bl	8002f18 <_sbrk_r>
 8002e52:	6020      	str	r0, [r4, #0]
 8002e54:	4629      	mov	r1, r5
 8002e56:	4630      	mov	r0, r6
 8002e58:	f000 f85e 	bl	8002f18 <_sbrk_r>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d124      	bne.n	8002eaa <_malloc_r+0x92>
 8002e60:	230c      	movs	r3, #12
 8002e62:	6033      	str	r3, [r6, #0]
 8002e64:	4630      	mov	r0, r6
 8002e66:	f000 f868 	bl	8002f3a <__malloc_unlock>
 8002e6a:	e7e4      	b.n	8002e36 <_malloc_r+0x1e>
 8002e6c:	680b      	ldr	r3, [r1, #0]
 8002e6e:	1b5b      	subs	r3, r3, r5
 8002e70:	d418      	bmi.n	8002ea4 <_malloc_r+0x8c>
 8002e72:	2b0b      	cmp	r3, #11
 8002e74:	d90f      	bls.n	8002e96 <_malloc_r+0x7e>
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	50cd      	str	r5, [r1, r3]
 8002e7a:	18cc      	adds	r4, r1, r3
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f85c 	bl	8002f3a <__malloc_unlock>
 8002e82:	f104 000b 	add.w	r0, r4, #11
 8002e86:	1d23      	adds	r3, r4, #4
 8002e88:	f020 0007 	bic.w	r0, r0, #7
 8002e8c:	1ac3      	subs	r3, r0, r3
 8002e8e:	d0d3      	beq.n	8002e38 <_malloc_r+0x20>
 8002e90:	425a      	negs	r2, r3
 8002e92:	50e2      	str	r2, [r4, r3]
 8002e94:	e7d0      	b.n	8002e38 <_malloc_r+0x20>
 8002e96:	428c      	cmp	r4, r1
 8002e98:	684b      	ldr	r3, [r1, #4]
 8002e9a:	bf16      	itet	ne
 8002e9c:	6063      	strne	r3, [r4, #4]
 8002e9e:	6013      	streq	r3, [r2, #0]
 8002ea0:	460c      	movne	r4, r1
 8002ea2:	e7eb      	b.n	8002e7c <_malloc_r+0x64>
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	6849      	ldr	r1, [r1, #4]
 8002ea8:	e7cc      	b.n	8002e44 <_malloc_r+0x2c>
 8002eaa:	1cc4      	adds	r4, r0, #3
 8002eac:	f024 0403 	bic.w	r4, r4, #3
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d005      	beq.n	8002ec0 <_malloc_r+0xa8>
 8002eb4:	1a21      	subs	r1, r4, r0
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f000 f82e 	bl	8002f18 <_sbrk_r>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d0cf      	beq.n	8002e60 <_malloc_r+0x48>
 8002ec0:	6025      	str	r5, [r4, #0]
 8002ec2:	e7db      	b.n	8002e7c <_malloc_r+0x64>
 8002ec4:	20000090 	.word	0x20000090
 8002ec8:	20000094 	.word	0x20000094

08002ecc <_realloc_r>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	4607      	mov	r7, r0
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	460e      	mov	r6, r1
 8002ed4:	b921      	cbnz	r1, 8002ee0 <_realloc_r+0x14>
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002edc:	f7ff bf9c 	b.w	8002e18 <_malloc_r>
 8002ee0:	b922      	cbnz	r2, 8002eec <_realloc_r+0x20>
 8002ee2:	f7ff ff4b 	bl	8002d7c <_free_r>
 8002ee6:	4625      	mov	r5, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eec:	f000 f826 	bl	8002f3c <_malloc_usable_size_r>
 8002ef0:	42a0      	cmp	r0, r4
 8002ef2:	d20f      	bcs.n	8002f14 <_realloc_r+0x48>
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	f7ff ff8e 	bl	8002e18 <_malloc_r>
 8002efc:	4605      	mov	r5, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d0f2      	beq.n	8002ee8 <_realloc_r+0x1c>
 8002f02:	4631      	mov	r1, r6
 8002f04:	4622      	mov	r2, r4
 8002f06:	f7ff ff15 	bl	8002d34 <memcpy>
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	f7ff ff35 	bl	8002d7c <_free_r>
 8002f12:	e7e9      	b.n	8002ee8 <_realloc_r+0x1c>
 8002f14:	4635      	mov	r5, r6
 8002f16:	e7e7      	b.n	8002ee8 <_realloc_r+0x1c>

08002f18 <_sbrk_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4c06      	ldr	r4, [pc, #24]	; (8002f34 <_sbrk_r+0x1c>)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4605      	mov	r5, r0
 8002f20:	4608      	mov	r0, r1
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	f7ff fb3a 	bl	800259c <_sbrk>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d102      	bne.n	8002f32 <_sbrk_r+0x1a>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	b103      	cbz	r3, 8002f32 <_sbrk_r+0x1a>
 8002f30:	602b      	str	r3, [r5, #0]
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	2000010c 	.word	0x2000010c

08002f38 <__malloc_lock>:
 8002f38:	4770      	bx	lr

08002f3a <__malloc_unlock>:
 8002f3a:	4770      	bx	lr

08002f3c <_malloc_usable_size_r>:
 8002f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f40:	1f18      	subs	r0, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfbc      	itt	lt
 8002f46:	580b      	ldrlt	r3, [r1, r0]
 8002f48:	18c0      	addlt	r0, r0, r3
 8002f4a:	4770      	bx	lr

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
